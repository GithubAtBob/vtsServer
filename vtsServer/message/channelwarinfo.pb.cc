// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelwarinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channelwarinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChannelWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelWarInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channelwarinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_channelwarinfo_2eproto() {
  protobuf_AddDesc_channelwarinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channelwarinfo.proto");
  GOOGLE_CHECK(file != NULL);
  ChannelWarInfo_descriptor_ = file->message_type(0);
  static const int ChannelWarInfo_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, minborder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, maxborder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, minangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, maxangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, maxlong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, entertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fcourse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fminspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fmaxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fminspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fmaxspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fendist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fdisendist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, fsailendist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bcourse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bminspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bmaxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bminspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bmaxspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bendist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bdisendist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, bsailendist_),
  };
  ChannelWarInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelWarInfo_descriptor_,
      ChannelWarInfo::internal_default_instance(),
      ChannelWarInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelWarInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWarInfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channelwarinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelWarInfo_descriptor_, ChannelWarInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channelwarinfo_2eproto() {
  ChannelWarInfo_default_instance_.Shutdown();
  delete ChannelWarInfo_reflection_;
}

void protobuf_InitDefaults_channelwarinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ChannelWarInfo_default_instance_.DefaultConstruct();
  ChannelWarInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_channelwarinfo_2eproto_once_);
void protobuf_InitDefaults_channelwarinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_channelwarinfo_2eproto_once_,
                 &protobuf_InitDefaults_channelwarinfo_2eproto_impl);
}
void protobuf_AddDesc_channelwarinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_channelwarinfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024channelwarinfo.proto\"\353\003\n\016ChannelWarInf"
    "o\022\r\n\005Depth\030\001 \001(\001\022\021\n\tMinBorder\030\002 \001(\001\022\021\n\tM"
    "axBorder\030\003 \001(\001\022\020\n\010MinAngle\030\004 \001(\001\022\020\n\010MaxA"
    "ngle\030\005 \001(\001\022\017\n\007MaxLong\030\006 \001(\001\022\021\n\tEnterType"
    "\030\007 \001(\t\022\017\n\007fCourse\030\010 \001(\t\022\016\n\006fAngle\030\t \001(\001\022"
    "\021\n\tfMinSpeed\030\n \001(\001\022\021\n\tfMaxSpeed\030\013 \001(\001\022\025\n"
    "\rfMinSpeedTime\030\014 \001(\001\022\025\n\rfMaxSpeedTime\030\r "
    "\001(\001\022\017\n\007fEnDist\030\016 \001(\001\022\022\n\nfDisEnDist\030\017 \001(\001"
    "\022\023\n\013fSailEnDist\030\020 \001(\001\022\017\n\007bCourse\030\021 \001(\t\022\016"
    "\n\006bAngle\030\022 \001(\001\022\021\n\tbMinSpeed\030\023 \001(\001\022\021\n\tbMa"
    "xSpeed\030\024 \001(\001\022\025\n\rbMinSpeedTime\030\025 \001(\001\022\025\n\rb"
    "MaxSpeedTime\030\026 \001(\001\022\017\n\007bEnDist\030\027 \001(\001\022\022\n\nb"
    "DisEnDist\030\030 \001(\001\022\023\n\013bSailEnDist\030\031 \001(\001b\006pr"
    "oto3", 524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channelwarinfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channelwarinfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_channelwarinfo_2eproto_once_);
void protobuf_AddDesc_channelwarinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_channelwarinfo_2eproto_once_,
                 &protobuf_AddDesc_channelwarinfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channelwarinfo_2eproto {
  StaticDescriptorInitializer_channelwarinfo_2eproto() {
    protobuf_AddDesc_channelwarinfo_2eproto();
  }
} static_descriptor_initializer_channelwarinfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelWarInfo::kDepthFieldNumber;
const int ChannelWarInfo::kMinBorderFieldNumber;
const int ChannelWarInfo::kMaxBorderFieldNumber;
const int ChannelWarInfo::kMinAngleFieldNumber;
const int ChannelWarInfo::kMaxAngleFieldNumber;
const int ChannelWarInfo::kMaxLongFieldNumber;
const int ChannelWarInfo::kEnterTypeFieldNumber;
const int ChannelWarInfo::kFCourseFieldNumber;
const int ChannelWarInfo::kFAngleFieldNumber;
const int ChannelWarInfo::kFMinSpeedFieldNumber;
const int ChannelWarInfo::kFMaxSpeedFieldNumber;
const int ChannelWarInfo::kFMinSpeedTimeFieldNumber;
const int ChannelWarInfo::kFMaxSpeedTimeFieldNumber;
const int ChannelWarInfo::kFEnDistFieldNumber;
const int ChannelWarInfo::kFDisEnDistFieldNumber;
const int ChannelWarInfo::kFSailEnDistFieldNumber;
const int ChannelWarInfo::kBCourseFieldNumber;
const int ChannelWarInfo::kBAngleFieldNumber;
const int ChannelWarInfo::kBMinSpeedFieldNumber;
const int ChannelWarInfo::kBMaxSpeedFieldNumber;
const int ChannelWarInfo::kBMinSpeedTimeFieldNumber;
const int ChannelWarInfo::kBMaxSpeedTimeFieldNumber;
const int ChannelWarInfo::kBEnDistFieldNumber;
const int ChannelWarInfo::kBDisEnDistFieldNumber;
const int ChannelWarInfo::kBSailEnDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelWarInfo::ChannelWarInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channelwarinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChannelWarInfo)
}

void ChannelWarInfo::InitAsDefaultInstance() {
}

ChannelWarInfo::ChannelWarInfo(const ChannelWarInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChannelWarInfo)
}

void ChannelWarInfo::SharedCtor() {
  entertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fcourse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bcourse_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&depth_, 0, reinterpret_cast<char*>(&bsailendist_) -
    reinterpret_cast<char*>(&depth_) + sizeof(bsailendist_));
  _cached_size_ = 0;
}

ChannelWarInfo::~ChannelWarInfo() {
  // @@protoc_insertion_point(destructor:ChannelWarInfo)
  SharedDtor();
}

void ChannelWarInfo::SharedDtor() {
  entertype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fcourse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bcourse_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelWarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelWarInfo_descriptor_;
}

const ChannelWarInfo& ChannelWarInfo::default_instance() {
  protobuf_InitDefaults_channelwarinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChannelWarInfo> ChannelWarInfo_default_instance_;

ChannelWarInfo* ChannelWarInfo::New(::google::protobuf::Arena* arena) const {
  ChannelWarInfo* n = new ChannelWarInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelWarInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelWarInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChannelWarInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChannelWarInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(depth_, maxlong_);
  entertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fcourse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(fangle_, fsailendist_);
  ZR_(bangle_, bdisendist_);
  bcourse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bsailendist_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool ChannelWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChannelWarInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Depth = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_MinBorder;
        break;
      }

      // optional double MinBorder = 2;
      case 2: {
        if (tag == 17) {
         parse_MinBorder:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minborder_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_MaxBorder;
        break;
      }

      // optional double MaxBorder = 3;
      case 3: {
        if (tag == 25) {
         parse_MaxBorder:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxborder_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_MinAngle;
        break;
      }

      // optional double MinAngle = 4;
      case 4: {
        if (tag == 33) {
         parse_MinAngle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minangle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_MaxAngle;
        break;
      }

      // optional double MaxAngle = 5;
      case 5: {
        if (tag == 41) {
         parse_MaxAngle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxangle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_MaxLong;
        break;
      }

      // optional double MaxLong = 6;
      case 6: {
        if (tag == 49) {
         parse_MaxLong:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlong_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnterType;
        break;
      }

      // optional string EnterType = 7;
      case 7: {
        if (tag == 58) {
         parse_EnterType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entertype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entertype().data(), this->entertype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelWarInfo.EnterType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_fCourse;
        break;
      }

      // optional string fCourse = 8;
      case 8: {
        if (tag == 66) {
         parse_fCourse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fcourse()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fcourse().data(), this->fcourse().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelWarInfo.fCourse"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_fAngle;
        break;
      }

      // optional double fAngle = 9;
      case 9: {
        if (tag == 73) {
         parse_fAngle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fangle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_fMinSpeed;
        break;
      }

      // optional double fMinSpeed = 10;
      case 10: {
        if (tag == 81) {
         parse_fMinSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fminspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_fMaxSpeed;
        break;
      }

      // optional double fMaxSpeed = 11;
      case 11: {
        if (tag == 89) {
         parse_fMaxSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_fMinSpeedTime;
        break;
      }

      // optional double fMinSpeedTime = 12;
      case 12: {
        if (tag == 97) {
         parse_fMinSpeedTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fminspeedtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_fMaxSpeedTime;
        break;
      }

      // optional double fMaxSpeedTime = 13;
      case 13: {
        if (tag == 105) {
         parse_fMaxSpeedTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fmaxspeedtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_fEnDist;
        break;
      }

      // optional double fEnDist = 14;
      case 14: {
        if (tag == 113) {
         parse_fEnDist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fendist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_fDisEnDist;
        break;
      }

      // optional double fDisEnDist = 15;
      case 15: {
        if (tag == 121) {
         parse_fDisEnDist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fdisendist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_fSailEnDist;
        break;
      }

      // optional double fSailEnDist = 16;
      case 16: {
        if (tag == 129) {
         parse_fSailEnDist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fsailendist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_bCourse;
        break;
      }

      // optional string bCourse = 17;
      case 17: {
        if (tag == 138) {
         parse_bCourse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bcourse()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bcourse().data(), this->bcourse().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelWarInfo.bCourse"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_bAngle;
        break;
      }

      // optional double bAngle = 18;
      case 18: {
        if (tag == 145) {
         parse_bAngle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bangle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_bMinSpeed;
        break;
      }

      // optional double bMinSpeed = 19;
      case 19: {
        if (tag == 153) {
         parse_bMinSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bminspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_bMaxSpeed;
        break;
      }

      // optional double bMaxSpeed = 20;
      case 20: {
        if (tag == 161) {
         parse_bMaxSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bmaxspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_bMinSpeedTime;
        break;
      }

      // optional double bMinSpeedTime = 21;
      case 21: {
        if (tag == 169) {
         parse_bMinSpeedTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bminspeedtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_bMaxSpeedTime;
        break;
      }

      // optional double bMaxSpeedTime = 22;
      case 22: {
        if (tag == 177) {
         parse_bMaxSpeedTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bmaxspeedtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_bEnDist;
        break;
      }

      // optional double bEnDist = 23;
      case 23: {
        if (tag == 185) {
         parse_bEnDist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bendist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_bDisEnDist;
        break;
      }

      // optional double bDisEnDist = 24;
      case 24: {
        if (tag == 193) {
         parse_bDisEnDist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bdisendist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_bSailEnDist;
        break;
      }

      // optional double bSailEnDist = 25;
      case 25: {
        if (tag == 201) {
         parse_bSailEnDist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bsailendist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChannelWarInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChannelWarInfo)
  return false;
#undef DO_
}

void ChannelWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChannelWarInfo)
  // optional double Depth = 1;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->depth(), output);
  }

  // optional double MinBorder = 2;
  if (this->minborder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->minborder(), output);
  }

  // optional double MaxBorder = 3;
  if (this->maxborder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->maxborder(), output);
  }

  // optional double MinAngle = 4;
  if (this->minangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->minangle(), output);
  }

  // optional double MaxAngle = 5;
  if (this->maxangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maxangle(), output);
  }

  // optional double MaxLong = 6;
  if (this->maxlong() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maxlong(), output);
  }

  // optional string EnterType = 7;
  if (this->entertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entertype().data(), this->entertype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelWarInfo.EnterType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->entertype(), output);
  }

  // optional string fCourse = 8;
  if (this->fcourse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fcourse().data(), this->fcourse().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelWarInfo.fCourse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->fcourse(), output);
  }

  // optional double fAngle = 9;
  if (this->fangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->fangle(), output);
  }

  // optional double fMinSpeed = 10;
  if (this->fminspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->fminspeed(), output);
  }

  // optional double fMaxSpeed = 11;
  if (this->fmaxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->fmaxspeed(), output);
  }

  // optional double fMinSpeedTime = 12;
  if (this->fminspeedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->fminspeedtime(), output);
  }

  // optional double fMaxSpeedTime = 13;
  if (this->fmaxspeedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->fmaxspeedtime(), output);
  }

  // optional double fEnDist = 14;
  if (this->fendist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->fendist(), output);
  }

  // optional double fDisEnDist = 15;
  if (this->fdisendist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->fdisendist(), output);
  }

  // optional double fSailEnDist = 16;
  if (this->fsailendist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->fsailendist(), output);
  }

  // optional string bCourse = 17;
  if (this->bcourse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcourse().data(), this->bcourse().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelWarInfo.bCourse");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->bcourse(), output);
  }

  // optional double bAngle = 18;
  if (this->bangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->bangle(), output);
  }

  // optional double bMinSpeed = 19;
  if (this->bminspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->bminspeed(), output);
  }

  // optional double bMaxSpeed = 20;
  if (this->bmaxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->bmaxspeed(), output);
  }

  // optional double bMinSpeedTime = 21;
  if (this->bminspeedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->bminspeedtime(), output);
  }

  // optional double bMaxSpeedTime = 22;
  if (this->bmaxspeedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->bmaxspeedtime(), output);
  }

  // optional double bEnDist = 23;
  if (this->bendist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->bendist(), output);
  }

  // optional double bDisEnDist = 24;
  if (this->bdisendist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->bdisendist(), output);
  }

  // optional double bSailEnDist = 25;
  if (this->bsailendist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->bsailendist(), output);
  }

  // @@protoc_insertion_point(serialize_end:ChannelWarInfo)
}

::google::protobuf::uint8* ChannelWarInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChannelWarInfo)
  // optional double Depth = 1;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->depth(), target);
  }

  // optional double MinBorder = 2;
  if (this->minborder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->minborder(), target);
  }

  // optional double MaxBorder = 3;
  if (this->maxborder() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->maxborder(), target);
  }

  // optional double MinAngle = 4;
  if (this->minangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->minangle(), target);
  }

  // optional double MaxAngle = 5;
  if (this->maxangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maxangle(), target);
  }

  // optional double MaxLong = 6;
  if (this->maxlong() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maxlong(), target);
  }

  // optional string EnterType = 7;
  if (this->entertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entertype().data(), this->entertype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelWarInfo.EnterType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->entertype(), target);
  }

  // optional string fCourse = 8;
  if (this->fcourse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fcourse().data(), this->fcourse().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelWarInfo.fCourse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fcourse(), target);
  }

  // optional double fAngle = 9;
  if (this->fangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->fangle(), target);
  }

  // optional double fMinSpeed = 10;
  if (this->fminspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->fminspeed(), target);
  }

  // optional double fMaxSpeed = 11;
  if (this->fmaxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->fmaxspeed(), target);
  }

  // optional double fMinSpeedTime = 12;
  if (this->fminspeedtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->fminspeedtime(), target);
  }

  // optional double fMaxSpeedTime = 13;
  if (this->fmaxspeedtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->fmaxspeedtime(), target);
  }

  // optional double fEnDist = 14;
  if (this->fendist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->fendist(), target);
  }

  // optional double fDisEnDist = 15;
  if (this->fdisendist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->fdisendist(), target);
  }

  // optional double fSailEnDist = 16;
  if (this->fsailendist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->fsailendist(), target);
  }

  // optional string bCourse = 17;
  if (this->bcourse().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bcourse().data(), this->bcourse().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelWarInfo.bCourse");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bcourse(), target);
  }

  // optional double bAngle = 18;
  if (this->bangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->bangle(), target);
  }

  // optional double bMinSpeed = 19;
  if (this->bminspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->bminspeed(), target);
  }

  // optional double bMaxSpeed = 20;
  if (this->bmaxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->bmaxspeed(), target);
  }

  // optional double bMinSpeedTime = 21;
  if (this->bminspeedtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->bminspeedtime(), target);
  }

  // optional double bMaxSpeedTime = 22;
  if (this->bmaxspeedtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->bmaxspeedtime(), target);
  }

  // optional double bEnDist = 23;
  if (this->bendist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->bendist(), target);
  }

  // optional double bDisEnDist = 24;
  if (this->bdisendist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->bdisendist(), target);
  }

  // optional double bSailEnDist = 25;
  if (this->bsailendist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->bsailendist(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChannelWarInfo)
  return target;
}

size_t ChannelWarInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelWarInfo)
  size_t total_size = 0;

  // optional double Depth = 1;
  if (this->depth() != 0) {
    total_size += 1 + 8;
  }

  // optional double MinBorder = 2;
  if (this->minborder() != 0) {
    total_size += 1 + 8;
  }

  // optional double MaxBorder = 3;
  if (this->maxborder() != 0) {
    total_size += 1 + 8;
  }

  // optional double MinAngle = 4;
  if (this->minangle() != 0) {
    total_size += 1 + 8;
  }

  // optional double MaxAngle = 5;
  if (this->maxangle() != 0) {
    total_size += 1 + 8;
  }

  // optional double MaxLong = 6;
  if (this->maxlong() != 0) {
    total_size += 1 + 8;
  }

  // optional string EnterType = 7;
  if (this->entertype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entertype());
  }

  // optional string fCourse = 8;
  if (this->fcourse().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fcourse());
  }

  // optional double fAngle = 9;
  if (this->fangle() != 0) {
    total_size += 1 + 8;
  }

  // optional double fMinSpeed = 10;
  if (this->fminspeed() != 0) {
    total_size += 1 + 8;
  }

  // optional double fMaxSpeed = 11;
  if (this->fmaxspeed() != 0) {
    total_size += 1 + 8;
  }

  // optional double fMinSpeedTime = 12;
  if (this->fminspeedtime() != 0) {
    total_size += 1 + 8;
  }

  // optional double fMaxSpeedTime = 13;
  if (this->fmaxspeedtime() != 0) {
    total_size += 1 + 8;
  }

  // optional double fEnDist = 14;
  if (this->fendist() != 0) {
    total_size += 1 + 8;
  }

  // optional double fDisEnDist = 15;
  if (this->fdisendist() != 0) {
    total_size += 1 + 8;
  }

  // optional double fSailEnDist = 16;
  if (this->fsailendist() != 0) {
    total_size += 2 + 8;
  }

  // optional string bCourse = 17;
  if (this->bcourse().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bcourse());
  }

  // optional double bAngle = 18;
  if (this->bangle() != 0) {
    total_size += 2 + 8;
  }

  // optional double bMinSpeed = 19;
  if (this->bminspeed() != 0) {
    total_size += 2 + 8;
  }

  // optional double bMaxSpeed = 20;
  if (this->bmaxspeed() != 0) {
    total_size += 2 + 8;
  }

  // optional double bMinSpeedTime = 21;
  if (this->bminspeedtime() != 0) {
    total_size += 2 + 8;
  }

  // optional double bMaxSpeedTime = 22;
  if (this->bmaxspeedtime() != 0) {
    total_size += 2 + 8;
  }

  // optional double bEnDist = 23;
  if (this->bendist() != 0) {
    total_size += 2 + 8;
  }

  // optional double bDisEnDist = 24;
  if (this->bdisendist() != 0) {
    total_size += 2 + 8;
  }

  // optional double bSailEnDist = 25;
  if (this->bsailendist() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelWarInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelWarInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelWarInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelWarInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelWarInfo)
    UnsafeMergeFrom(*source);
  }
}

void ChannelWarInfo::MergeFrom(const ChannelWarInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelWarInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChannelWarInfo::UnsafeMergeFrom(const ChannelWarInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.minborder() != 0) {
    set_minborder(from.minborder());
  }
  if (from.maxborder() != 0) {
    set_maxborder(from.maxborder());
  }
  if (from.minangle() != 0) {
    set_minangle(from.minangle());
  }
  if (from.maxangle() != 0) {
    set_maxangle(from.maxangle());
  }
  if (from.maxlong() != 0) {
    set_maxlong(from.maxlong());
  }
  if (from.entertype().size() > 0) {

    entertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entertype_);
  }
  if (from.fcourse().size() > 0) {

    fcourse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fcourse_);
  }
  if (from.fangle() != 0) {
    set_fangle(from.fangle());
  }
  if (from.fminspeed() != 0) {
    set_fminspeed(from.fminspeed());
  }
  if (from.fmaxspeed() != 0) {
    set_fmaxspeed(from.fmaxspeed());
  }
  if (from.fminspeedtime() != 0) {
    set_fminspeedtime(from.fminspeedtime());
  }
  if (from.fmaxspeedtime() != 0) {
    set_fmaxspeedtime(from.fmaxspeedtime());
  }
  if (from.fendist() != 0) {
    set_fendist(from.fendist());
  }
  if (from.fdisendist() != 0) {
    set_fdisendist(from.fdisendist());
  }
  if (from.fsailendist() != 0) {
    set_fsailendist(from.fsailendist());
  }
  if (from.bcourse().size() > 0) {

    bcourse_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bcourse_);
  }
  if (from.bangle() != 0) {
    set_bangle(from.bangle());
  }
  if (from.bminspeed() != 0) {
    set_bminspeed(from.bminspeed());
  }
  if (from.bmaxspeed() != 0) {
    set_bmaxspeed(from.bmaxspeed());
  }
  if (from.bminspeedtime() != 0) {
    set_bminspeedtime(from.bminspeedtime());
  }
  if (from.bmaxspeedtime() != 0) {
    set_bmaxspeedtime(from.bmaxspeedtime());
  }
  if (from.bendist() != 0) {
    set_bendist(from.bendist());
  }
  if (from.bdisendist() != 0) {
    set_bdisendist(from.bdisendist());
  }
  if (from.bsailendist() != 0) {
    set_bsailendist(from.bsailendist());
  }
}

void ChannelWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelWarInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelWarInfo::CopyFrom(const ChannelWarInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelWarInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChannelWarInfo::IsInitialized() const {

  return true;
}

void ChannelWarInfo::Swap(ChannelWarInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelWarInfo::InternalSwap(ChannelWarInfo* other) {
  std::swap(depth_, other->depth_);
  std::swap(minborder_, other->minborder_);
  std::swap(maxborder_, other->maxborder_);
  std::swap(minangle_, other->minangle_);
  std::swap(maxangle_, other->maxangle_);
  std::swap(maxlong_, other->maxlong_);
  entertype_.Swap(&other->entertype_);
  fcourse_.Swap(&other->fcourse_);
  std::swap(fangle_, other->fangle_);
  std::swap(fminspeed_, other->fminspeed_);
  std::swap(fmaxspeed_, other->fmaxspeed_);
  std::swap(fminspeedtime_, other->fminspeedtime_);
  std::swap(fmaxspeedtime_, other->fmaxspeedtime_);
  std::swap(fendist_, other->fendist_);
  std::swap(fdisendist_, other->fdisendist_);
  std::swap(fsailendist_, other->fsailendist_);
  bcourse_.Swap(&other->bcourse_);
  std::swap(bangle_, other->bangle_);
  std::swap(bminspeed_, other->bminspeed_);
  std::swap(bmaxspeed_, other->bmaxspeed_);
  std::swap(bminspeedtime_, other->bminspeedtime_);
  std::swap(bmaxspeedtime_, other->bmaxspeedtime_);
  std::swap(bendist_, other->bendist_);
  std::swap(bdisendist_, other->bdisendist_);
  std::swap(bsailendist_, other->bsailendist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelWarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelWarInfo_descriptor_;
  metadata.reflection = ChannelWarInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelWarInfo

// optional double Depth = 1;
void ChannelWarInfo::clear_depth() {
  depth_ = 0;
}
double ChannelWarInfo::depth() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.Depth)
  return depth_;
}
void ChannelWarInfo::set_depth(double value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.Depth)
}

// optional double MinBorder = 2;
void ChannelWarInfo::clear_minborder() {
  minborder_ = 0;
}
double ChannelWarInfo::minborder() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MinBorder)
  return minborder_;
}
void ChannelWarInfo::set_minborder(double value) {
  
  minborder_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MinBorder)
}

// optional double MaxBorder = 3;
void ChannelWarInfo::clear_maxborder() {
  maxborder_ = 0;
}
double ChannelWarInfo::maxborder() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MaxBorder)
  return maxborder_;
}
void ChannelWarInfo::set_maxborder(double value) {
  
  maxborder_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MaxBorder)
}

// optional double MinAngle = 4;
void ChannelWarInfo::clear_minangle() {
  minangle_ = 0;
}
double ChannelWarInfo::minangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MinAngle)
  return minangle_;
}
void ChannelWarInfo::set_minangle(double value) {
  
  minangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MinAngle)
}

// optional double MaxAngle = 5;
void ChannelWarInfo::clear_maxangle() {
  maxangle_ = 0;
}
double ChannelWarInfo::maxangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MaxAngle)
  return maxangle_;
}
void ChannelWarInfo::set_maxangle(double value) {
  
  maxangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MaxAngle)
}

// optional double MaxLong = 6;
void ChannelWarInfo::clear_maxlong() {
  maxlong_ = 0;
}
double ChannelWarInfo::maxlong() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MaxLong)
  return maxlong_;
}
void ChannelWarInfo::set_maxlong(double value) {
  
  maxlong_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MaxLong)
}

// optional string EnterType = 7;
void ChannelWarInfo::clear_entertype() {
  entertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelWarInfo::entertype() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.EnterType)
  return entertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelWarInfo::set_entertype(const ::std::string& value) {
  
  entertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelWarInfo.EnterType)
}
void ChannelWarInfo::set_entertype(const char* value) {
  
  entertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelWarInfo.EnterType)
}
void ChannelWarInfo::set_entertype(const char* value, size_t size) {
  
  entertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelWarInfo.EnterType)
}
::std::string* ChannelWarInfo::mutable_entertype() {
  
  // @@protoc_insertion_point(field_mutable:ChannelWarInfo.EnterType)
  return entertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelWarInfo::release_entertype() {
  // @@protoc_insertion_point(field_release:ChannelWarInfo.EnterType)
  
  return entertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelWarInfo::set_allocated_entertype(::std::string* entertype) {
  if (entertype != NULL) {
    
  } else {
    
  }
  entertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entertype);
  // @@protoc_insertion_point(field_set_allocated:ChannelWarInfo.EnterType)
}

// optional string fCourse = 8;
void ChannelWarInfo::clear_fcourse() {
  fcourse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelWarInfo::fcourse() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fCourse)
  return fcourse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelWarInfo::set_fcourse(const ::std::string& value) {
  
  fcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fCourse)
}
void ChannelWarInfo::set_fcourse(const char* value) {
  
  fcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelWarInfo.fCourse)
}
void ChannelWarInfo::set_fcourse(const char* value, size_t size) {
  
  fcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelWarInfo.fCourse)
}
::std::string* ChannelWarInfo::mutable_fcourse() {
  
  // @@protoc_insertion_point(field_mutable:ChannelWarInfo.fCourse)
  return fcourse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelWarInfo::release_fcourse() {
  // @@protoc_insertion_point(field_release:ChannelWarInfo.fCourse)
  
  return fcourse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelWarInfo::set_allocated_fcourse(::std::string* fcourse) {
  if (fcourse != NULL) {
    
  } else {
    
  }
  fcourse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fcourse);
  // @@protoc_insertion_point(field_set_allocated:ChannelWarInfo.fCourse)
}

// optional double fAngle = 9;
void ChannelWarInfo::clear_fangle() {
  fangle_ = 0;
}
double ChannelWarInfo::fangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fAngle)
  return fangle_;
}
void ChannelWarInfo::set_fangle(double value) {
  
  fangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fAngle)
}

// optional double fMinSpeed = 10;
void ChannelWarInfo::clear_fminspeed() {
  fminspeed_ = 0;
}
double ChannelWarInfo::fminspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMinSpeed)
  return fminspeed_;
}
void ChannelWarInfo::set_fminspeed(double value) {
  
  fminspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMinSpeed)
}

// optional double fMaxSpeed = 11;
void ChannelWarInfo::clear_fmaxspeed() {
  fmaxspeed_ = 0;
}
double ChannelWarInfo::fmaxspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMaxSpeed)
  return fmaxspeed_;
}
void ChannelWarInfo::set_fmaxspeed(double value) {
  
  fmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMaxSpeed)
}

// optional double fMinSpeedTime = 12;
void ChannelWarInfo::clear_fminspeedtime() {
  fminspeedtime_ = 0;
}
double ChannelWarInfo::fminspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMinSpeedTime)
  return fminspeedtime_;
}
void ChannelWarInfo::set_fminspeedtime(double value) {
  
  fminspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMinSpeedTime)
}

// optional double fMaxSpeedTime = 13;
void ChannelWarInfo::clear_fmaxspeedtime() {
  fmaxspeedtime_ = 0;
}
double ChannelWarInfo::fmaxspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMaxSpeedTime)
  return fmaxspeedtime_;
}
void ChannelWarInfo::set_fmaxspeedtime(double value) {
  
  fmaxspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMaxSpeedTime)
}

// optional double fEnDist = 14;
void ChannelWarInfo::clear_fendist() {
  fendist_ = 0;
}
double ChannelWarInfo::fendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fEnDist)
  return fendist_;
}
void ChannelWarInfo::set_fendist(double value) {
  
  fendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fEnDist)
}

// optional double fDisEnDist = 15;
void ChannelWarInfo::clear_fdisendist() {
  fdisendist_ = 0;
}
double ChannelWarInfo::fdisendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fDisEnDist)
  return fdisendist_;
}
void ChannelWarInfo::set_fdisendist(double value) {
  
  fdisendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fDisEnDist)
}

// optional double fSailEnDist = 16;
void ChannelWarInfo::clear_fsailendist() {
  fsailendist_ = 0;
}
double ChannelWarInfo::fsailendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fSailEnDist)
  return fsailendist_;
}
void ChannelWarInfo::set_fsailendist(double value) {
  
  fsailendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fSailEnDist)
}

// optional string bCourse = 17;
void ChannelWarInfo::clear_bcourse() {
  bcourse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelWarInfo::bcourse() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bCourse)
  return bcourse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelWarInfo::set_bcourse(const ::std::string& value) {
  
  bcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bCourse)
}
void ChannelWarInfo::set_bcourse(const char* value) {
  
  bcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelWarInfo.bCourse)
}
void ChannelWarInfo::set_bcourse(const char* value, size_t size) {
  
  bcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelWarInfo.bCourse)
}
::std::string* ChannelWarInfo::mutable_bcourse() {
  
  // @@protoc_insertion_point(field_mutable:ChannelWarInfo.bCourse)
  return bcourse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelWarInfo::release_bcourse() {
  // @@protoc_insertion_point(field_release:ChannelWarInfo.bCourse)
  
  return bcourse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelWarInfo::set_allocated_bcourse(::std::string* bcourse) {
  if (bcourse != NULL) {
    
  } else {
    
  }
  bcourse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcourse);
  // @@protoc_insertion_point(field_set_allocated:ChannelWarInfo.bCourse)
}

// optional double bAngle = 18;
void ChannelWarInfo::clear_bangle() {
  bangle_ = 0;
}
double ChannelWarInfo::bangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bAngle)
  return bangle_;
}
void ChannelWarInfo::set_bangle(double value) {
  
  bangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bAngle)
}

// optional double bMinSpeed = 19;
void ChannelWarInfo::clear_bminspeed() {
  bminspeed_ = 0;
}
double ChannelWarInfo::bminspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMinSpeed)
  return bminspeed_;
}
void ChannelWarInfo::set_bminspeed(double value) {
  
  bminspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMinSpeed)
}

// optional double bMaxSpeed = 20;
void ChannelWarInfo::clear_bmaxspeed() {
  bmaxspeed_ = 0;
}
double ChannelWarInfo::bmaxspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMaxSpeed)
  return bmaxspeed_;
}
void ChannelWarInfo::set_bmaxspeed(double value) {
  
  bmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMaxSpeed)
}

// optional double bMinSpeedTime = 21;
void ChannelWarInfo::clear_bminspeedtime() {
  bminspeedtime_ = 0;
}
double ChannelWarInfo::bminspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMinSpeedTime)
  return bminspeedtime_;
}
void ChannelWarInfo::set_bminspeedtime(double value) {
  
  bminspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMinSpeedTime)
}

// optional double bMaxSpeedTime = 22;
void ChannelWarInfo::clear_bmaxspeedtime() {
  bmaxspeedtime_ = 0;
}
double ChannelWarInfo::bmaxspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMaxSpeedTime)
  return bmaxspeedtime_;
}
void ChannelWarInfo::set_bmaxspeedtime(double value) {
  
  bmaxspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMaxSpeedTime)
}

// optional double bEnDist = 23;
void ChannelWarInfo::clear_bendist() {
  bendist_ = 0;
}
double ChannelWarInfo::bendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bEnDist)
  return bendist_;
}
void ChannelWarInfo::set_bendist(double value) {
  
  bendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bEnDist)
}

// optional double bDisEnDist = 24;
void ChannelWarInfo::clear_bdisendist() {
  bdisendist_ = 0;
}
double ChannelWarInfo::bdisendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bDisEnDist)
  return bdisendist_;
}
void ChannelWarInfo::set_bdisendist(double value) {
  
  bdisendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bDisEnDist)
}

// optional double bSailEnDist = 25;
void ChannelWarInfo::clear_bsailendist() {
  bsailendist_ = 0;
}
double ChannelWarInfo::bsailendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bSailEnDist)
  return bsailendist_;
}
void ChannelWarInfo::set_bsailendist(double value) {
  
  bsailendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bSailEnDist)
}

inline const ChannelWarInfo* ChannelWarInfo::internal_default_instance() {
  return &ChannelWarInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
