// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "channel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChannelWay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelWay_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_channel_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_channel_2eproto() {
  protobuf_AddDesc_channel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "channel.proto");
  GOOGLE_CHECK(file != NULL);
  ChannelWay_descriptor_ = file->message_type(0);
  static const int ChannelWay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWay, point_),
  };
  ChannelWay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelWay_descriptor_,
      ChannelWay::internal_default_instance(),
      ChannelWay_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelWay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelWay, _internal_metadata_));
  ChannelRequest_descriptor_ = file->message_type(1);
  static const int ChannelRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, annotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, channeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, linestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, waringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, waringtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, drawman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, isshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, info_),
  };
  ChannelRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelRequest_descriptor_,
      ChannelRequest::internal_default_instance(),
      ChannelRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRequest, _internal_metadata_));
  ChannelRepsone_descriptor_ = file->message_type(2);
  static const int ChannelRepsone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRepsone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRepsone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRepsone, channels_),
  };
  ChannelRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChannelRepsone_descriptor_,
      ChannelRepsone::internal_default_instance(),
      ChannelRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChannelRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_channel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelWay_descriptor_, ChannelWay::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelRequest_descriptor_, ChannelRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChannelRepsone_descriptor_, ChannelRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_channel_2eproto() {
  ChannelWay_default_instance_.Shutdown();
  delete ChannelWay_reflection_;
  ChannelRequest_default_instance_.Shutdown();
  delete ChannelRequest_reflection_;
  ChannelRepsone_default_instance_.Shutdown();
  delete ChannelRepsone_reflection_;
}

void protobuf_InitDefaults_channel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_PointMes_2eproto();
  ::protobuf_InitDefaults_channelwarinfo_2eproto();
  ChannelWay_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ChannelRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ChannelRepsone_default_instance_.DefaultConstruct();
  ChannelWay_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChannelRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChannelRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_channel_2eproto_once_);
void protobuf_InitDefaults_channel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_channel_2eproto_once_,
                 &protobuf_InitDefaults_channel_2eproto_impl);
}
void protobuf_AddDesc_channel_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_channel_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rchannel.proto\032\016PointMes.proto\032\024channel"
    "warinfo.proto\"&\n\nChannelWay\022\030\n\005point\030\001 \003"
    "(\0132\t.PointMes\"\233\002\n\016ChannelRequest\022\014\n\004type"
    "\030\001 \001(\005\022\n\n\002ID\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\022\n\nanno"
    "tation\030\004 \001(\t\022\023\n\013channeltype\030\005 \001(\005\022\r\n\005wid"
    "th\030\006 \001(\001\022\034\n\007channel\030\007 \003(\0132\013.ChannelWay\022\021"
    "\n\tlinestyle\030\010 \001(\005\022\021\n\tlinecolor\030\t \001(\t\022\020\n\010"
    "waringID\030\n \001(\t\022\022\n\nwaringtype\030\013 \001(\t\022\017\n\007dr"
    "awman\030\014 \001(\t\022\017\n\007isshare\030\r \001(\010\022\035\n\004info\030\016 \003"
    "(\0132\017.ChannelWarInfo\"Q\n\016ChannelRepsone\022\014\n"
    "\004type\030\001 \001(\005\022\016\n\006result\030\002 \001(\t\022!\n\010channels\030"
    "\003 \003(\0132\017.ChannelRequestb\006proto3", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "channel.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_PointMes_2eproto();
  ::protobuf_AddDesc_channelwarinfo_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_channel_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_channel_2eproto_once_);
void protobuf_AddDesc_channel_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_channel_2eproto_once_,
                 &protobuf_AddDesc_channel_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_channel_2eproto {
  StaticDescriptorInitializer_channel_2eproto() {
    protobuf_AddDesc_channel_2eproto();
  }
} static_descriptor_initializer_channel_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelWay::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelWay::ChannelWay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChannelWay)
}

void ChannelWay::InitAsDefaultInstance() {
}

ChannelWay::ChannelWay(const ChannelWay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChannelWay)
}

void ChannelWay::SharedCtor() {
  _cached_size_ = 0;
}

ChannelWay::~ChannelWay() {
  // @@protoc_insertion_point(destructor:ChannelWay)
  SharedDtor();
}

void ChannelWay::SharedDtor() {
}

void ChannelWay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelWay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelWay_descriptor_;
}

const ChannelWay& ChannelWay::default_instance() {
  protobuf_InitDefaults_channel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChannelWay> ChannelWay_default_instance_;

ChannelWay* ChannelWay::New(::google::protobuf::Arena* arena) const {
  ChannelWay* n = new ChannelWay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelWay::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelWay)
  point_.Clear();
}

bool ChannelWay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChannelWay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PointMes point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChannelWay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChannelWay)
  return false;
#undef DO_
}

void ChannelWay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChannelWay)
  // repeated .PointMes point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ChannelWay)
}

::google::protobuf::uint8* ChannelWay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChannelWay)
  // repeated .PointMes point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChannelWay)
  return target;
}

size_t ChannelWay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelWay)
  size_t total_size = 0;

  // repeated .PointMes point = 1;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelWay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelWay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelWay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelWay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelWay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelWay)
    UnsafeMergeFrom(*source);
  }
}

void ChannelWay::MergeFrom(const ChannelWay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelWay)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChannelWay::UnsafeMergeFrom(const ChannelWay& from) {
  GOOGLE_DCHECK(&from != this);
  point_.MergeFrom(from.point_);
}

void ChannelWay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelWay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelWay::CopyFrom(const ChannelWay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelWay)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChannelWay::IsInitialized() const {

  return true;
}

void ChannelWay::Swap(ChannelWay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelWay::InternalSwap(ChannelWay* other) {
  point_.UnsafeArenaSwap(&other->point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelWay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelWay_descriptor_;
  metadata.reflection = ChannelWay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelWay

// repeated .PointMes point = 1;
int ChannelWay::point_size() const {
  return point_.size();
}
void ChannelWay::clear_point() {
  point_.Clear();
}
const ::PointMes& ChannelWay::point(int index) const {
  // @@protoc_insertion_point(field_get:ChannelWay.point)
  return point_.Get(index);
}
::PointMes* ChannelWay::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelWay.point)
  return point_.Mutable(index);
}
::PointMes* ChannelWay::add_point() {
  // @@protoc_insertion_point(field_add:ChannelWay.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::PointMes >*
ChannelWay::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:ChannelWay.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::PointMes >&
ChannelWay::point() const {
  // @@protoc_insertion_point(field_list:ChannelWay.point)
  return point_;
}

inline const ChannelWay* ChannelWay::internal_default_instance() {
  return &ChannelWay_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelRequest::kTypeFieldNumber;
const int ChannelRequest::kIDFieldNumber;
const int ChannelRequest::kNameFieldNumber;
const int ChannelRequest::kAnnotationFieldNumber;
const int ChannelRequest::kChanneltypeFieldNumber;
const int ChannelRequest::kWidthFieldNumber;
const int ChannelRequest::kChannelFieldNumber;
const int ChannelRequest::kLinestyleFieldNumber;
const int ChannelRequest::kLinecolorFieldNumber;
const int ChannelRequest::kWaringIDFieldNumber;
const int ChannelRequest::kWaringtypeFieldNumber;
const int ChannelRequest::kDrawmanFieldNumber;
const int ChannelRequest::kIsshareFieldNumber;
const int ChannelRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelRequest::ChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChannelRequest)
}

void ChannelRequest::InitAsDefaultInstance() {
}

ChannelRequest::ChannelRequest(const ChannelRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChannelRequest)
}

void ChannelRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&isshare_) -
    reinterpret_cast<char*>(&type_) + sizeof(isshare_));
  _cached_size_ = 0;
}

ChannelRequest::~ChannelRequest() {
  // @@protoc_insertion_point(destructor:ChannelRequest)
  SharedDtor();
}

void ChannelRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelRequest_descriptor_;
}

const ChannelRequest& ChannelRequest::default_instance() {
  protobuf_InitDefaults_channel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChannelRequest> ChannelRequest_default_instance_;

ChannelRequest* ChannelRequest::New(::google::protobuf::Arena* arena) const {
  ChannelRequest* n = new ChannelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChannelRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChannelRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, linestyle_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  annotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isshare_ = false;

#undef ZR_HELPER_
#undef ZR_

  channel_.Clear();
  info_.Clear();
}

bool ChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (tag == 18) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRequest.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_annotation;
        break;
      }

      // optional string annotation = 4;
      case 4: {
        if (tag == 34) {
         parse_annotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_annotation()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->annotation().data(), this->annotation().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRequest.annotation"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_channeltype;
        break;
      }

      // optional int32 channeltype = 5;
      case 5: {
        if (tag == 40) {
         parse_channeltype:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channeltype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_width;
        break;
      }

      // optional double width = 6;
      case 6: {
        if (tag == 49) {
         parse_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_channel;
        break;
      }

      // repeated .ChannelWay channel = 7;
      case 7: {
        if (tag == 58) {
         parse_channel:
          DO_(input->IncrementRecursionDepth());
         parse_loop_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_channel;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_linestyle;
        break;
      }

      // optional int32 linestyle = 8;
      case 8: {
        if (tag == 64) {
         parse_linestyle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linestyle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_linecolor;
        break;
      }

      // optional string linecolor = 9;
      case 9: {
        if (tag == 74) {
         parse_linecolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linecolor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linecolor().data(), this->linecolor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRequest.linecolor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_waringID;
        break;
      }

      // optional string waringID = 10;
      case 10: {
        if (tag == 82) {
         parse_waringID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waringid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->waringid().data(), this->waringid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRequest.waringID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_waringtype;
        break;
      }

      // optional string waringtype = 11;
      case 11: {
        if (tag == 90) {
         parse_waringtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waringtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->waringtype().data(), this->waringtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRequest.waringtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_drawman;
        break;
      }

      // optional string drawman = 12;
      case 12: {
        if (tag == 98) {
         parse_drawman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawman()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drawman().data(), this->drawman().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRequest.drawman"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_isshare;
        break;
      }

      // optional bool isshare = 13;
      case 13: {
        if (tag == 104) {
         parse_isshare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_info;
        break;
      }

      // repeated .ChannelWarInfo info = 14;
      case 14: {
        if (tag == 114) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChannelRequest)
  return false;
#undef DO_
}

void ChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChannelRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string annotation = 4;
  if (this->annotation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation().data(), this->annotation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.annotation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->annotation(), output);
  }

  // optional int32 channeltype = 5;
  if (this->channeltype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channeltype(), output);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // repeated .ChannelWay channel = 7;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->channel(i), output);
  }

  // optional int32 linestyle = 8;
  if (this->linestyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->linestyle(), output);
  }

  // optional string linecolor = 9;
  if (this->linecolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linecolor().data(), this->linecolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.linecolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->linecolor(), output);
  }

  // optional string waringID = 10;
  if (this->waringid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringid().data(), this->waringid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.waringID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->waringid(), output);
  }

  // optional string waringtype = 11;
  if (this->waringtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringtype().data(), this->waringtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.waringtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->waringtype(), output);
  }

  // optional string drawman = 12;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.drawman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->drawman(), output);
  }

  // optional bool isshare = 13;
  if (this->isshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isshare(), output);
  }

  // repeated .ChannelWarInfo info = 14;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ChannelRequest)
}

::google::protobuf::uint8* ChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChannelRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string annotation = 4;
  if (this->annotation().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->annotation().data(), this->annotation().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.annotation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->annotation(), target);
  }

  // optional int32 channeltype = 5;
  if (this->channeltype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channeltype(), target);
  }

  // optional double width = 6;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // repeated .ChannelWay channel = 7;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->channel(i), false, target);
  }

  // optional int32 linestyle = 8;
  if (this->linestyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->linestyle(), target);
  }

  // optional string linecolor = 9;
  if (this->linecolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linecolor().data(), this->linecolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.linecolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->linecolor(), target);
  }

  // optional string waringID = 10;
  if (this->waringid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringid().data(), this->waringid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.waringID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->waringid(), target);
  }

  // optional string waringtype = 11;
  if (this->waringtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringtype().data(), this->waringtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.waringtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->waringtype(), target);
  }

  // optional string drawman = 12;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRequest.drawman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->drawman(), target);
  }

  // optional bool isshare = 13;
  if (this->isshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isshare(), target);
  }

  // repeated .ChannelWarInfo info = 14;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChannelRequest)
  return target;
}

size_t ChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelRequest)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string annotation = 4;
  if (this->annotation().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->annotation());
  }

  // optional int32 channeltype = 5;
  if (this->channeltype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->channeltype());
  }

  // optional double width = 6;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 linestyle = 8;
  if (this->linestyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->linestyle());
  }

  // optional string linecolor = 9;
  if (this->linecolor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linecolor());
  }

  // optional string waringID = 10;
  if (this->waringid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->waringid());
  }

  // optional string waringtype = 11;
  if (this->waringtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->waringtype());
  }

  // optional string drawman = 12;
  if (this->drawman().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drawman());
  }

  // optional bool isshare = 13;
  if (this->isshare() != 0) {
    total_size += 1 + 1;
  }

  // repeated .ChannelWay channel = 7;
  {
    unsigned int count = this->channel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel(i));
    }
  }

  // repeated .ChannelWarInfo info = 14;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelRequest)
    UnsafeMergeFrom(*source);
  }
}

void ChannelRequest::MergeFrom(const ChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChannelRequest::UnsafeMergeFrom(const ChannelRequest& from) {
  GOOGLE_DCHECK(&from != this);
  channel_.MergeFrom(from.channel_);
  info_.MergeFrom(from.info_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.annotation().size() > 0) {

    annotation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.annotation_);
  }
  if (from.channeltype() != 0) {
    set_channeltype(from.channeltype());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.linestyle() != 0) {
    set_linestyle(from.linestyle());
  }
  if (from.linecolor().size() > 0) {

    linecolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linecolor_);
  }
  if (from.waringid().size() > 0) {

    waringid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.waringid_);
  }
  if (from.waringtype().size() > 0) {

    waringtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.waringtype_);
  }
  if (from.drawman().size() > 0) {

    drawman_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drawman_);
  }
  if (from.isshare() != 0) {
    set_isshare(from.isshare());
  }
}

void ChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelRequest::CopyFrom(const ChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChannelRequest::IsInitialized() const {

  return true;
}

void ChannelRequest::Swap(ChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelRequest::InternalSwap(ChannelRequest* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  annotation_.Swap(&other->annotation_);
  std::swap(channeltype_, other->channeltype_);
  std::swap(width_, other->width_);
  channel_.UnsafeArenaSwap(&other->channel_);
  std::swap(linestyle_, other->linestyle_);
  linecolor_.Swap(&other->linecolor_);
  waringid_.Swap(&other->waringid_);
  waringtype_.Swap(&other->waringtype_);
  drawman_.Swap(&other->drawman_);
  std::swap(isshare_, other->isshare_);
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelRequest_descriptor_;
  metadata.reflection = ChannelRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelRequest

// optional int32 type = 1;
void ChannelRequest::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 ChannelRequest::type() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.type)
  return type_;
}
void ChannelRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.type)
}

// optional string ID = 2;
void ChannelRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRequest::id() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.ID)
}
void ChannelRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.ID)
}
void ChannelRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.ID)
}
::std::string* ChannelRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRequest::release_id() {
  // @@protoc_insertion_point(field_release:ChannelRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.ID)
}

// optional string name = 3;
void ChannelRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.name)
}
void ChannelRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.name)
}
void ChannelRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.name)
}
::std::string* ChannelRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:ChannelRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.name)
}

// optional string annotation = 4;
void ChannelRequest::clear_annotation() {
  annotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRequest::annotation() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.annotation)
  return annotation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_annotation(const ::std::string& value) {
  
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.annotation)
}
void ChannelRequest::set_annotation(const char* value) {
  
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.annotation)
}
void ChannelRequest::set_annotation(const char* value, size_t size) {
  
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.annotation)
}
::std::string* ChannelRequest::mutable_annotation() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.annotation)
  return annotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRequest::release_annotation() {
  // @@protoc_insertion_point(field_release:ChannelRequest.annotation)
  
  return annotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_allocated_annotation(::std::string* annotation) {
  if (annotation != NULL) {
    
  } else {
    
  }
  annotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.annotation)
}

// optional int32 channeltype = 5;
void ChannelRequest::clear_channeltype() {
  channeltype_ = 0;
}
::google::protobuf::int32 ChannelRequest::channeltype() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.channeltype)
  return channeltype_;
}
void ChannelRequest::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.channeltype)
}

// optional double width = 6;
void ChannelRequest::clear_width() {
  width_ = 0;
}
double ChannelRequest::width() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.width)
  return width_;
}
void ChannelRequest::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.width)
}

// repeated .ChannelWay channel = 7;
int ChannelRequest::channel_size() const {
  return channel_.size();
}
void ChannelRequest::clear_channel() {
  channel_.Clear();
}
const ::ChannelWay& ChannelRequest::channel(int index) const {
  // @@protoc_insertion_point(field_get:ChannelRequest.channel)
  return channel_.Get(index);
}
::ChannelWay* ChannelRequest::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelRequest.channel)
  return channel_.Mutable(index);
}
::ChannelWay* ChannelRequest::add_channel() {
  // @@protoc_insertion_point(field_add:ChannelRequest.channel)
  return channel_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChannelWay >*
ChannelRequest::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:ChannelRequest.channel)
  return &channel_;
}
const ::google::protobuf::RepeatedPtrField< ::ChannelWay >&
ChannelRequest::channel() const {
  // @@protoc_insertion_point(field_list:ChannelRequest.channel)
  return channel_;
}

// optional int32 linestyle = 8;
void ChannelRequest::clear_linestyle() {
  linestyle_ = 0;
}
::google::protobuf::int32 ChannelRequest::linestyle() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.linestyle)
  return linestyle_;
}
void ChannelRequest::set_linestyle(::google::protobuf::int32 value) {
  
  linestyle_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.linestyle)
}

// optional string linecolor = 9;
void ChannelRequest::clear_linecolor() {
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRequest::linecolor() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.linecolor)
  return linecolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_linecolor(const ::std::string& value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.linecolor)
}
void ChannelRequest::set_linecolor(const char* value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.linecolor)
}
void ChannelRequest::set_linecolor(const char* value, size_t size) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.linecolor)
}
::std::string* ChannelRequest::mutable_linecolor() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.linecolor)
  return linecolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRequest::release_linecolor() {
  // @@protoc_insertion_point(field_release:ChannelRequest.linecolor)
  
  return linecolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_allocated_linecolor(::std::string* linecolor) {
  if (linecolor != NULL) {
    
  } else {
    
  }
  linecolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linecolor);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.linecolor)
}

// optional string waringID = 10;
void ChannelRequest::clear_waringid() {
  waringid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRequest::waringid() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.waringID)
  return waringid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_waringid(const ::std::string& value) {
  
  waringid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.waringID)
}
void ChannelRequest::set_waringid(const char* value) {
  
  waringid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.waringID)
}
void ChannelRequest::set_waringid(const char* value, size_t size) {
  
  waringid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.waringID)
}
::std::string* ChannelRequest::mutable_waringid() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.waringID)
  return waringid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRequest::release_waringid() {
  // @@protoc_insertion_point(field_release:ChannelRequest.waringID)
  
  return waringid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_allocated_waringid(::std::string* waringid) {
  if (waringid != NULL) {
    
  } else {
    
  }
  waringid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waringid);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.waringID)
}

// optional string waringtype = 11;
void ChannelRequest::clear_waringtype() {
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRequest::waringtype() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.waringtype)
  return waringtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_waringtype(const ::std::string& value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.waringtype)
}
void ChannelRequest::set_waringtype(const char* value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.waringtype)
}
void ChannelRequest::set_waringtype(const char* value, size_t size) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.waringtype)
}
::std::string* ChannelRequest::mutable_waringtype() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.waringtype)
  return waringtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRequest::release_waringtype() {
  // @@protoc_insertion_point(field_release:ChannelRequest.waringtype)
  
  return waringtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_allocated_waringtype(::std::string* waringtype) {
  if (waringtype != NULL) {
    
  } else {
    
  }
  waringtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waringtype);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.waringtype)
}

// optional string drawman = 12;
void ChannelRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRequest::drawman() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.drawman)
}
void ChannelRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.drawman)
}
void ChannelRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.drawman)
}
::std::string* ChannelRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:ChannelRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.drawman)
}

// optional bool isshare = 13;
void ChannelRequest::clear_isshare() {
  isshare_ = false;
}
bool ChannelRequest::isshare() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.isshare)
  return isshare_;
}
void ChannelRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.isshare)
}

// repeated .ChannelWarInfo info = 14;
int ChannelRequest::info_size() const {
  return info_.size();
}
void ChannelRequest::clear_info() {
  info_.Clear();
}
const ::ChannelWarInfo& ChannelRequest::info(int index) const {
  // @@protoc_insertion_point(field_get:ChannelRequest.info)
  return info_.Get(index);
}
::ChannelWarInfo* ChannelRequest::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelRequest.info)
  return info_.Mutable(index);
}
::ChannelWarInfo* ChannelRequest::add_info() {
  // @@protoc_insertion_point(field_add:ChannelRequest.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChannelWarInfo >*
ChannelRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ChannelRequest.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::ChannelWarInfo >&
ChannelRequest::info() const {
  // @@protoc_insertion_point(field_list:ChannelRequest.info)
  return info_;
}

inline const ChannelRequest* ChannelRequest::internal_default_instance() {
  return &ChannelRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelRepsone::kTypeFieldNumber;
const int ChannelRepsone::kResultFieldNumber;
const int ChannelRepsone::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelRepsone::ChannelRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_channel_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChannelRepsone)
}

void ChannelRepsone::InitAsDefaultInstance() {
}

ChannelRepsone::ChannelRepsone(const ChannelRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChannelRepsone)
}

void ChannelRepsone::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

ChannelRepsone::~ChannelRepsone() {
  // @@protoc_insertion_point(destructor:ChannelRepsone)
  SharedDtor();
}

void ChannelRepsone::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelRepsone_descriptor_;
}

const ChannelRepsone& ChannelRepsone::default_instance() {
  protobuf_InitDefaults_channel_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChannelRepsone> ChannelRepsone_default_instance_;

ChannelRepsone* ChannelRepsone::New(::google::protobuf::Arena* arena) const {
  ChannelRepsone* n = new ChannelRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelRepsone)
  type_ = 0;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channels_.Clear();
}

bool ChannelRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChannelRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelRepsone.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        break;
      }

      // repeated .ChannelRequest channels = 3;
      case 3: {
        if (tag == 26) {
         parse_channels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_channels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChannelRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChannelRepsone)
  return false;
#undef DO_
}

void ChannelRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChannelRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRepsone.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // repeated .ChannelRequest channels = 3;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ChannelRepsone)
}

::google::protobuf::uint8* ChannelRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChannelRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelRepsone.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // repeated .ChannelRequest channels = 3;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->channels(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChannelRepsone)
  return target;
}

size_t ChannelRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelRepsone)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // repeated .ChannelRequest channels = 3;
  {
    unsigned int count = this->channels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channels(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChannelRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelRepsone)
    UnsafeMergeFrom(*source);
  }
}

void ChannelRepsone::MergeFrom(const ChannelRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChannelRepsone::UnsafeMergeFrom(const ChannelRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  channels_.MergeFrom(from.channels_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void ChannelRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelRepsone::CopyFrom(const ChannelRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChannelRepsone::IsInitialized() const {

  return true;
}

void ChannelRepsone::Swap(ChannelRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelRepsone::InternalSwap(ChannelRepsone* other) {
  std::swap(type_, other->type_);
  result_.Swap(&other->result_);
  channels_.UnsafeArenaSwap(&other->channels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelRepsone_descriptor_;
  metadata.reflection = ChannelRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelRepsone

// optional int32 type = 1;
void ChannelRepsone::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 ChannelRepsone::type() const {
  // @@protoc_insertion_point(field_get:ChannelRepsone.type)
  return type_;
}
void ChannelRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChannelRepsone.type)
}

// optional string result = 2;
void ChannelRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelRepsone::result() const {
  // @@protoc_insertion_point(field_get:ChannelRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRepsone.result)
}
void ChannelRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRepsone.result)
}
void ChannelRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRepsone.result)
}
::std::string* ChannelRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelRepsone::release_result() {
  // @@protoc_insertion_point(field_release:ChannelRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:ChannelRepsone.result)
}

// repeated .ChannelRequest channels = 3;
int ChannelRepsone::channels_size() const {
  return channels_.size();
}
void ChannelRepsone::clear_channels() {
  channels_.Clear();
}
const ::ChannelRequest& ChannelRepsone::channels(int index) const {
  // @@protoc_insertion_point(field_get:ChannelRepsone.channels)
  return channels_.Get(index);
}
::ChannelRequest* ChannelRepsone::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelRepsone.channels)
  return channels_.Mutable(index);
}
::ChannelRequest* ChannelRepsone::add_channels() {
  // @@protoc_insertion_point(field_add:ChannelRepsone.channels)
  return channels_.Add();
}
::google::protobuf::RepeatedPtrField< ::ChannelRequest >*
ChannelRepsone::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:ChannelRepsone.channels)
  return &channels_;
}
const ::google::protobuf::RepeatedPtrField< ::ChannelRequest >&
ChannelRepsone::channels() const {
  // @@protoc_insertion_point(field_list:ChannelRepsone.channels)
  return channels_;
}

inline const ChannelRepsone* ChannelRepsone::internal_default_instance() {
  return &ChannelRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
