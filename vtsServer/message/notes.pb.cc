// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "notes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* NotesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotesRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotesRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_notes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_notes_2eproto() {
  protobuf_AddDesc_notes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "notes.proto");
  GOOGLE_CHECK(file != NULL);
  NotesRequest_descriptor_ = file->message_type(0);
  static const int NotesRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, drawman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, isshare_),
  };
  NotesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotesRequest_descriptor_,
      NotesRequest::internal_default_instance(),
      NotesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(NotesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRequest, _internal_metadata_));
  NotesRepsone_descriptor_ = file->message_type(1);
  static const int NotesRepsone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRepsone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRepsone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRepsone, notess_),
  };
  NotesRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotesRepsone_descriptor_,
      NotesRepsone::internal_default_instance(),
      NotesRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(NotesRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotesRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_notes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotesRequest_descriptor_, NotesRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotesRepsone_descriptor_, NotesRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_notes_2eproto() {
  NotesRequest_default_instance_.Shutdown();
  delete NotesRequest_reflection_;
  NotesRepsone_default_instance_.Shutdown();
  delete NotesRepsone_reflection_;
}

void protobuf_InitDefaults_notes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  NotesRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NotesRepsone_default_instance_.DefaultConstruct();
  NotesRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  NotesRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_notes_2eproto_once_);
void protobuf_InitDefaults_notes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_notes_2eproto_once_,
                 &protobuf_InitDefaults_notes_2eproto_impl);
}
void protobuf_AddDesc_notes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_notes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013notes.proto\"\220\001\n\014NotesRequest\022\014\n\004type\030\001"
    " \001(\005\022\n\n\002ID\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003lat\030\004 "
    "\001(\001\022\013\n\003lon\030\005 \001(\001\022\r\n\005notes\030\006 \001(\t\022\r\n\005color"
    "\030\007 \001(\t\022\017\n\007drawman\030\010 \001(\t\022\017\n\007isshare\030\t \001(\010"
    "\"K\n\014NotesRepsone\022\014\n\004type\030\001 \001(\005\022\016\n\006result"
    "\030\002 \001(\t\022\035\n\006Notess\030\003 \003(\0132\r.NotesRequestb\006p"
    "roto3", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "notes.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_notes_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_notes_2eproto_once_);
void protobuf_AddDesc_notes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_notes_2eproto_once_,
                 &protobuf_AddDesc_notes_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_notes_2eproto {
  StaticDescriptorInitializer_notes_2eproto() {
    protobuf_AddDesc_notes_2eproto();
  }
} static_descriptor_initializer_notes_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotesRequest::kTypeFieldNumber;
const int NotesRequest::kIDFieldNumber;
const int NotesRequest::kNameFieldNumber;
const int NotesRequest::kLatFieldNumber;
const int NotesRequest::kLonFieldNumber;
const int NotesRequest::kNotesFieldNumber;
const int NotesRequest::kColorFieldNumber;
const int NotesRequest::kDrawmanFieldNumber;
const int NotesRequest::kIsshareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotesRequest::NotesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NotesRequest)
}

void NotesRequest::InitAsDefaultInstance() {
}

NotesRequest::NotesRequest(const NotesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NotesRequest)
}

void NotesRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&isshare_) -
    reinterpret_cast<char*>(&lat_) + sizeof(isshare_));
  _cached_size_ = 0;
}

NotesRequest::~NotesRequest() {
  // @@protoc_insertion_point(destructor:NotesRequest)
  SharedDtor();
}

void NotesRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotesRequest_descriptor_;
}

const NotesRequest& NotesRequest::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NotesRequest> NotesRequest_default_instance_;

NotesRequest* NotesRequest::New(::google::protobuf::Arena* arena) const {
  NotesRequest* n = new NotesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NotesRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NotesRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NotesRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, type_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isshare_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool NotesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NotesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (tag == 18) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NotesRequest.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NotesRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lat;
        break;
      }

      // optional double lat = 4;
      case 4: {
        if (tag == 33) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lon;
        break;
      }

      // optional double lon = 5;
      case 5: {
        if (tag == 41) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_notes;
        break;
      }

      // optional string notes = 6;
      case 6: {
        if (tag == 50) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NotesRequest.notes"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_color;
        break;
      }

      // optional string color = 7;
      case 7: {
        if (tag == 58) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NotesRequest.color"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_drawman;
        break;
      }

      // optional string drawman = 8;
      case 8: {
        if (tag == 66) {
         parse_drawman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawman()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drawman().data(), this->drawman().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NotesRequest.drawman"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isshare;
        break;
      }

      // optional bool isshare = 9;
      case 9: {
        if (tag == 72) {
         parse_isshare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NotesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NotesRequest)
  return false;
#undef DO_
}

void NotesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NotesRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // optional string notes = 6;
  if (this->notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.notes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->notes(), output);
  }

  // optional string color = 7;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->color(), output);
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.drawman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->drawman(), output);
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isshare(), output);
  }

  // @@protoc_insertion_point(serialize_end:NotesRequest)
}

::google::protobuf::uint8* NotesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NotesRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // optional string notes = 6;
  if (this->notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.notes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notes(), target);
  }

  // optional string color = 7;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->color(), target);
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRequest.drawman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->drawman(), target);
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isshare(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NotesRequest)
  return target;
}

size_t NotesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotesRequest)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // optional string notes = 6;
  if (this->notes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->notes());
  }

  // optional string color = 7;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drawman());
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NotesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NotesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NotesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NotesRequest)
    UnsafeMergeFrom(*source);
  }
}

void NotesRequest::MergeFrom(const NotesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotesRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NotesRequest::UnsafeMergeFrom(const NotesRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.notes().size() > 0) {

    notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.drawman().size() > 0) {

    drawman_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drawman_);
  }
  if (from.isshare() != 0) {
    set_isshare(from.isshare());
  }
}

void NotesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NotesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotesRequest::CopyFrom(const NotesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotesRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NotesRequest::IsInitialized() const {

  return true;
}

void NotesRequest::Swap(NotesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotesRequest::InternalSwap(NotesRequest* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  notes_.Swap(&other->notes_);
  color_.Swap(&other->color_);
  drawman_.Swap(&other->drawman_);
  std::swap(isshare_, other->isshare_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotesRequest_descriptor_;
  metadata.reflection = NotesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotesRequest

// optional int32 type = 1;
void NotesRequest::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 NotesRequest::type() const {
  // @@protoc_insertion_point(field_get:NotesRequest.type)
  return type_;
}
void NotesRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.type)
}

// optional string ID = 2;
void NotesRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotesRequest::id() const {
  // @@protoc_insertion_point(field_get:NotesRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.ID)
}
void NotesRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.ID)
}
void NotesRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.ID)
}
::std::string* NotesRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotesRequest::release_id() {
  // @@protoc_insertion_point(field_release:NotesRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.ID)
}

// optional string name = 3;
void NotesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotesRequest::name() const {
  // @@protoc_insertion_point(field_get:NotesRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.name)
}
void NotesRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.name)
}
void NotesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.name)
}
::std::string* NotesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotesRequest::release_name() {
  // @@protoc_insertion_point(field_release:NotesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.name)
}

// optional double lat = 4;
void NotesRequest::clear_lat() {
  lat_ = 0;
}
double NotesRequest::lat() const {
  // @@protoc_insertion_point(field_get:NotesRequest.lat)
  return lat_;
}
void NotesRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.lat)
}

// optional double lon = 5;
void NotesRequest::clear_lon() {
  lon_ = 0;
}
double NotesRequest::lon() const {
  // @@protoc_insertion_point(field_get:NotesRequest.lon)
  return lon_;
}
void NotesRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.lon)
}

// optional string notes = 6;
void NotesRequest::clear_notes() {
  notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotesRequest::notes() const {
  // @@protoc_insertion_point(field_get:NotesRequest.notes)
  return notes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_notes(const ::std::string& value) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.notes)
}
void NotesRequest::set_notes(const char* value) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.notes)
}
void NotesRequest::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.notes)
}
::std::string* NotesRequest::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.notes)
  return notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotesRequest::release_notes() {
  // @@protoc_insertion_point(field_release:NotesRequest.notes)
  
  return notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_allocated_notes(::std::string* notes) {
  if (notes != NULL) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.notes)
}

// optional string color = 7;
void NotesRequest::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotesRequest::color() const {
  // @@protoc_insertion_point(field_get:NotesRequest.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.color)
}
void NotesRequest::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.color)
}
void NotesRequest::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.color)
}
::std::string* NotesRequest::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotesRequest::release_color() {
  // @@protoc_insertion_point(field_release:NotesRequest.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.color)
}

// optional string drawman = 8;
void NotesRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotesRequest::drawman() const {
  // @@protoc_insertion_point(field_get:NotesRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.drawman)
}
void NotesRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.drawman)
}
void NotesRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.drawman)
}
::std::string* NotesRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotesRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:NotesRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.drawman)
}

// optional bool isshare = 9;
void NotesRequest::clear_isshare() {
  isshare_ = false;
}
bool NotesRequest::isshare() const {
  // @@protoc_insertion_point(field_get:NotesRequest.isshare)
  return isshare_;
}
void NotesRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.isshare)
}

inline const NotesRequest* NotesRequest::internal_default_instance() {
  return &NotesRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotesRepsone::kTypeFieldNumber;
const int NotesRepsone::kResultFieldNumber;
const int NotesRepsone::kNotessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotesRepsone::NotesRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_notes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:NotesRepsone)
}

void NotesRepsone::InitAsDefaultInstance() {
}

NotesRepsone::NotesRepsone(const NotesRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NotesRepsone)
}

void NotesRepsone::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

NotesRepsone::~NotesRepsone() {
  // @@protoc_insertion_point(destructor:NotesRepsone)
  SharedDtor();
}

void NotesRepsone::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NotesRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotesRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotesRepsone_descriptor_;
}

const NotesRepsone& NotesRepsone::default_instance() {
  protobuf_InitDefaults_notes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NotesRepsone> NotesRepsone_default_instance_;

NotesRepsone* NotesRepsone::New(::google::protobuf::Arena* arena) const {
  NotesRepsone* n = new NotesRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotesRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:NotesRepsone)
  type_ = 0;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notess_.Clear();
}

bool NotesRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NotesRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "NotesRepsone.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Notess;
        break;
      }

      // repeated .NotesRequest Notess = 3;
      case 3: {
        if (tag == 26) {
         parse_Notess:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Notess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_notess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Notess;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NotesRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NotesRepsone)
  return false;
#undef DO_
}

void NotesRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NotesRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRepsone.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // repeated .NotesRequest Notess = 3;
  for (unsigned int i = 0, n = this->notess_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->notess(i), output);
  }

  // @@protoc_insertion_point(serialize_end:NotesRepsone)
}

::google::protobuf::uint8* NotesRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NotesRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "NotesRepsone.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // repeated .NotesRequest Notess = 3;
  for (unsigned int i = 0, n = this->notess_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->notess(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:NotesRepsone)
  return target;
}

size_t NotesRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NotesRepsone)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // repeated .NotesRequest Notess = 3;
  {
    unsigned int count = this->notess_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notess(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotesRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NotesRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NotesRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotesRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NotesRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NotesRepsone)
    UnsafeMergeFrom(*source);
  }
}

void NotesRepsone::MergeFrom(const NotesRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NotesRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NotesRepsone::UnsafeMergeFrom(const NotesRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  notess_.MergeFrom(from.notess_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void NotesRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NotesRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotesRepsone::CopyFrom(const NotesRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NotesRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NotesRepsone::IsInitialized() const {

  return true;
}

void NotesRepsone::Swap(NotesRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotesRepsone::InternalSwap(NotesRepsone* other) {
  std::swap(type_, other->type_);
  result_.Swap(&other->result_);
  notess_.UnsafeArenaSwap(&other->notess_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotesRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotesRepsone_descriptor_;
  metadata.reflection = NotesRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotesRepsone

// optional int32 type = 1;
void NotesRepsone::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 NotesRepsone::type() const {
  // @@protoc_insertion_point(field_get:NotesRepsone.type)
  return type_;
}
void NotesRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NotesRepsone.type)
}

// optional string result = 2;
void NotesRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NotesRepsone::result() const {
  // @@protoc_insertion_point(field_get:NotesRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRepsone.result)
}
void NotesRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRepsone.result)
}
void NotesRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRepsone.result)
}
::std::string* NotesRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:NotesRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NotesRepsone::release_result() {
  // @@protoc_insertion_point(field_release:NotesRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NotesRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:NotesRepsone.result)
}

// repeated .NotesRequest Notess = 3;
int NotesRepsone::notess_size() const {
  return notess_.size();
}
void NotesRepsone::clear_notess() {
  notess_.Clear();
}
const ::NotesRequest& NotesRepsone::notess(int index) const {
  // @@protoc_insertion_point(field_get:NotesRepsone.Notess)
  return notess_.Get(index);
}
::NotesRequest* NotesRepsone::mutable_notess(int index) {
  // @@protoc_insertion_point(field_mutable:NotesRepsone.Notess)
  return notess_.Mutable(index);
}
::NotesRequest* NotesRepsone::add_notess() {
  // @@protoc_insertion_point(field_add:NotesRepsone.Notess)
  return notess_.Add();
}
::google::protobuf::RepeatedPtrField< ::NotesRequest >*
NotesRepsone::mutable_notess() {
  // @@protoc_insertion_point(field_mutable_list:NotesRepsone.Notess)
  return &notess_;
}
const ::google::protobuf::RepeatedPtrField< ::NotesRequest >&
NotesRepsone::notess() const {
  // @@protoc_insertion_point(field_list:NotesRepsone.Notess)
  return notess_;
}

inline const NotesRepsone* NotesRepsone::internal_default_instance() {
  return &NotesRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
