// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgPositionPrediction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgPositionPrediction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgPositionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgPositionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgPositionRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgPositionRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgPositionPrediction_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgPositionPrediction_2eproto() {
  protobuf_AddDesc_hgPositionPrediction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgPositionPrediction.proto");
  GOOGLE_CHECK(file != NULL);
  hgPositionRequest_descriptor_ = file->message_type(0);
  static const int hgPositionRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRequest, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRequest, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRequest, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRequest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRequest, lon_),
  };
  hgPositionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgPositionRequest_descriptor_,
      hgPositionRequest::internal_default_instance(),
      hgPositionRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgPositionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRequest, _internal_metadata_));
  hgPositionRepsone_descriptor_ = file->message_type(1);
  static const int hgPositionRepsone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRepsone, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRepsone, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRepsone, lon_),
  };
  hgPositionRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgPositionRepsone_descriptor_,
      hgPositionRepsone::internal_default_instance(),
      hgPositionRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgPositionRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPositionRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgPositionPrediction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgPositionRequest_descriptor_, hgPositionRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgPositionRepsone_descriptor_, hgPositionRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgPositionPrediction_2eproto() {
  hgPositionRequest_default_instance_.Shutdown();
  delete hgPositionRequest_reflection_;
  hgPositionRepsone_default_instance_.Shutdown();
  delete hgPositionRepsone_reflection_;
}

void protobuf_InitDefaults_hgPositionPrediction_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgPositionRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  hgPositionRepsone_default_instance_.DefaultConstruct();
  hgPositionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgPositionRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgPositionPrediction_2eproto_once_);
void protobuf_InitDefaults_hgPositionPrediction_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgPositionPrediction_2eproto_once_,
                 &protobuf_InitDefaults_hgPositionPrediction_2eproto_impl);
}
void protobuf_AddDesc_hgPositionPrediction_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgPositionPrediction_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032hgPositionPrediction.proto\"c\n\021hgPositi"
    "onRequest\022\014\n\004MMSI\030\001 \001(\t\022\013\n\003COG\030\002 \001(\001\022\013\n\003"
    "SOG\030\003 \001(\001\022\014\n\004Time\030\004 \001(\005\022\013\n\003Lat\030\005 \001(\001\022\013\n\003"
    "Lon\030\006 \001(\001\";\n\021hgPositionRepsone\022\014\n\004MMSI\030\001"
    " \001(\t\022\013\n\003Lat\030\002 \001(\001\022\013\n\003Lon\030\003 \001(\001b\006proto3", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgPositionPrediction.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgPositionPrediction_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgPositionPrediction_2eproto_once_);
void protobuf_AddDesc_hgPositionPrediction_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgPositionPrediction_2eproto_once_,
                 &protobuf_AddDesc_hgPositionPrediction_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgPositionPrediction_2eproto {
  StaticDescriptorInitializer_hgPositionPrediction_2eproto() {
    protobuf_AddDesc_hgPositionPrediction_2eproto();
  }
} static_descriptor_initializer_hgPositionPrediction_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgPositionRequest::kMMSIFieldNumber;
const int hgPositionRequest::kCOGFieldNumber;
const int hgPositionRequest::kSOGFieldNumber;
const int hgPositionRequest::kTimeFieldNumber;
const int hgPositionRequest::kLatFieldNumber;
const int hgPositionRequest::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgPositionRequest::hgPositionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgPositionPrediction_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgPositionRequest)
}

void hgPositionRequest::InitAsDefaultInstance() {
}

hgPositionRequest::hgPositionRequest(const hgPositionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgPositionRequest)
}

void hgPositionRequest::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cog_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&cog_) + sizeof(time_));
  _cached_size_ = 0;
}

hgPositionRequest::~hgPositionRequest() {
  // @@protoc_insertion_point(destructor:hgPositionRequest)
  SharedDtor();
}

void hgPositionRequest::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgPositionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgPositionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgPositionRequest_descriptor_;
}

const hgPositionRequest& hgPositionRequest::default_instance() {
  protobuf_InitDefaults_hgPositionPrediction_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgPositionRequest> hgPositionRequest_default_instance_;

hgPositionRequest* hgPositionRequest::New(::google::protobuf::Arena* arena) const {
  hgPositionRequest* n = new hgPositionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hgPositionRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgPositionRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgPositionRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cog_, time_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgPositionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgPositionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgPositionRequest.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_COG;
        break;
      }

      // optional double COG = 2;
      case 2: {
        if (tag == 17) {
         parse_COG:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_SOG;
        break;
      }

      // optional double SOG = 3;
      case 3: {
        if (tag == 25) {
         parse_SOG:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Time;
        break;
      }

      // optional int32 Time = 4;
      case 4: {
        if (tag == 32) {
         parse_Time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Lat;
        break;
      }

      // optional double Lat = 5;
      case 5: {
        if (tag == 41) {
         parse_Lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_Lon;
        break;
      }

      // optional double Lon = 6;
      case 6: {
        if (tag == 49) {
         parse_Lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgPositionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgPositionRequest)
  return false;
#undef DO_
}

void hgPositionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgPositionRequest)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgPositionRequest.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional double COG = 2;
  if (this->cog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cog(), output);
  }

  // optional double SOG = 3;
  if (this->sog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sog(), output);
  }

  // optional int32 Time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional double Lat = 5;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lat(), output);
  }

  // optional double Lon = 6;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lon(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgPositionRequest)
}

::google::protobuf::uint8* hgPositionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgPositionRequest)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgPositionRequest.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional double COG = 2;
  if (this->cog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cog(), target);
  }

  // optional double SOG = 3;
  if (this->sog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sog(), target);
  }

  // optional int32 Time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional double Lat = 5;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lat(), target);
  }

  // optional double Lon = 6;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgPositionRequest)
  return target;
}

size_t hgPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgPositionRequest)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional double COG = 2;
  if (this->cog() != 0) {
    total_size += 1 + 8;
  }

  // optional double SOG = 3;
  if (this->sog() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 Time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  // optional double Lat = 5;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double Lon = 6;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgPositionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgPositionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgPositionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgPositionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgPositionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgPositionRequest)
    UnsafeMergeFrom(*source);
  }
}

void hgPositionRequest::MergeFrom(const hgPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgPositionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgPositionRequest::UnsafeMergeFrom(const hgPositionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.cog() != 0) {
    set_cog(from.cog());
  }
  if (from.sog() != 0) {
    set_sog(from.sog());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void hgPositionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgPositionRequest::CopyFrom(const hgPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgPositionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgPositionRequest::IsInitialized() const {

  return true;
}

void hgPositionRequest::Swap(hgPositionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgPositionRequest::InternalSwap(hgPositionRequest* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(cog_, other->cog_);
  std::swap(sog_, other->sog_);
  std::swap(time_, other->time_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgPositionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgPositionRequest_descriptor_;
  metadata.reflection = hgPositionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgPositionRequest

// optional string MMSI = 1;
void hgPositionRequest::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgPositionRequest::mmsi() const {
  // @@protoc_insertion_point(field_get:hgPositionRequest.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgPositionRequest::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgPositionRequest.MMSI)
}
void hgPositionRequest::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgPositionRequest.MMSI)
}
void hgPositionRequest::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgPositionRequest.MMSI)
}
::std::string* hgPositionRequest::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgPositionRequest.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgPositionRequest::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgPositionRequest.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgPositionRequest::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgPositionRequest.MMSI)
}

// optional double COG = 2;
void hgPositionRequest::clear_cog() {
  cog_ = 0;
}
double hgPositionRequest::cog() const {
  // @@protoc_insertion_point(field_get:hgPositionRequest.COG)
  return cog_;
}
void hgPositionRequest::set_cog(double value) {
  
  cog_ = value;
  // @@protoc_insertion_point(field_set:hgPositionRequest.COG)
}

// optional double SOG = 3;
void hgPositionRequest::clear_sog() {
  sog_ = 0;
}
double hgPositionRequest::sog() const {
  // @@protoc_insertion_point(field_get:hgPositionRequest.SOG)
  return sog_;
}
void hgPositionRequest::set_sog(double value) {
  
  sog_ = value;
  // @@protoc_insertion_point(field_set:hgPositionRequest.SOG)
}

// optional int32 Time = 4;
void hgPositionRequest::clear_time() {
  time_ = 0;
}
::google::protobuf::int32 hgPositionRequest::time() const {
  // @@protoc_insertion_point(field_get:hgPositionRequest.Time)
  return time_;
}
void hgPositionRequest::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:hgPositionRequest.Time)
}

// optional double Lat = 5;
void hgPositionRequest::clear_lat() {
  lat_ = 0;
}
double hgPositionRequest::lat() const {
  // @@protoc_insertion_point(field_get:hgPositionRequest.Lat)
  return lat_;
}
void hgPositionRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgPositionRequest.Lat)
}

// optional double Lon = 6;
void hgPositionRequest::clear_lon() {
  lon_ = 0;
}
double hgPositionRequest::lon() const {
  // @@protoc_insertion_point(field_get:hgPositionRequest.Lon)
  return lon_;
}
void hgPositionRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgPositionRequest.Lon)
}

inline const hgPositionRequest* hgPositionRequest::internal_default_instance() {
  return &hgPositionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgPositionRepsone::kMMSIFieldNumber;
const int hgPositionRepsone::kLatFieldNumber;
const int hgPositionRepsone::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgPositionRepsone::hgPositionRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgPositionPrediction_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgPositionRepsone)
}

void hgPositionRepsone::InitAsDefaultInstance() {
}

hgPositionRepsone::hgPositionRepsone(const hgPositionRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgPositionRepsone)
}

void hgPositionRepsone::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_) + sizeof(lon_));
  _cached_size_ = 0;
}

hgPositionRepsone::~hgPositionRepsone() {
  // @@protoc_insertion_point(destructor:hgPositionRepsone)
  SharedDtor();
}

void hgPositionRepsone::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgPositionRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgPositionRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgPositionRepsone_descriptor_;
}

const hgPositionRepsone& hgPositionRepsone::default_instance() {
  protobuf_InitDefaults_hgPositionPrediction_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgPositionRepsone> hgPositionRepsone_default_instance_;

hgPositionRepsone* hgPositionRepsone::New(::google::protobuf::Arena* arena) const {
  hgPositionRepsone* n = new hgPositionRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgPositionRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgPositionRepsone)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgPositionRepsone, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgPositionRepsone*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, lon_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgPositionRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgPositionRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgPositionRepsone.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Lat;
        break;
      }

      // optional double Lat = 2;
      case 2: {
        if (tag == 17) {
         parse_Lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Lon;
        break;
      }

      // optional double Lon = 3;
      case 3: {
        if (tag == 25) {
         parse_Lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgPositionRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgPositionRepsone)
  return false;
#undef DO_
}

void hgPositionRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgPositionRepsone)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgPositionRepsone.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional double Lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double Lon = 3;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgPositionRepsone)
}

::google::protobuf::uint8* hgPositionRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgPositionRepsone)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgPositionRepsone.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional double Lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double Lon = 3;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgPositionRepsone)
  return target;
}

size_t hgPositionRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgPositionRepsone)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional double Lat = 2;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double Lon = 3;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgPositionRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgPositionRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgPositionRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgPositionRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgPositionRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgPositionRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgPositionRepsone::MergeFrom(const hgPositionRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgPositionRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgPositionRepsone::UnsafeMergeFrom(const hgPositionRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void hgPositionRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgPositionRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgPositionRepsone::CopyFrom(const hgPositionRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgPositionRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgPositionRepsone::IsInitialized() const {

  return true;
}

void hgPositionRepsone::Swap(hgPositionRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgPositionRepsone::InternalSwap(hgPositionRepsone* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgPositionRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgPositionRepsone_descriptor_;
  metadata.reflection = hgPositionRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgPositionRepsone

// optional string MMSI = 1;
void hgPositionRepsone::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgPositionRepsone::mmsi() const {
  // @@protoc_insertion_point(field_get:hgPositionRepsone.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgPositionRepsone::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgPositionRepsone.MMSI)
}
void hgPositionRepsone::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgPositionRepsone.MMSI)
}
void hgPositionRepsone::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgPositionRepsone.MMSI)
}
::std::string* hgPositionRepsone::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgPositionRepsone.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgPositionRepsone::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgPositionRepsone.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgPositionRepsone::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgPositionRepsone.MMSI)
}

// optional double Lat = 2;
void hgPositionRepsone::clear_lat() {
  lat_ = 0;
}
double hgPositionRepsone::lat() const {
  // @@protoc_insertion_point(field_get:hgPositionRepsone.Lat)
  return lat_;
}
void hgPositionRepsone::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgPositionRepsone.Lat)
}

// optional double Lon = 3;
void hgPositionRepsone::clear_lon() {
  lon_ = 0;
}
double hgPositionRepsone::lon() const {
  // @@protoc_insertion_point(field_get:hgPositionRepsone.Lon)
  return lon_;
}
void hgPositionRepsone::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgPositionRepsone.Lon)
}

inline const hgPositionRepsone* hgPositionRepsone::internal_default_instance() {
  return &hgPositionRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
