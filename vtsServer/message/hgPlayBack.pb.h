// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgPlayBack.proto

#ifndef PROTOBUF_hgPlayBack_2eproto__INCLUDED
#define PROTOBUF_hgPlayBack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgPlayBack_2eproto();
void protobuf_InitDefaults_hgPlayBack_2eproto();
void protobuf_AssignDesc_hgPlayBack_2eproto();
void protobuf_ShutdownFile_hgPlayBack_2eproto();

class hgPlayBack;

// ===================================================================

class hgPlayBack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgPlayBack) */ {
 public:
  hgPlayBack();
  virtual ~hgPlayBack();

  hgPlayBack(const hgPlayBack& from);

  inline hgPlayBack& operator=(const hgPlayBack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgPlayBack& default_instance();

  static const hgPlayBack* internal_default_instance();

  void Swap(hgPlayBack* other);

  // implements Message ----------------------------------------------

  inline hgPlayBack* New() const { return New(NULL); }

  hgPlayBack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgPlayBack& from);
  void MergeFrom(const hgPlayBack& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgPlayBack* other);
  void UnsafeMergeFrom(const hgPlayBack& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:hgPlayBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 time_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgPlayBack_2eproto_impl();
  friend void  protobuf_AddDesc_hgPlayBack_2eproto_impl();
  friend void protobuf_AssignDesc_hgPlayBack_2eproto();
  friend void protobuf_ShutdownFile_hgPlayBack_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgPlayBack> hgPlayBack_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgPlayBack

// optional string type = 1;
inline void hgPlayBack::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgPlayBack::type() const {
  // @@protoc_insertion_point(field_get:hgPlayBack.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgPlayBack::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgPlayBack.type)
}
inline void hgPlayBack::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgPlayBack.type)
}
inline void hgPlayBack::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgPlayBack.type)
}
inline ::std::string* hgPlayBack::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:hgPlayBack.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgPlayBack::release_type() {
  // @@protoc_insertion_point(field_release:hgPlayBack.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgPlayBack::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:hgPlayBack.type)
}

// optional int64 time = 2;
inline void hgPlayBack::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 hgPlayBack::time() const {
  // @@protoc_insertion_point(field_get:hgPlayBack.time)
  return time_;
}
inline void hgPlayBack::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:hgPlayBack.time)
}

inline const hgPlayBack* hgPlayBack::internal_default_instance() {
  return &hgPlayBack_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgPlayBack_2eproto__INCLUDED
