// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgGPSData.proto

#ifndef PROTOBUF_hgGPSData_2eproto__INCLUDED
#define PROTOBUF_hgGPSData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgGPSData_2eproto();
void protobuf_InitDefaults_hgGPSData_2eproto();
void protobuf_AssignDesc_hgGPSData_2eproto();
void protobuf_ShutdownFile_hgGPSData_2eproto();

class hgGPSData;

enum hgGPSDataType {
  GPSRMC = 0,
  GPSGGA = 1,
  GPSHDT = 2,
  GPSHDM = 3,
  hgGPSDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  hgGPSDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool hgGPSDataType_IsValid(int value);
const hgGPSDataType hgGPSDataType_MIN = GPSRMC;
const hgGPSDataType hgGPSDataType_MAX = GPSHDM;
const int hgGPSDataType_ARRAYSIZE = hgGPSDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* hgGPSDataType_descriptor();
inline const ::std::string& hgGPSDataType_Name(hgGPSDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    hgGPSDataType_descriptor(), value);
}
inline bool hgGPSDataType_Parse(
    const ::std::string& name, hgGPSDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hgGPSDataType>(
    hgGPSDataType_descriptor(), name, value);
}
// ===================================================================

class hgGPSData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgGPSData) */ {
 public:
  hgGPSData();
  virtual ~hgGPSData();

  hgGPSData(const hgGPSData& from);

  inline hgGPSData& operator=(const hgGPSData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgGPSData& default_instance();

  static const hgGPSData* internal_default_instance();

  void Swap(hgGPSData* other);

  // implements Message ----------------------------------------------

  inline hgGPSData* New() const { return New(NULL); }

  hgGPSData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgGPSData& from);
  void MergeFrom(const hgGPSData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgGPSData* other);
  void UnsafeMergeFrom(const hgGPSData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hgGPSDataType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::hgGPSDataType type() const;
  void set_type(::hgGPSDataType value);

  // optional int64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // optional double lat = 3;
  void clear_lat();
  static const int kLatFieldNumber = 3;
  double lat() const;
  void set_lat(double value);

  // optional double lon = 4;
  void clear_lon();
  static const int kLonFieldNumber = 4;
  double lon() const;
  void set_lon(double value);

  // optional bool state = 5;
  void clear_state();
  static const int kStateFieldNumber = 5;
  bool state() const;
  void set_state(bool value);

  // optional double speed = 6;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  double speed() const;
  void set_speed(double value);

  // optional double course = 7;
  void clear_course();
  static const int kCourseFieldNumber = 7;
  double course() const;
  void set_course(double value);

  // optional double hdg = 8;
  void clear_hdg();
  static const int kHdgFieldNumber = 8;
  double hdg() const;
  void set_hdg(double value);

  // optional string mmsi = 9;
  void clear_mmsi();
  static const int kMmsiFieldNumber = 9;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // @@protoc_insertion_point(class_scope:hgGPSData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  ::google::protobuf::int64 time_;
  double lat_;
  int type_;
  bool state_;
  double lon_;
  double speed_;
  double course_;
  double hdg_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgGPSData_2eproto_impl();
  friend void  protobuf_AddDesc_hgGPSData_2eproto_impl();
  friend void protobuf_AssignDesc_hgGPSData_2eproto();
  friend void protobuf_ShutdownFile_hgGPSData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgGPSData> hgGPSData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgGPSData

// optional .hgGPSDataType type = 1;
inline void hgGPSData::clear_type() {
  type_ = 0;
}
inline ::hgGPSDataType hgGPSData::type() const {
  // @@protoc_insertion_point(field_get:hgGPSData.type)
  return static_cast< ::hgGPSDataType >(type_);
}
inline void hgGPSData::set_type(::hgGPSDataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.type)
}

// optional int64 time = 2;
inline void hgGPSData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 hgGPSData::time() const {
  // @@protoc_insertion_point(field_get:hgGPSData.time)
  return time_;
}
inline void hgGPSData::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.time)
}

// optional double lat = 3;
inline void hgGPSData::clear_lat() {
  lat_ = 0;
}
inline double hgGPSData::lat() const {
  // @@protoc_insertion_point(field_get:hgGPSData.lat)
  return lat_;
}
inline void hgGPSData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.lat)
}

// optional double lon = 4;
inline void hgGPSData::clear_lon() {
  lon_ = 0;
}
inline double hgGPSData::lon() const {
  // @@protoc_insertion_point(field_get:hgGPSData.lon)
  return lon_;
}
inline void hgGPSData::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.lon)
}

// optional bool state = 5;
inline void hgGPSData::clear_state() {
  state_ = false;
}
inline bool hgGPSData::state() const {
  // @@protoc_insertion_point(field_get:hgGPSData.state)
  return state_;
}
inline void hgGPSData::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.state)
}

// optional double speed = 6;
inline void hgGPSData::clear_speed() {
  speed_ = 0;
}
inline double hgGPSData::speed() const {
  // @@protoc_insertion_point(field_get:hgGPSData.speed)
  return speed_;
}
inline void hgGPSData::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.speed)
}

// optional double course = 7;
inline void hgGPSData::clear_course() {
  course_ = 0;
}
inline double hgGPSData::course() const {
  // @@protoc_insertion_point(field_get:hgGPSData.course)
  return course_;
}
inline void hgGPSData::set_course(double value) {
  
  course_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.course)
}

// optional double hdg = 8;
inline void hgGPSData::clear_hdg() {
  hdg_ = 0;
}
inline double hgGPSData::hdg() const {
  // @@protoc_insertion_point(field_get:hgGPSData.hdg)
  return hdg_;
}
inline void hgGPSData::set_hdg(double value) {
  
  hdg_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.hdg)
}

// optional string mmsi = 9;
inline void hgGPSData::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgGPSData::mmsi() const {
  // @@protoc_insertion_point(field_get:hgGPSData.mmsi)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgGPSData::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgGPSData.mmsi)
}
inline void hgGPSData::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgGPSData.mmsi)
}
inline void hgGPSData::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgGPSData.mmsi)
}
inline ::std::string* hgGPSData::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgGPSData.mmsi)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgGPSData::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgGPSData.mmsi)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgGPSData::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgGPSData.mmsi)
}

inline const hgGPSData* hgGPSData::internal_default_instance() {
  return &hgGPSData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hgGPSDataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hgGPSDataType>() {
  return ::hgGPSDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgGPSData_2eproto__INCLUDED
