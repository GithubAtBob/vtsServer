// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notes.proto

#ifndef PROTOBUF_notes_2eproto__INCLUDED
#define PROTOBUF_notes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_notes_2eproto();
void protobuf_InitDefaults_notes_2eproto();
void protobuf_AssignDesc_notes_2eproto();
void protobuf_ShutdownFile_notes_2eproto();

class NotesRepsone;
class NotesRequest;

// ===================================================================

class NotesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NotesRequest) */ {
 public:
  NotesRequest();
  virtual ~NotesRequest();

  NotesRequest(const NotesRequest& from);

  inline NotesRequest& operator=(const NotesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotesRequest& default_instance();

  static const NotesRequest* internal_default_instance();

  void Swap(NotesRequest* other);

  // implements Message ----------------------------------------------

  inline NotesRequest* New() const { return New(NULL); }

  NotesRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotesRequest& from);
  void MergeFrom(const NotesRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotesRequest* other);
  void UnsafeMergeFrom(const NotesRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double lat = 4;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  double lat() const;
  void set_lat(double value);

  // optional double lon = 5;
  void clear_lon();
  static const int kLonFieldNumber = 5;
  double lon() const;
  void set_lon(double value);

  // optional string notes = 6;
  void clear_notes();
  static const int kNotesFieldNumber = 6;
  const ::std::string& notes() const;
  void set_notes(const ::std::string& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  ::std::string* mutable_notes();
  ::std::string* release_notes();
  void set_allocated_notes(::std::string* notes);

  // optional string color = 7;
  void clear_color();
  static const int kColorFieldNumber = 7;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional string drawman = 8;
  void clear_drawman();
  static const int kDrawmanFieldNumber = 8;
  const ::std::string& drawman() const;
  void set_drawman(const ::std::string& value);
  void set_drawman(const char* value);
  void set_drawman(const char* value, size_t size);
  ::std::string* mutable_drawman();
  ::std::string* release_drawman();
  void set_allocated_drawman(::std::string* drawman);

  // optional bool isshare = 9;
  void clear_isshare();
  static const int kIsshareFieldNumber = 9;
  bool isshare() const;
  void set_isshare(bool value);

  // @@protoc_insertion_point(class_scope:NotesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr notes_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr drawman_;
  double lat_;
  double lon_;
  ::google::protobuf::int32 type_;
  bool isshare_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NotesRequest> NotesRequest_default_instance_;

// -------------------------------------------------------------------

class NotesRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NotesRepsone) */ {
 public:
  NotesRepsone();
  virtual ~NotesRepsone();

  NotesRepsone(const NotesRepsone& from);

  inline NotesRepsone& operator=(const NotesRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotesRepsone& default_instance();

  static const NotesRepsone* internal_default_instance();

  void Swap(NotesRepsone* other);

  // implements Message ----------------------------------------------

  inline NotesRepsone* New() const { return New(NULL); }

  NotesRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotesRepsone& from);
  void MergeFrom(const NotesRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotesRepsone* other);
  void UnsafeMergeFrom(const NotesRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // repeated .NotesRequest Notess = 3;
  int notess_size() const;
  void clear_notess();
  static const int kNotessFieldNumber = 3;
  const ::NotesRequest& notess(int index) const;
  ::NotesRequest* mutable_notess(int index);
  ::NotesRequest* add_notess();
  ::google::protobuf::RepeatedPtrField< ::NotesRequest >*
      mutable_notess();
  const ::google::protobuf::RepeatedPtrField< ::NotesRequest >&
      notess() const;

  // @@protoc_insertion_point(class_scope:NotesRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NotesRequest > notess_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_notes_2eproto_impl();
  friend void  protobuf_AddDesc_notes_2eproto_impl();
  friend void protobuf_AssignDesc_notes_2eproto();
  friend void protobuf_ShutdownFile_notes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NotesRepsone> NotesRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NotesRequest

// optional int32 type = 1;
inline void NotesRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 NotesRequest::type() const {
  // @@protoc_insertion_point(field_get:NotesRequest.type)
  return type_;
}
inline void NotesRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.type)
}

// optional string ID = 2;
inline void NotesRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotesRequest::id() const {
  // @@protoc_insertion_point(field_get:NotesRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.ID)
}
inline void NotesRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.ID)
}
inline void NotesRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.ID)
}
inline ::std::string* NotesRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotesRequest::release_id() {
  // @@protoc_insertion_point(field_release:NotesRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.ID)
}

// optional string name = 3;
inline void NotesRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotesRequest::name() const {
  // @@protoc_insertion_point(field_get:NotesRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.name)
}
inline void NotesRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.name)
}
inline void NotesRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.name)
}
inline ::std::string* NotesRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotesRequest::release_name() {
  // @@protoc_insertion_point(field_release:NotesRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.name)
}

// optional double lat = 4;
inline void NotesRequest::clear_lat() {
  lat_ = 0;
}
inline double NotesRequest::lat() const {
  // @@protoc_insertion_point(field_get:NotesRequest.lat)
  return lat_;
}
inline void NotesRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.lat)
}

// optional double lon = 5;
inline void NotesRequest::clear_lon() {
  lon_ = 0;
}
inline double NotesRequest::lon() const {
  // @@protoc_insertion_point(field_get:NotesRequest.lon)
  return lon_;
}
inline void NotesRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.lon)
}

// optional string notes = 6;
inline void NotesRequest::clear_notes() {
  notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotesRequest::notes() const {
  // @@protoc_insertion_point(field_get:NotesRequest.notes)
  return notes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_notes(const ::std::string& value) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.notes)
}
inline void NotesRequest::set_notes(const char* value) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.notes)
}
inline void NotesRequest::set_notes(const char* value, size_t size) {
  
  notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.notes)
}
inline ::std::string* NotesRequest::mutable_notes() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.notes)
  return notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotesRequest::release_notes() {
  // @@protoc_insertion_point(field_release:NotesRequest.notes)
  
  return notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_allocated_notes(::std::string* notes) {
  if (notes != NULL) {
    
  } else {
    
  }
  notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notes);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.notes)
}

// optional string color = 7;
inline void NotesRequest::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotesRequest::color() const {
  // @@protoc_insertion_point(field_get:NotesRequest.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.color)
}
inline void NotesRequest::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.color)
}
inline void NotesRequest::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.color)
}
inline ::std::string* NotesRequest::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotesRequest::release_color() {
  // @@protoc_insertion_point(field_release:NotesRequest.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.color)
}

// optional string drawman = 8;
inline void NotesRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotesRequest::drawman() const {
  // @@protoc_insertion_point(field_get:NotesRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRequest.drawman)
}
inline void NotesRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRequest.drawman)
}
inline void NotesRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRequest.drawman)
}
inline ::std::string* NotesRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:NotesRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotesRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:NotesRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:NotesRequest.drawman)
}

// optional bool isshare = 9;
inline void NotesRequest::clear_isshare() {
  isshare_ = false;
}
inline bool NotesRequest::isshare() const {
  // @@protoc_insertion_point(field_get:NotesRequest.isshare)
  return isshare_;
}
inline void NotesRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:NotesRequest.isshare)
}

inline const NotesRequest* NotesRequest::internal_default_instance() {
  return &NotesRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// NotesRepsone

// optional int32 type = 1;
inline void NotesRepsone::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 NotesRepsone::type() const {
  // @@protoc_insertion_point(field_get:NotesRepsone.type)
  return type_;
}
inline void NotesRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NotesRepsone.type)
}

// optional string result = 2;
inline void NotesRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotesRepsone::result() const {
  // @@protoc_insertion_point(field_get:NotesRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NotesRepsone.result)
}
inline void NotesRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NotesRepsone.result)
}
inline void NotesRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NotesRepsone.result)
}
inline ::std::string* NotesRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:NotesRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotesRepsone::release_result() {
  // @@protoc_insertion_point(field_release:NotesRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotesRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:NotesRepsone.result)
}

// repeated .NotesRequest Notess = 3;
inline int NotesRepsone::notess_size() const {
  return notess_.size();
}
inline void NotesRepsone::clear_notess() {
  notess_.Clear();
}
inline const ::NotesRequest& NotesRepsone::notess(int index) const {
  // @@protoc_insertion_point(field_get:NotesRepsone.Notess)
  return notess_.Get(index);
}
inline ::NotesRequest* NotesRepsone::mutable_notess(int index) {
  // @@protoc_insertion_point(field_mutable:NotesRepsone.Notess)
  return notess_.Mutable(index);
}
inline ::NotesRequest* NotesRepsone::add_notess() {
  // @@protoc_insertion_point(field_add:NotesRepsone.Notess)
  return notess_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::NotesRequest >*
NotesRepsone::mutable_notess() {
  // @@protoc_insertion_point(field_mutable_list:NotesRepsone.Notess)
  return &notess_;
}
inline const ::google::protobuf::RepeatedPtrField< ::NotesRequest >&
NotesRepsone::notess() const {
  // @@protoc_insertion_point(field_list:NotesRepsone.Notess)
  return notess_;
}

inline const NotesRepsone* NotesRepsone::internal_default_instance() {
  return &NotesRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_notes_2eproto__INCLUDED
