// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgSpeedWatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgSpeedWatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgSpeedWatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgSpeedWatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgSpeedWatchRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgSpeedWatchRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgSpeedWatch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgSpeedWatch_2eproto() {
  protobuf_AddDesc_hgSpeedWatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgSpeedWatch.proto");
  GOOGLE_CHECK(file != NULL);
  hgSpeedWatch_descriptor_ = file->message_type(0);
  static const int hgSpeedWatch_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatch, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatch, speedwatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatch, minspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatch, minduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatch, maxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatch, maxduration_),
  };
  hgSpeedWatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgSpeedWatch_descriptor_,
      hgSpeedWatch::internal_default_instance(),
      hgSpeedWatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgSpeedWatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatch, _internal_metadata_));
  hgSpeedWatchRepsone_descriptor_ = file->message_type(1);
  static const int hgSpeedWatchRepsone_offsets_[1] = {
  };
  hgSpeedWatchRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgSpeedWatchRepsone_descriptor_,
      hgSpeedWatchRepsone::internal_default_instance(),
      hgSpeedWatchRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgSpeedWatchRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSpeedWatchRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgSpeedWatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgSpeedWatch_descriptor_, hgSpeedWatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgSpeedWatchRepsone_descriptor_, hgSpeedWatchRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgSpeedWatch_2eproto() {
  hgSpeedWatch_default_instance_.Shutdown();
  delete hgSpeedWatch_reflection_;
  hgSpeedWatchRepsone_default_instance_.Shutdown();
  delete hgSpeedWatchRepsone_reflection_;
}

void protobuf_InitDefaults_hgSpeedWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgSpeedWatch_default_instance_.DefaultConstruct();
  hgSpeedWatchRepsone_default_instance_.DefaultConstruct();
  hgSpeedWatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgSpeedWatchRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgSpeedWatch_2eproto_once_);
void protobuf_InitDefaults_hgSpeedWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgSpeedWatch_2eproto_once_,
                 &protobuf_InitDefaults_hgSpeedWatch_2eproto_impl);
}
void protobuf_AddDesc_hgSpeedWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgSpeedWatch_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022hgSpeedWatch.proto\"~\n\014hgSpeedWatch\022\014\n\004"
    "MMSI\030\001 \001(\t\022\022\n\nSpeedWatch\030\002 \001(\010\022\020\n\010MinSpe"
    "ed\030\003 \001(\001\022\023\n\013MinDuration\030\004 \001(\001\022\020\n\010MaxSpee"
    "d\030\005 \001(\001\022\023\n\013MaxDuration\030\006 \001(\001\"\025\n\023hgSpeedW"
    "atchRepsoneb\006proto3", 179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgSpeedWatch.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgSpeedWatch_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgSpeedWatch_2eproto_once_);
void protobuf_AddDesc_hgSpeedWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgSpeedWatch_2eproto_once_,
                 &protobuf_AddDesc_hgSpeedWatch_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgSpeedWatch_2eproto {
  StaticDescriptorInitializer_hgSpeedWatch_2eproto() {
    protobuf_AddDesc_hgSpeedWatch_2eproto();
  }
} static_descriptor_initializer_hgSpeedWatch_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgSpeedWatch::kMMSIFieldNumber;
const int hgSpeedWatch::kSpeedWatchFieldNumber;
const int hgSpeedWatch::kMinSpeedFieldNumber;
const int hgSpeedWatch::kMinDurationFieldNumber;
const int hgSpeedWatch::kMaxSpeedFieldNumber;
const int hgSpeedWatch::kMaxDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgSpeedWatch::hgSpeedWatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgSpeedWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgSpeedWatch)
}

void hgSpeedWatch::InitAsDefaultInstance() {
}

hgSpeedWatch::hgSpeedWatch(const hgSpeedWatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgSpeedWatch)
}

void hgSpeedWatch::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&minspeed_, 0, reinterpret_cast<char*>(&speedwatch_) -
    reinterpret_cast<char*>(&minspeed_) + sizeof(speedwatch_));
  _cached_size_ = 0;
}

hgSpeedWatch::~hgSpeedWatch() {
  // @@protoc_insertion_point(destructor:hgSpeedWatch)
  SharedDtor();
}

void hgSpeedWatch::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgSpeedWatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgSpeedWatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgSpeedWatch_descriptor_;
}

const hgSpeedWatch& hgSpeedWatch::default_instance() {
  protobuf_InitDefaults_hgSpeedWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgSpeedWatch> hgSpeedWatch_default_instance_;

hgSpeedWatch* hgSpeedWatch::New(::google::protobuf::Arena* arena) const {
  hgSpeedWatch* n = new hgSpeedWatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgSpeedWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:hgSpeedWatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgSpeedWatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgSpeedWatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(minspeed_, speedwatch_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgSpeedWatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgSpeedWatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgSpeedWatch.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SpeedWatch;
        break;
      }

      // optional bool SpeedWatch = 2;
      case 2: {
        if (tag == 16) {
         parse_SpeedWatch:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &speedwatch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_MinSpeed;
        break;
      }

      // optional double MinSpeed = 3;
      case 3: {
        if (tag == 25) {
         parse_MinSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_MinDuration;
        break;
      }

      // optional double MinDuration = 4;
      case 4: {
        if (tag == 33) {
         parse_MinDuration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minduration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_MaxSpeed;
        break;
      }

      // optional double MaxSpeed = 5;
      case 5: {
        if (tag == 41) {
         parse_MaxSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_MaxDuration;
        break;
      }

      // optional double MaxDuration = 6;
      case 6: {
        if (tag == 49) {
         parse_MaxDuration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxduration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgSpeedWatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgSpeedWatch)
  return false;
#undef DO_
}

void hgSpeedWatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgSpeedWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgSpeedWatch.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool SpeedWatch = 2;
  if (this->speedwatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->speedwatch(), output);
  }

  // optional double MinSpeed = 3;
  if (this->minspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minspeed(), output);
  }

  // optional double MinDuration = 4;
  if (this->minduration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->minduration(), output);
  }

  // optional double MaxSpeed = 5;
  if (this->maxspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maxspeed(), output);
  }

  // optional double MaxDuration = 6;
  if (this->maxduration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->maxduration(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgSpeedWatch)
}

::google::protobuf::uint8* hgSpeedWatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgSpeedWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgSpeedWatch.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool SpeedWatch = 2;
  if (this->speedwatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->speedwatch(), target);
  }

  // optional double MinSpeed = 3;
  if (this->minspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minspeed(), target);
  }

  // optional double MinDuration = 4;
  if (this->minduration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->minduration(), target);
  }

  // optional double MaxSpeed = 5;
  if (this->maxspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maxspeed(), target);
  }

  // optional double MaxDuration = 6;
  if (this->maxduration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->maxduration(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgSpeedWatch)
  return target;
}

size_t hgSpeedWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgSpeedWatch)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool SpeedWatch = 2;
  if (this->speedwatch() != 0) {
    total_size += 1 + 1;
  }

  // optional double MinSpeed = 3;
  if (this->minspeed() != 0) {
    total_size += 1 + 8;
  }

  // optional double MinDuration = 4;
  if (this->minduration() != 0) {
    total_size += 1 + 8;
  }

  // optional double MaxSpeed = 5;
  if (this->maxspeed() != 0) {
    total_size += 1 + 8;
  }

  // optional double MaxDuration = 6;
  if (this->maxduration() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgSpeedWatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgSpeedWatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgSpeedWatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgSpeedWatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgSpeedWatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgSpeedWatch)
    UnsafeMergeFrom(*source);
  }
}

void hgSpeedWatch::MergeFrom(const hgSpeedWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgSpeedWatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgSpeedWatch::UnsafeMergeFrom(const hgSpeedWatch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.speedwatch() != 0) {
    set_speedwatch(from.speedwatch());
  }
  if (from.minspeed() != 0) {
    set_minspeed(from.minspeed());
  }
  if (from.minduration() != 0) {
    set_minduration(from.minduration());
  }
  if (from.maxspeed() != 0) {
    set_maxspeed(from.maxspeed());
  }
  if (from.maxduration() != 0) {
    set_maxduration(from.maxduration());
  }
}

void hgSpeedWatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgSpeedWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgSpeedWatch::CopyFrom(const hgSpeedWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgSpeedWatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgSpeedWatch::IsInitialized() const {

  return true;
}

void hgSpeedWatch::Swap(hgSpeedWatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgSpeedWatch::InternalSwap(hgSpeedWatch* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(speedwatch_, other->speedwatch_);
  std::swap(minspeed_, other->minspeed_);
  std::swap(minduration_, other->minduration_);
  std::swap(maxspeed_, other->maxspeed_);
  std::swap(maxduration_, other->maxduration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgSpeedWatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgSpeedWatch_descriptor_;
  metadata.reflection = hgSpeedWatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgSpeedWatch

// optional string MMSI = 1;
void hgSpeedWatch::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgSpeedWatch::mmsi() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgSpeedWatch::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MMSI)
}
void hgSpeedWatch::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgSpeedWatch.MMSI)
}
void hgSpeedWatch::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgSpeedWatch.MMSI)
}
::std::string* hgSpeedWatch::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgSpeedWatch.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgSpeedWatch::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgSpeedWatch.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgSpeedWatch::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgSpeedWatch.MMSI)
}

// optional bool SpeedWatch = 2;
void hgSpeedWatch::clear_speedwatch() {
  speedwatch_ = false;
}
bool hgSpeedWatch::speedwatch() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.SpeedWatch)
  return speedwatch_;
}
void hgSpeedWatch::set_speedwatch(bool value) {
  
  speedwatch_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.SpeedWatch)
}

// optional double MinSpeed = 3;
void hgSpeedWatch::clear_minspeed() {
  minspeed_ = 0;
}
double hgSpeedWatch::minspeed() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MinSpeed)
  return minspeed_;
}
void hgSpeedWatch::set_minspeed(double value) {
  
  minspeed_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MinSpeed)
}

// optional double MinDuration = 4;
void hgSpeedWatch::clear_minduration() {
  minduration_ = 0;
}
double hgSpeedWatch::minduration() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MinDuration)
  return minduration_;
}
void hgSpeedWatch::set_minduration(double value) {
  
  minduration_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MinDuration)
}

// optional double MaxSpeed = 5;
void hgSpeedWatch::clear_maxspeed() {
  maxspeed_ = 0;
}
double hgSpeedWatch::maxspeed() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MaxSpeed)
  return maxspeed_;
}
void hgSpeedWatch::set_maxspeed(double value) {
  
  maxspeed_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MaxSpeed)
}

// optional double MaxDuration = 6;
void hgSpeedWatch::clear_maxduration() {
  maxduration_ = 0;
}
double hgSpeedWatch::maxduration() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MaxDuration)
  return maxduration_;
}
void hgSpeedWatch::set_maxduration(double value) {
  
  maxduration_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MaxDuration)
}

inline const hgSpeedWatch* hgSpeedWatch::internal_default_instance() {
  return &hgSpeedWatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgSpeedWatchRepsone::hgSpeedWatchRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgSpeedWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgSpeedWatchRepsone)
}

void hgSpeedWatchRepsone::InitAsDefaultInstance() {
}

hgSpeedWatchRepsone::hgSpeedWatchRepsone(const hgSpeedWatchRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgSpeedWatchRepsone)
}

void hgSpeedWatchRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgSpeedWatchRepsone::~hgSpeedWatchRepsone() {
  // @@protoc_insertion_point(destructor:hgSpeedWatchRepsone)
  SharedDtor();
}

void hgSpeedWatchRepsone::SharedDtor() {
}

void hgSpeedWatchRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgSpeedWatchRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgSpeedWatchRepsone_descriptor_;
}

const hgSpeedWatchRepsone& hgSpeedWatchRepsone::default_instance() {
  protobuf_InitDefaults_hgSpeedWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgSpeedWatchRepsone> hgSpeedWatchRepsone_default_instance_;

hgSpeedWatchRepsone* hgSpeedWatchRepsone::New(::google::protobuf::Arena* arena) const {
  hgSpeedWatchRepsone* n = new hgSpeedWatchRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgSpeedWatchRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgSpeedWatchRepsone)
}

bool hgSpeedWatchRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgSpeedWatchRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgSpeedWatchRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgSpeedWatchRepsone)
  return false;
#undef DO_
}

void hgSpeedWatchRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgSpeedWatchRepsone)
  // @@protoc_insertion_point(serialize_end:hgSpeedWatchRepsone)
}

::google::protobuf::uint8* hgSpeedWatchRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgSpeedWatchRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgSpeedWatchRepsone)
  return target;
}

size_t hgSpeedWatchRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgSpeedWatchRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgSpeedWatchRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgSpeedWatchRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgSpeedWatchRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgSpeedWatchRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgSpeedWatchRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgSpeedWatchRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgSpeedWatchRepsone::MergeFrom(const hgSpeedWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgSpeedWatchRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgSpeedWatchRepsone::UnsafeMergeFrom(const hgSpeedWatchRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgSpeedWatchRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgSpeedWatchRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgSpeedWatchRepsone::CopyFrom(const hgSpeedWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgSpeedWatchRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgSpeedWatchRepsone::IsInitialized() const {

  return true;
}

void hgSpeedWatchRepsone::Swap(hgSpeedWatchRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgSpeedWatchRepsone::InternalSwap(hgSpeedWatchRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgSpeedWatchRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgSpeedWatchRepsone_descriptor_;
  metadata.reflection = hgSpeedWatchRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgSpeedWatchRepsone

inline const hgSpeedWatchRepsone* hgSpeedWatchRepsone::internal_default_instance() {
  return &hgSpeedWatchRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
