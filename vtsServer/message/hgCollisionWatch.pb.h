// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgCollisionWatch.proto

#ifndef PROTOBUF_hgCollisionWatch_2eproto__INCLUDED
#define PROTOBUF_hgCollisionWatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgCollisionWatch_2eproto();
void protobuf_InitDefaults_hgCollisionWatch_2eproto();
void protobuf_AssignDesc_hgCollisionWatch_2eproto();
void protobuf_ShutdownFile_hgCollisionWatch_2eproto();

class hgCollisionWatch;
class hgCollisionWatchRepsone;

enum hgCollisionCPAType {
  Custom = 0,
  DayDefault = 1,
  DayShipType = 2,
  NightDefault = 3,
  NightShipType = 4,
  CPArecord = 5,
  hgCollisionCPAType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  hgCollisionCPAType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool hgCollisionCPAType_IsValid(int value);
const hgCollisionCPAType hgCollisionCPAType_MIN = Custom;
const hgCollisionCPAType hgCollisionCPAType_MAX = CPArecord;
const int hgCollisionCPAType_ARRAYSIZE = hgCollisionCPAType_MAX + 1;

const ::google::protobuf::EnumDescriptor* hgCollisionCPAType_descriptor();
inline const ::std::string& hgCollisionCPAType_Name(hgCollisionCPAType value) {
  return ::google::protobuf::internal::NameOfEnum(
    hgCollisionCPAType_descriptor(), value);
}
inline bool hgCollisionCPAType_Parse(
    const ::std::string& name, hgCollisionCPAType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hgCollisionCPAType>(
    hgCollisionCPAType_descriptor(), name, value);
}
// ===================================================================

class hgCollisionWatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgCollisionWatch) */ {
 public:
  hgCollisionWatch();
  virtual ~hgCollisionWatch();

  hgCollisionWatch(const hgCollisionWatch& from);

  inline hgCollisionWatch& operator=(const hgCollisionWatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgCollisionWatch& default_instance();

  static const hgCollisionWatch* internal_default_instance();

  void Swap(hgCollisionWatch* other);

  // implements Message ----------------------------------------------

  inline hgCollisionWatch* New() const { return New(NULL); }

  hgCollisionWatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgCollisionWatch& from);
  void MergeFrom(const hgCollisionWatch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgCollisionWatch* other);
  void UnsafeMergeFrom(const hgCollisionWatch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MMSI = 1;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 1;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional bool CollisionWatch = 2;
  void clear_collisionwatch();
  static const int kCollisionWatchFieldNumber = 2;
  bool collisionwatch() const;
  void set_collisionwatch(bool value);

  // optional double DCPA = 3;
  void clear_dcpa();
  static const int kDCPAFieldNumber = 3;
  double dcpa() const;
  void set_dcpa(double value);

  // optional double TCPA = 4;
  void clear_tcpa();
  static const int kTCPAFieldNumber = 4;
  double tcpa() const;
  void set_tcpa(double value);

  // optional int32 Type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int32 GetCPA = 6;
  void clear_getcpa();
  static const int kGetCPAFieldNumber = 6;
  ::google::protobuf::int32 getcpa() const;
  void set_getcpa(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hgCollisionWatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  double dcpa_;
  bool collisionwatch_;
  ::google::protobuf::int32 type_;
  double tcpa_;
  ::google::protobuf::int32 getcpa_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgCollisionWatch_2eproto_impl();
  friend void  protobuf_AddDesc_hgCollisionWatch_2eproto_impl();
  friend void protobuf_AssignDesc_hgCollisionWatch_2eproto();
  friend void protobuf_ShutdownFile_hgCollisionWatch_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgCollisionWatch> hgCollisionWatch_default_instance_;

// -------------------------------------------------------------------

class hgCollisionWatchRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgCollisionWatchRepsone) */ {
 public:
  hgCollisionWatchRepsone();
  virtual ~hgCollisionWatchRepsone();

  hgCollisionWatchRepsone(const hgCollisionWatchRepsone& from);

  inline hgCollisionWatchRepsone& operator=(const hgCollisionWatchRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgCollisionWatchRepsone& default_instance();

  static const hgCollisionWatchRepsone* internal_default_instance();

  void Swap(hgCollisionWatchRepsone* other);

  // implements Message ----------------------------------------------

  inline hgCollisionWatchRepsone* New() const { return New(NULL); }

  hgCollisionWatchRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgCollisionWatchRepsone& from);
  void MergeFrom(const hgCollisionWatchRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgCollisionWatchRepsone* other);
  void UnsafeMergeFrom(const hgCollisionWatchRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hgCollisionWatchRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgCollisionWatch_2eproto_impl();
  friend void  protobuf_AddDesc_hgCollisionWatch_2eproto_impl();
  friend void protobuf_AssignDesc_hgCollisionWatch_2eproto();
  friend void protobuf_ShutdownFile_hgCollisionWatch_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgCollisionWatchRepsone> hgCollisionWatchRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCollisionWatch

// optional string MMSI = 1;
inline void hgCollisionWatch::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCollisionWatch::mmsi() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCollisionWatch::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCollisionWatch.MMSI)
}
inline void hgCollisionWatch::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCollisionWatch.MMSI)
}
inline void hgCollisionWatch::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCollisionWatch.MMSI)
}
inline ::std::string* hgCollisionWatch::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCollisionWatch.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCollisionWatch::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgCollisionWatch.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCollisionWatch::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCollisionWatch.MMSI)
}

// optional bool CollisionWatch = 2;
inline void hgCollisionWatch::clear_collisionwatch() {
  collisionwatch_ = false;
}
inline bool hgCollisionWatch::collisionwatch() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.CollisionWatch)
  return collisionwatch_;
}
inline void hgCollisionWatch::set_collisionwatch(bool value) {
  
  collisionwatch_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.CollisionWatch)
}

// optional double DCPA = 3;
inline void hgCollisionWatch::clear_dcpa() {
  dcpa_ = 0;
}
inline double hgCollisionWatch::dcpa() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.DCPA)
  return dcpa_;
}
inline void hgCollisionWatch::set_dcpa(double value) {
  
  dcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.DCPA)
}

// optional double TCPA = 4;
inline void hgCollisionWatch::clear_tcpa() {
  tcpa_ = 0;
}
inline double hgCollisionWatch::tcpa() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.TCPA)
  return tcpa_;
}
inline void hgCollisionWatch::set_tcpa(double value) {
  
  tcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.TCPA)
}

// optional int32 Type = 5;
inline void hgCollisionWatch::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 hgCollisionWatch::type() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.Type)
  return type_;
}
inline void hgCollisionWatch::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.Type)
}

// optional int32 GetCPA = 6;
inline void hgCollisionWatch::clear_getcpa() {
  getcpa_ = 0;
}
inline ::google::protobuf::int32 hgCollisionWatch::getcpa() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.GetCPA)
  return getcpa_;
}
inline void hgCollisionWatch::set_getcpa(::google::protobuf::int32 value) {
  
  getcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.GetCPA)
}

inline const hgCollisionWatch* hgCollisionWatch::internal_default_instance() {
  return &hgCollisionWatch_default_instance_.get();
}
// -------------------------------------------------------------------

// hgCollisionWatchRepsone

inline const hgCollisionWatchRepsone* hgCollisionWatchRepsone::internal_default_instance() {
  return &hgCollisionWatchRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hgCollisionCPAType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hgCollisionCPAType>() {
  return ::hgCollisionCPAType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgCollisionWatch_2eproto__INCLUDED
