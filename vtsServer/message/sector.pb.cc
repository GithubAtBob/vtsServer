// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sector.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sector.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SectorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectorRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectorRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sector_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sector_2eproto() {
  protobuf_AddDesc_sector_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sector.proto");
  GOOGLE_CHECK(file != NULL);
  SectorRequest_descriptor_ = file->message_type(0);
  static const int SectorRequest_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, beginangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, endangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, linestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, fullstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, linewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, waringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, waringtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, drawman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, isshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, fullcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, info_),
  };
  SectorRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SectorRequest_descriptor_,
      SectorRequest::internal_default_instance(),
      SectorRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SectorRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRequest, _internal_metadata_));
  SectorRepsone_descriptor_ = file->message_type(1);
  static const int SectorRepsone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRepsone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRepsone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRepsone, sectors_),
  };
  SectorRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SectorRepsone_descriptor_,
      SectorRepsone::internal_default_instance(),
      SectorRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(SectorRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sector_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SectorRequest_descriptor_, SectorRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SectorRepsone_descriptor_, SectorRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sector_2eproto() {
  SectorRequest_default_instance_.Shutdown();
  delete SectorRequest_reflection_;
  SectorRepsone_default_instance_.Shutdown();
  delete SectorRepsone_reflection_;
}

void protobuf_InitDefaults_sector_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_waringinfo_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  SectorRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SectorRepsone_default_instance_.DefaultConstruct();
  SectorRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  SectorRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_sector_2eproto_once_);
void protobuf_InitDefaults_sector_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_sector_2eproto_once_,
                 &protobuf_InitDefaults_sector_2eproto_impl);
}
void protobuf_AddDesc_sector_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_sector_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014sector.proto\032\020waringinfo.proto\"\311\002\n\rSec"
    "torRequest\022\014\n\004type\030\001 \001(\005\022\n\n\002ID\030\002 \001(\t\022\014\n\004"
    "name\030\003 \001(\t\022\013\n\003lat\030\004 \001(\001\022\013\n\003lon\030\005 \001(\001\022\016\n\006"
    "radius\030\006 \001(\001\022\022\n\nbeginangle\030\007 \001(\001\022\020\n\010enda"
    "ngle\030\010 \001(\001\022\021\n\tlinestyle\030\t \001(\005\022\021\n\tfullsty"
    "le\030\n \001(\005\022\021\n\tlinewidth\030\013 \001(\005\022\020\n\010waringID\030"
    "\014 \003(\t\022\022\n\nwaringtype\030\r \001(\t\022\017\n\007drawman\030\016 \001"
    "(\t\022\017\n\007isshare\030\017 \001(\010\022\021\n\tlinecolor\030\020 \001(\t\022\021"
    "\n\tfullcolor\030\021 \001(\t\022\031\n\004info\030\022 \003(\0132\013.Waring"
    "Info\"N\n\rSectorRepsone\022\014\n\004type\030\001 \001(\005\022\016\n\006r"
    "esult\030\002 \001(\t\022\037\n\007sectors\030\003 \003(\0132\016.SectorReq"
    "uestb\006proto3", 452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sector.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_waringinfo_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sector_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sector_2eproto_once_);
void protobuf_AddDesc_sector_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sector_2eproto_once_,
                 &protobuf_AddDesc_sector_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sector_2eproto {
  StaticDescriptorInitializer_sector_2eproto() {
    protobuf_AddDesc_sector_2eproto();
  }
} static_descriptor_initializer_sector_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SectorRequest::kTypeFieldNumber;
const int SectorRequest::kIDFieldNumber;
const int SectorRequest::kNameFieldNumber;
const int SectorRequest::kLatFieldNumber;
const int SectorRequest::kLonFieldNumber;
const int SectorRequest::kRadiusFieldNumber;
const int SectorRequest::kBeginangleFieldNumber;
const int SectorRequest::kEndangleFieldNumber;
const int SectorRequest::kLinestyleFieldNumber;
const int SectorRequest::kFullstyleFieldNumber;
const int SectorRequest::kLinewidthFieldNumber;
const int SectorRequest::kWaringIDFieldNumber;
const int SectorRequest::kWaringtypeFieldNumber;
const int SectorRequest::kDrawmanFieldNumber;
const int SectorRequest::kIsshareFieldNumber;
const int SectorRequest::kLinecolorFieldNumber;
const int SectorRequest::kFullcolorFieldNumber;
const int SectorRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SectorRequest::SectorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sector_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SectorRequest)
}

void SectorRequest::InitAsDefaultInstance() {
}

SectorRequest::SectorRequest(const SectorRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SectorRequest)
}

void SectorRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&isshare_) -
    reinterpret_cast<char*>(&lat_) + sizeof(isshare_));
  _cached_size_ = 0;
}

SectorRequest::~SectorRequest() {
  // @@protoc_insertion_point(destructor:SectorRequest)
  SharedDtor();
}

void SectorRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SectorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectorRequest_descriptor_;
}

const SectorRequest& SectorRequest::default_instance() {
  protobuf_InitDefaults_sector_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SectorRequest> SectorRequest_default_instance_;

SectorRequest* SectorRequest::New(::google::protobuf::Arena* arena) const {
  SectorRequest* n = new SectorRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SectorRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SectorRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SectorRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, type_);
  ZR_(radius_, endangle_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(fullstyle_, isshare_);
  linestyle_ = 0;
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  waringid_.Clear();
  info_.Clear();
}

bool SectorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SectorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (tag == 18) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRequest.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lat;
        break;
      }

      // optional double lat = 4;
      case 4: {
        if (tag == 33) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lon;
        break;
      }

      // optional double lon = 5;
      case 5: {
        if (tag == 41) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_radius;
        break;
      }

      // optional double radius = 6;
      case 6: {
        if (tag == 49) {
         parse_radius:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_beginangle;
        break;
      }

      // optional double beginangle = 7;
      case 7: {
        if (tag == 57) {
         parse_beginangle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beginangle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_endangle;
        break;
      }

      // optional double endangle = 8;
      case 8: {
        if (tag == 65) {
         parse_endangle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endangle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_linestyle;
        break;
      }

      // optional int32 linestyle = 9;
      case 9: {
        if (tag == 72) {
         parse_linestyle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linestyle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_fullstyle;
        break;
      }

      // optional int32 fullstyle = 10;
      case 10: {
        if (tag == 80) {
         parse_fullstyle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullstyle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_linewidth;
        break;
      }

      // optional int32 linewidth = 11;
      case 11: {
        if (tag == 88) {
         parse_linewidth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linewidth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_waringID;
        break;
      }

      // repeated string waringID = 12;
      case 12: {
        if (tag == 98) {
         parse_waringID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_waringid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->waringid(this->waringid_size() - 1).data(),
            this->waringid(this->waringid_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRequest.waringID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_waringID;
        if (input->ExpectTag(106)) goto parse_waringtype;
        break;
      }

      // optional string waringtype = 13;
      case 13: {
        if (tag == 106) {
         parse_waringtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waringtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->waringtype().data(), this->waringtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRequest.waringtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_drawman;
        break;
      }

      // optional string drawman = 14;
      case 14: {
        if (tag == 114) {
         parse_drawman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawman()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drawman().data(), this->drawman().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRequest.drawman"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_isshare;
        break;
      }

      // optional bool isshare = 15;
      case 15: {
        if (tag == 120) {
         parse_isshare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_linecolor;
        break;
      }

      // optional string linecolor = 16;
      case 16: {
        if (tag == 130) {
         parse_linecolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linecolor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linecolor().data(), this->linecolor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRequest.linecolor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_fullcolor;
        break;
      }

      // optional string fullcolor = 17;
      case 17: {
        if (tag == 138) {
         parse_fullcolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullcolor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fullcolor().data(), this->fullcolor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRequest.fullcolor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_info;
        break;
      }

      // repeated .WaringInfo info = 18;
      case 18: {
        if (tag == 146) {
         parse_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SectorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SectorRequest)
  return false;
#undef DO_
}

void SectorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SectorRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // optional double radius = 6;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->radius(), output);
  }

  // optional double beginangle = 7;
  if (this->beginangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->beginangle(), output);
  }

  // optional double endangle = 8;
  if (this->endangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->endangle(), output);
  }

  // optional int32 linestyle = 9;
  if (this->linestyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->linestyle(), output);
  }

  // optional int32 fullstyle = 10;
  if (this->fullstyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->fullstyle(), output);
  }

  // optional int32 linewidth = 11;
  if (this->linewidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->linewidth(), output);
  }

  // repeated string waringID = 12;
  for (int i = 0; i < this->waringid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringid(i).data(), this->waringid(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.waringID");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->waringid(i), output);
  }

  // optional string waringtype = 13;
  if (this->waringtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringtype().data(), this->waringtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.waringtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->waringtype(), output);
  }

  // optional string drawman = 14;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.drawman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->drawman(), output);
  }

  // optional bool isshare = 15;
  if (this->isshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isshare(), output);
  }

  // optional string linecolor = 16;
  if (this->linecolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linecolor().data(), this->linecolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.linecolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->linecolor(), output);
  }

  // optional string fullcolor = 17;
  if (this->fullcolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullcolor().data(), this->fullcolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.fullcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->fullcolor(), output);
  }

  // repeated .WaringInfo info = 18;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SectorRequest)
}

::google::protobuf::uint8* SectorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SectorRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // optional double radius = 6;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->radius(), target);
  }

  // optional double beginangle = 7;
  if (this->beginangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->beginangle(), target);
  }

  // optional double endangle = 8;
  if (this->endangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->endangle(), target);
  }

  // optional int32 linestyle = 9;
  if (this->linestyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->linestyle(), target);
  }

  // optional int32 fullstyle = 10;
  if (this->fullstyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->fullstyle(), target);
  }

  // optional int32 linewidth = 11;
  if (this->linewidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->linewidth(), target);
  }

  // repeated string waringID = 12;
  for (int i = 0; i < this->waringid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringid(i).data(), this->waringid(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.waringID");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->waringid(i), target);
  }

  // optional string waringtype = 13;
  if (this->waringtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringtype().data(), this->waringtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.waringtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->waringtype(), target);
  }

  // optional string drawman = 14;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.drawman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->drawman(), target);
  }

  // optional bool isshare = 15;
  if (this->isshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isshare(), target);
  }

  // optional string linecolor = 16;
  if (this->linecolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linecolor().data(), this->linecolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.linecolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->linecolor(), target);
  }

  // optional string fullcolor = 17;
  if (this->fullcolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullcolor().data(), this->fullcolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRequest.fullcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->fullcolor(), target);
  }

  // repeated .WaringInfo info = 18;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SectorRequest)
  return target;
}

size_t SectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SectorRequest)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // optional double radius = 6;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  // optional double beginangle = 7;
  if (this->beginangle() != 0) {
    total_size += 1 + 8;
  }

  // optional double endangle = 8;
  if (this->endangle() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 linestyle = 9;
  if (this->linestyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->linestyle());
  }

  // optional int32 fullstyle = 10;
  if (this->fullstyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fullstyle());
  }

  // optional int32 linewidth = 11;
  if (this->linewidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->linewidth());
  }

  // optional string waringtype = 13;
  if (this->waringtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->waringtype());
  }

  // optional string drawman = 14;
  if (this->drawman().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drawman());
  }

  // optional bool isshare = 15;
  if (this->isshare() != 0) {
    total_size += 1 + 1;
  }

  // optional string linecolor = 16;
  if (this->linecolor().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linecolor());
  }

  // optional string fullcolor = 17;
  if (this->fullcolor().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullcolor());
  }

  // repeated string waringID = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->waringid_size());
  for (int i = 0; i < this->waringid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->waringid(i));
  }

  // repeated .WaringInfo info = 18;
  {
    unsigned int count = this->info_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SectorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SectorRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SectorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SectorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SectorRequest)
    UnsafeMergeFrom(*source);
  }
}

void SectorRequest::MergeFrom(const SectorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SectorRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SectorRequest::UnsafeMergeFrom(const SectorRequest& from) {
  GOOGLE_DCHECK(&from != this);
  waringid_.UnsafeMergeFrom(from.waringid_);
  info_.MergeFrom(from.info_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.beginangle() != 0) {
    set_beginangle(from.beginangle());
  }
  if (from.endangle() != 0) {
    set_endangle(from.endangle());
  }
  if (from.linestyle() != 0) {
    set_linestyle(from.linestyle());
  }
  if (from.fullstyle() != 0) {
    set_fullstyle(from.fullstyle());
  }
  if (from.linewidth() != 0) {
    set_linewidth(from.linewidth());
  }
  if (from.waringtype().size() > 0) {

    waringtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.waringtype_);
  }
  if (from.drawman().size() > 0) {

    drawman_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drawman_);
  }
  if (from.isshare() != 0) {
    set_isshare(from.isshare());
  }
  if (from.linecolor().size() > 0) {

    linecolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linecolor_);
  }
  if (from.fullcolor().size() > 0) {

    fullcolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullcolor_);
  }
}

void SectorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectorRequest::CopyFrom(const SectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SectorRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SectorRequest::IsInitialized() const {

  return true;
}

void SectorRequest::Swap(SectorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SectorRequest::InternalSwap(SectorRequest* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(radius_, other->radius_);
  std::swap(beginangle_, other->beginangle_);
  std::swap(endangle_, other->endangle_);
  std::swap(linestyle_, other->linestyle_);
  std::swap(fullstyle_, other->fullstyle_);
  std::swap(linewidth_, other->linewidth_);
  waringid_.UnsafeArenaSwap(&other->waringid_);
  waringtype_.Swap(&other->waringtype_);
  drawman_.Swap(&other->drawman_);
  std::swap(isshare_, other->isshare_);
  linecolor_.Swap(&other->linecolor_);
  fullcolor_.Swap(&other->fullcolor_);
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SectorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectorRequest_descriptor_;
  metadata.reflection = SectorRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SectorRequest

// optional int32 type = 1;
void SectorRequest::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 SectorRequest::type() const {
  // @@protoc_insertion_point(field_get:SectorRequest.type)
  return type_;
}
void SectorRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.type)
}

// optional string ID = 2;
void SectorRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SectorRequest::id() const {
  // @@protoc_insertion_point(field_get:SectorRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SectorRequest.ID)
}
void SectorRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SectorRequest.ID)
}
void SectorRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SectorRequest.ID)
}
::std::string* SectorRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:SectorRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SectorRequest::release_id() {
  // @@protoc_insertion_point(field_release:SectorRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SectorRequest.ID)
}

// optional string name = 3;
void SectorRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SectorRequest::name() const {
  // @@protoc_insertion_point(field_get:SectorRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SectorRequest.name)
}
void SectorRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SectorRequest.name)
}
void SectorRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SectorRequest.name)
}
::std::string* SectorRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:SectorRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SectorRequest::release_name() {
  // @@protoc_insertion_point(field_release:SectorRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SectorRequest.name)
}

// optional double lat = 4;
void SectorRequest::clear_lat() {
  lat_ = 0;
}
double SectorRequest::lat() const {
  // @@protoc_insertion_point(field_get:SectorRequest.lat)
  return lat_;
}
void SectorRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.lat)
}

// optional double lon = 5;
void SectorRequest::clear_lon() {
  lon_ = 0;
}
double SectorRequest::lon() const {
  // @@protoc_insertion_point(field_get:SectorRequest.lon)
  return lon_;
}
void SectorRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.lon)
}

// optional double radius = 6;
void SectorRequest::clear_radius() {
  radius_ = 0;
}
double SectorRequest::radius() const {
  // @@protoc_insertion_point(field_get:SectorRequest.radius)
  return radius_;
}
void SectorRequest::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.radius)
}

// optional double beginangle = 7;
void SectorRequest::clear_beginangle() {
  beginangle_ = 0;
}
double SectorRequest::beginangle() const {
  // @@protoc_insertion_point(field_get:SectorRequest.beginangle)
  return beginangle_;
}
void SectorRequest::set_beginangle(double value) {
  
  beginangle_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.beginangle)
}

// optional double endangle = 8;
void SectorRequest::clear_endangle() {
  endangle_ = 0;
}
double SectorRequest::endangle() const {
  // @@protoc_insertion_point(field_get:SectorRequest.endangle)
  return endangle_;
}
void SectorRequest::set_endangle(double value) {
  
  endangle_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.endangle)
}

// optional int32 linestyle = 9;
void SectorRequest::clear_linestyle() {
  linestyle_ = 0;
}
::google::protobuf::int32 SectorRequest::linestyle() const {
  // @@protoc_insertion_point(field_get:SectorRequest.linestyle)
  return linestyle_;
}
void SectorRequest::set_linestyle(::google::protobuf::int32 value) {
  
  linestyle_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.linestyle)
}

// optional int32 fullstyle = 10;
void SectorRequest::clear_fullstyle() {
  fullstyle_ = 0;
}
::google::protobuf::int32 SectorRequest::fullstyle() const {
  // @@protoc_insertion_point(field_get:SectorRequest.fullstyle)
  return fullstyle_;
}
void SectorRequest::set_fullstyle(::google::protobuf::int32 value) {
  
  fullstyle_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.fullstyle)
}

// optional int32 linewidth = 11;
void SectorRequest::clear_linewidth() {
  linewidth_ = 0;
}
::google::protobuf::int32 SectorRequest::linewidth() const {
  // @@protoc_insertion_point(field_get:SectorRequest.linewidth)
  return linewidth_;
}
void SectorRequest::set_linewidth(::google::protobuf::int32 value) {
  
  linewidth_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.linewidth)
}

// repeated string waringID = 12;
int SectorRequest::waringid_size() const {
  return waringid_.size();
}
void SectorRequest::clear_waringid() {
  waringid_.Clear();
}
const ::std::string& SectorRequest::waringid(int index) const {
  // @@protoc_insertion_point(field_get:SectorRequest.waringID)
  return waringid_.Get(index);
}
::std::string* SectorRequest::mutable_waringid(int index) {
  // @@protoc_insertion_point(field_mutable:SectorRequest.waringID)
  return waringid_.Mutable(index);
}
void SectorRequest::set_waringid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SectorRequest.waringID)
  waringid_.Mutable(index)->assign(value);
}
void SectorRequest::set_waringid(int index, const char* value) {
  waringid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SectorRequest.waringID)
}
void SectorRequest::set_waringid(int index, const char* value, size_t size) {
  waringid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SectorRequest.waringID)
}
::std::string* SectorRequest::add_waringid() {
  // @@protoc_insertion_point(field_add_mutable:SectorRequest.waringID)
  return waringid_.Add();
}
void SectorRequest::add_waringid(const ::std::string& value) {
  waringid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SectorRequest.waringID)
}
void SectorRequest::add_waringid(const char* value) {
  waringid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SectorRequest.waringID)
}
void SectorRequest::add_waringid(const char* value, size_t size) {
  waringid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SectorRequest.waringID)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SectorRequest::waringid() const {
  // @@protoc_insertion_point(field_list:SectorRequest.waringID)
  return waringid_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SectorRequest::mutable_waringid() {
  // @@protoc_insertion_point(field_mutable_list:SectorRequest.waringID)
  return &waringid_;
}

// optional string waringtype = 13;
void SectorRequest::clear_waringtype() {
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SectorRequest::waringtype() const {
  // @@protoc_insertion_point(field_get:SectorRequest.waringtype)
  return waringtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_waringtype(const ::std::string& value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SectorRequest.waringtype)
}
void SectorRequest::set_waringtype(const char* value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SectorRequest.waringtype)
}
void SectorRequest::set_waringtype(const char* value, size_t size) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SectorRequest.waringtype)
}
::std::string* SectorRequest::mutable_waringtype() {
  
  // @@protoc_insertion_point(field_mutable:SectorRequest.waringtype)
  return waringtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SectorRequest::release_waringtype() {
  // @@protoc_insertion_point(field_release:SectorRequest.waringtype)
  
  return waringtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_allocated_waringtype(::std::string* waringtype) {
  if (waringtype != NULL) {
    
  } else {
    
  }
  waringtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waringtype);
  // @@protoc_insertion_point(field_set_allocated:SectorRequest.waringtype)
}

// optional string drawman = 14;
void SectorRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SectorRequest::drawman() const {
  // @@protoc_insertion_point(field_get:SectorRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SectorRequest.drawman)
}
void SectorRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SectorRequest.drawman)
}
void SectorRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SectorRequest.drawman)
}
::std::string* SectorRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:SectorRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SectorRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:SectorRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:SectorRequest.drawman)
}

// optional bool isshare = 15;
void SectorRequest::clear_isshare() {
  isshare_ = false;
}
bool SectorRequest::isshare() const {
  // @@protoc_insertion_point(field_get:SectorRequest.isshare)
  return isshare_;
}
void SectorRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:SectorRequest.isshare)
}

// optional string linecolor = 16;
void SectorRequest::clear_linecolor() {
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SectorRequest::linecolor() const {
  // @@protoc_insertion_point(field_get:SectorRequest.linecolor)
  return linecolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_linecolor(const ::std::string& value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SectorRequest.linecolor)
}
void SectorRequest::set_linecolor(const char* value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SectorRequest.linecolor)
}
void SectorRequest::set_linecolor(const char* value, size_t size) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SectorRequest.linecolor)
}
::std::string* SectorRequest::mutable_linecolor() {
  
  // @@protoc_insertion_point(field_mutable:SectorRequest.linecolor)
  return linecolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SectorRequest::release_linecolor() {
  // @@protoc_insertion_point(field_release:SectorRequest.linecolor)
  
  return linecolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_allocated_linecolor(::std::string* linecolor) {
  if (linecolor != NULL) {
    
  } else {
    
  }
  linecolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linecolor);
  // @@protoc_insertion_point(field_set_allocated:SectorRequest.linecolor)
}

// optional string fullcolor = 17;
void SectorRequest::clear_fullcolor() {
  fullcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SectorRequest::fullcolor() const {
  // @@protoc_insertion_point(field_get:SectorRequest.fullcolor)
  return fullcolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_fullcolor(const ::std::string& value) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SectorRequest.fullcolor)
}
void SectorRequest::set_fullcolor(const char* value) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SectorRequest.fullcolor)
}
void SectorRequest::set_fullcolor(const char* value, size_t size) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SectorRequest.fullcolor)
}
::std::string* SectorRequest::mutable_fullcolor() {
  
  // @@protoc_insertion_point(field_mutable:SectorRequest.fullcolor)
  return fullcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SectorRequest::release_fullcolor() {
  // @@protoc_insertion_point(field_release:SectorRequest.fullcolor)
  
  return fullcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRequest::set_allocated_fullcolor(::std::string* fullcolor) {
  if (fullcolor != NULL) {
    
  } else {
    
  }
  fullcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullcolor);
  // @@protoc_insertion_point(field_set_allocated:SectorRequest.fullcolor)
}

// repeated .WaringInfo info = 18;
int SectorRequest::info_size() const {
  return info_.size();
}
void SectorRequest::clear_info() {
  info_.Clear();
}
const ::WaringInfo& SectorRequest::info(int index) const {
  // @@protoc_insertion_point(field_get:SectorRequest.info)
  return info_.Get(index);
}
::WaringInfo* SectorRequest::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:SectorRequest.info)
  return info_.Mutable(index);
}
::WaringInfo* SectorRequest::add_info() {
  // @@protoc_insertion_point(field_add:SectorRequest.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::WaringInfo >*
SectorRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:SectorRequest.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::WaringInfo >&
SectorRequest::info() const {
  // @@protoc_insertion_point(field_list:SectorRequest.info)
  return info_;
}

inline const SectorRequest* SectorRequest::internal_default_instance() {
  return &SectorRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SectorRepsone::kTypeFieldNumber;
const int SectorRepsone::kResultFieldNumber;
const int SectorRepsone::kSectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SectorRepsone::SectorRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sector_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SectorRepsone)
}

void SectorRepsone::InitAsDefaultInstance() {
}

SectorRepsone::SectorRepsone(const SectorRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SectorRepsone)
}

void SectorRepsone::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

SectorRepsone::~SectorRepsone() {
  // @@protoc_insertion_point(destructor:SectorRepsone)
  SharedDtor();
}

void SectorRepsone::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SectorRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectorRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectorRepsone_descriptor_;
}

const SectorRepsone& SectorRepsone::default_instance() {
  protobuf_InitDefaults_sector_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SectorRepsone> SectorRepsone_default_instance_;

SectorRepsone* SectorRepsone::New(::google::protobuf::Arena* arena) const {
  SectorRepsone* n = new SectorRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SectorRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:SectorRepsone)
  type_ = 0;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sectors_.Clear();
}

bool SectorRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SectorRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SectorRepsone.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sectors;
        break;
      }

      // repeated .SectorRequest sectors = 3;
      case 3: {
        if (tag == 26) {
         parse_sectors:
          DO_(input->IncrementRecursionDepth());
         parse_loop_sectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_sectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_sectors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SectorRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SectorRepsone)
  return false;
#undef DO_
}

void SectorRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SectorRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRepsone.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // repeated .SectorRequest sectors = 3;
  for (unsigned int i = 0, n = this->sectors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sectors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SectorRepsone)
}

::google::protobuf::uint8* SectorRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SectorRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SectorRepsone.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // repeated .SectorRequest sectors = 3;
  for (unsigned int i = 0, n = this->sectors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->sectors(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SectorRepsone)
  return target;
}

size_t SectorRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SectorRepsone)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // repeated .SectorRequest sectors = 3;
  {
    unsigned int count = this->sectors_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sectors(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectorRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SectorRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SectorRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SectorRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SectorRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SectorRepsone)
    UnsafeMergeFrom(*source);
  }
}

void SectorRepsone::MergeFrom(const SectorRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SectorRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SectorRepsone::UnsafeMergeFrom(const SectorRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  sectors_.MergeFrom(from.sectors_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void SectorRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SectorRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectorRepsone::CopyFrom(const SectorRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SectorRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SectorRepsone::IsInitialized() const {

  return true;
}

void SectorRepsone::Swap(SectorRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SectorRepsone::InternalSwap(SectorRepsone* other) {
  std::swap(type_, other->type_);
  result_.Swap(&other->result_);
  sectors_.UnsafeArenaSwap(&other->sectors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SectorRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectorRepsone_descriptor_;
  metadata.reflection = SectorRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SectorRepsone

// optional int32 type = 1;
void SectorRepsone::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 SectorRepsone::type() const {
  // @@protoc_insertion_point(field_get:SectorRepsone.type)
  return type_;
}
void SectorRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SectorRepsone.type)
}

// optional string result = 2;
void SectorRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SectorRepsone::result() const {
  // @@protoc_insertion_point(field_get:SectorRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SectorRepsone.result)
}
void SectorRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SectorRepsone.result)
}
void SectorRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SectorRepsone.result)
}
::std::string* SectorRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:SectorRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SectorRepsone::release_result() {
  // @@protoc_insertion_point(field_release:SectorRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SectorRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:SectorRepsone.result)
}

// repeated .SectorRequest sectors = 3;
int SectorRepsone::sectors_size() const {
  return sectors_.size();
}
void SectorRepsone::clear_sectors() {
  sectors_.Clear();
}
const ::SectorRequest& SectorRepsone::sectors(int index) const {
  // @@protoc_insertion_point(field_get:SectorRepsone.sectors)
  return sectors_.Get(index);
}
::SectorRequest* SectorRepsone::mutable_sectors(int index) {
  // @@protoc_insertion_point(field_mutable:SectorRepsone.sectors)
  return sectors_.Mutable(index);
}
::SectorRequest* SectorRepsone::add_sectors() {
  // @@protoc_insertion_point(field_add:SectorRepsone.sectors)
  return sectors_.Add();
}
::google::protobuf::RepeatedPtrField< ::SectorRequest >*
SectorRepsone::mutable_sectors() {
  // @@protoc_insertion_point(field_mutable_list:SectorRepsone.sectors)
  return &sectors_;
}
const ::google::protobuf::RepeatedPtrField< ::SectorRequest >&
SectorRepsone::sectors() const {
  // @@protoc_insertion_point(field_list:SectorRepsone.sectors)
  return sectors_;
}

inline const SectorRepsone* SectorRepsone::internal_default_instance() {
  return &SectorRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
