// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgCPAWarning.proto

#ifndef PROTOBUF_hgCPAWarning_2eproto__INCLUDED
#define PROTOBUF_hgCPAWarning_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "hgWarningType.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgCPAWarning_2eproto();
void protobuf_InitDefaults_hgCPAWarning_2eproto();
void protobuf_AssignDesc_hgCPAWarning_2eproto();
void protobuf_ShutdownFile_hgCPAWarning_2eproto();

class hgCPAWarning;

// ===================================================================

class hgCPAWarning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgCPAWarning) */ {
 public:
  hgCPAWarning();
  virtual ~hgCPAWarning();

  hgCPAWarning(const hgCPAWarning& from);

  inline hgCPAWarning& operator=(const hgCPAWarning& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgCPAWarning& default_instance();

  static const hgCPAWarning* internal_default_instance();

  void Swap(hgCPAWarning* other);

  // implements Message ----------------------------------------------

  inline hgCPAWarning* New() const { return New(NULL); }

  hgCPAWarning* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgCPAWarning& from);
  void MergeFrom(const hgCPAWarning& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgCPAWarning* other);
  void UnsafeMergeFrom(const hgCPAWarning& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string WarningID = 1;
  void clear_warningid();
  static const int kWarningIDFieldNumber = 1;
  const ::std::string& warningid() const;
  void set_warningid(const ::std::string& value);
  void set_warningid(const char* value);
  void set_warningid(const char* value, size_t size);
  ::std::string* mutable_warningid();
  ::std::string* release_warningid();
  void set_allocated_warningid(::std::string* warningid);

  // optional string WarningGUID = 2;
  void clear_warningguid();
  static const int kWarningGUIDFieldNumber = 2;
  const ::std::string& warningguid() const;
  void set_warningguid(const ::std::string& value);
  void set_warningguid(const char* value);
  void set_warningguid(const char* value, size_t size);
  ::std::string* mutable_warningguid();
  ::std::string* release_warningguid();
  void set_allocated_warningguid(::std::string* warningguid);

  // optional int32 WarningPriority = 3;
  void clear_warningpriority();
  static const int kWarningPriorityFieldNumber = 3;
  ::google::protobuf::int32 warningpriority() const;
  void set_warningpriority(::google::protobuf::int32 value);

  // optional string WarningName = 4;
  void clear_warningname();
  static const int kWarningNameFieldNumber = 4;
  const ::std::string& warningname() const;
  void set_warningname(const ::std::string& value);
  void set_warningname(const char* value);
  void set_warningname(const char* value, size_t size);
  ::std::string* mutable_warningname();
  ::std::string* release_warningname();
  void set_allocated_warningname(::std::string* warningname);

  // optional string MMSI = 5;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 5;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional string TargetMMSI = 6;
  void clear_targetmmsi();
  static const int kTargetMMSIFieldNumber = 6;
  const ::std::string& targetmmsi() const;
  void set_targetmmsi(const ::std::string& value);
  void set_targetmmsi(const char* value);
  void set_targetmmsi(const char* value, size_t size);
  ::std::string* mutable_targetmmsi();
  ::std::string* release_targetmmsi();
  void set_allocated_targetmmsi(::std::string* targetmmsi);

  // optional int64 WarningTime = 7;
  void clear_warningtime();
  static const int kWarningTimeFieldNumber = 7;
  ::google::protobuf::int64 warningtime() const;
  void set_warningtime(::google::protobuf::int64 value);

  // optional string ShipName = 8;
  void clear_shipname();
  static const int kShipNameFieldNumber = 8;
  const ::std::string& shipname() const;
  void set_shipname(const ::std::string& value);
  void set_shipname(const char* value);
  void set_shipname(const char* value, size_t size);
  ::std::string* mutable_shipname();
  ::std::string* release_shipname();
  void set_allocated_shipname(::std::string* shipname);

  // optional string CallSign = 9;
  void clear_callsign();
  static const int kCallSignFieldNumber = 9;
  const ::std::string& callsign() const;
  void set_callsign(const ::std::string& value);
  void set_callsign(const char* value);
  void set_callsign(const char* value, size_t size);
  ::std::string* mutable_callsign();
  ::std::string* release_callsign();
  void set_allocated_callsign(::std::string* callsign);

  // optional string ShipType = 10;
  void clear_shiptype();
  static const int kShipTypeFieldNumber = 10;
  const ::std::string& shiptype() const;
  void set_shiptype(const ::std::string& value);
  void set_shiptype(const char* value);
  void set_shiptype(const char* value, size_t size);
  ::std::string* mutable_shiptype();
  ::std::string* release_shiptype();
  void set_allocated_shiptype(::std::string* shiptype);

  // optional double SOG = 11;
  void clear_sog();
  static const int kSOGFieldNumber = 11;
  double sog() const;
  void set_sog(double value);

  // optional double CPA = 12;
  void clear_cpa();
  static const int kCPAFieldNumber = 12;
  double cpa() const;
  void set_cpa(double value);

  // optional double TCPA = 13;
  void clear_tcpa();
  static const int kTCPAFieldNumber = 13;
  double tcpa() const;
  void set_tcpa(double value);

  // optional double RelativeBear = 14;
  void clear_relativebear();
  static const int kRelativeBearFieldNumber = 14;
  double relativebear() const;
  void set_relativebear(double value);

  // optional double Distance = 15;
  void clear_distance();
  static const int kDistanceFieldNumber = 15;
  double distance() const;
  void set_distance(double value);

  // optional double ReciprocalBear = 16;
  void clear_reciprocalbear();
  static const int kReciprocalBearFieldNumber = 16;
  double reciprocalbear() const;
  void set_reciprocalbear(double value);

  // optional .hgWarningType WarningType = 17;
  void clear_warningtype();
  static const int kWarningTypeFieldNumber = 17;
  ::hgWarningType warningtype() const;
  void set_warningtype(::hgWarningType value);

  // @@protoc_insertion_point(class_scope:hgCPAWarning)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr warningid_;
  ::google::protobuf::internal::ArenaStringPtr warningguid_;
  ::google::protobuf::internal::ArenaStringPtr warningname_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  ::google::protobuf::internal::ArenaStringPtr targetmmsi_;
  ::google::protobuf::internal::ArenaStringPtr shipname_;
  ::google::protobuf::internal::ArenaStringPtr callsign_;
  ::google::protobuf::internal::ArenaStringPtr shiptype_;
  ::google::protobuf::int64 warningtime_;
  ::google::protobuf::int32 warningpriority_;
  int warningtype_;
  double sog_;
  double cpa_;
  double tcpa_;
  double relativebear_;
  double distance_;
  double reciprocalbear_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgCPAWarning_2eproto_impl();
  friend void  protobuf_AddDesc_hgCPAWarning_2eproto_impl();
  friend void protobuf_AssignDesc_hgCPAWarning_2eproto();
  friend void protobuf_ShutdownFile_hgCPAWarning_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgCPAWarning> hgCPAWarning_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCPAWarning

// optional string WarningID = 1;
inline void hgCPAWarning::clear_warningid() {
  warningid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::warningid() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.WarningID)
  return warningid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_warningid(const ::std::string& value) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.WarningID)
}
inline void hgCPAWarning::set_warningid(const char* value) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.WarningID)
}
inline void hgCPAWarning::set_warningid(const char* value, size_t size) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.WarningID)
}
inline ::std::string* hgCPAWarning::mutable_warningid() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.WarningID)
  return warningid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_warningid() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.WarningID)
  
  return warningid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_warningid(::std::string* warningid) {
  if (warningid != NULL) {
    
  } else {
    
  }
  warningid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningid);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.WarningID)
}

// optional string WarningGUID = 2;
inline void hgCPAWarning::clear_warningguid() {
  warningguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::warningguid() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.WarningGUID)
  return warningguid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_warningguid(const ::std::string& value) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.WarningGUID)
}
inline void hgCPAWarning::set_warningguid(const char* value) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.WarningGUID)
}
inline void hgCPAWarning::set_warningguid(const char* value, size_t size) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.WarningGUID)
}
inline ::std::string* hgCPAWarning::mutable_warningguid() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.WarningGUID)
  return warningguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_warningguid() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.WarningGUID)
  
  return warningguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_warningguid(::std::string* warningguid) {
  if (warningguid != NULL) {
    
  } else {
    
  }
  warningguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningguid);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.WarningGUID)
}

// optional int32 WarningPriority = 3;
inline void hgCPAWarning::clear_warningpriority() {
  warningpriority_ = 0;
}
inline ::google::protobuf::int32 hgCPAWarning::warningpriority() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.WarningPriority)
  return warningpriority_;
}
inline void hgCPAWarning::set_warningpriority(::google::protobuf::int32 value) {
  
  warningpriority_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.WarningPriority)
}

// optional string WarningName = 4;
inline void hgCPAWarning::clear_warningname() {
  warningname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::warningname() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.WarningName)
  return warningname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_warningname(const ::std::string& value) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.WarningName)
}
inline void hgCPAWarning::set_warningname(const char* value) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.WarningName)
}
inline void hgCPAWarning::set_warningname(const char* value, size_t size) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.WarningName)
}
inline ::std::string* hgCPAWarning::mutable_warningname() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.WarningName)
  return warningname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_warningname() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.WarningName)
  
  return warningname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_warningname(::std::string* warningname) {
  if (warningname != NULL) {
    
  } else {
    
  }
  warningname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningname);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.WarningName)
}

// optional string MMSI = 5;
inline void hgCPAWarning::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::mmsi() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.MMSI)
}
inline void hgCPAWarning::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.MMSI)
}
inline void hgCPAWarning::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.MMSI)
}
inline ::std::string* hgCPAWarning::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.MMSI)
}

// optional string TargetMMSI = 6;
inline void hgCPAWarning::clear_targetmmsi() {
  targetmmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::targetmmsi() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.TargetMMSI)
  return targetmmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_targetmmsi(const ::std::string& value) {
  
  targetmmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.TargetMMSI)
}
inline void hgCPAWarning::set_targetmmsi(const char* value) {
  
  targetmmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.TargetMMSI)
}
inline void hgCPAWarning::set_targetmmsi(const char* value, size_t size) {
  
  targetmmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.TargetMMSI)
}
inline ::std::string* hgCPAWarning::mutable_targetmmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.TargetMMSI)
  return targetmmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_targetmmsi() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.TargetMMSI)
  
  return targetmmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_targetmmsi(::std::string* targetmmsi) {
  if (targetmmsi != NULL) {
    
  } else {
    
  }
  targetmmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.TargetMMSI)
}

// optional int64 WarningTime = 7;
inline void hgCPAWarning::clear_warningtime() {
  warningtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 hgCPAWarning::warningtime() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.WarningTime)
  return warningtime_;
}
inline void hgCPAWarning::set_warningtime(::google::protobuf::int64 value) {
  
  warningtime_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.WarningTime)
}

// optional string ShipName = 8;
inline void hgCPAWarning::clear_shipname() {
  shipname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::shipname() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.ShipName)
  return shipname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_shipname(const ::std::string& value) {
  
  shipname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.ShipName)
}
inline void hgCPAWarning::set_shipname(const char* value) {
  
  shipname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.ShipName)
}
inline void hgCPAWarning::set_shipname(const char* value, size_t size) {
  
  shipname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.ShipName)
}
inline ::std::string* hgCPAWarning::mutable_shipname() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.ShipName)
  return shipname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_shipname() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.ShipName)
  
  return shipname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_shipname(::std::string* shipname) {
  if (shipname != NULL) {
    
  } else {
    
  }
  shipname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shipname);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.ShipName)
}

// optional string CallSign = 9;
inline void hgCPAWarning::clear_callsign() {
  callsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::callsign() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.CallSign)
  return callsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_callsign(const ::std::string& value) {
  
  callsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.CallSign)
}
inline void hgCPAWarning::set_callsign(const char* value) {
  
  callsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.CallSign)
}
inline void hgCPAWarning::set_callsign(const char* value, size_t size) {
  
  callsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.CallSign)
}
inline ::std::string* hgCPAWarning::mutable_callsign() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.CallSign)
  return callsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_callsign() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.CallSign)
  
  return callsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_callsign(::std::string* callsign) {
  if (callsign != NULL) {
    
  } else {
    
  }
  callsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callsign);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.CallSign)
}

// optional string ShipType = 10;
inline void hgCPAWarning::clear_shiptype() {
  shiptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPAWarning::shiptype() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.ShipType)
  return shiptype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_shiptype(const ::std::string& value) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPAWarning.ShipType)
}
inline void hgCPAWarning::set_shiptype(const char* value) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPAWarning.ShipType)
}
inline void hgCPAWarning::set_shiptype(const char* value, size_t size) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPAWarning.ShipType)
}
inline ::std::string* hgCPAWarning::mutable_shiptype() {
  
  // @@protoc_insertion_point(field_mutable:hgCPAWarning.ShipType)
  return shiptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPAWarning::release_shiptype() {
  // @@protoc_insertion_point(field_release:hgCPAWarning.ShipType)
  
  return shiptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPAWarning::set_allocated_shiptype(::std::string* shiptype) {
  if (shiptype != NULL) {
    
  } else {
    
  }
  shiptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shiptype);
  // @@protoc_insertion_point(field_set_allocated:hgCPAWarning.ShipType)
}

// optional double SOG = 11;
inline void hgCPAWarning::clear_sog() {
  sog_ = 0;
}
inline double hgCPAWarning::sog() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.SOG)
  return sog_;
}
inline void hgCPAWarning::set_sog(double value) {
  
  sog_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.SOG)
}

// optional double CPA = 12;
inline void hgCPAWarning::clear_cpa() {
  cpa_ = 0;
}
inline double hgCPAWarning::cpa() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.CPA)
  return cpa_;
}
inline void hgCPAWarning::set_cpa(double value) {
  
  cpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.CPA)
}

// optional double TCPA = 13;
inline void hgCPAWarning::clear_tcpa() {
  tcpa_ = 0;
}
inline double hgCPAWarning::tcpa() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.TCPA)
  return tcpa_;
}
inline void hgCPAWarning::set_tcpa(double value) {
  
  tcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.TCPA)
}

// optional double RelativeBear = 14;
inline void hgCPAWarning::clear_relativebear() {
  relativebear_ = 0;
}
inline double hgCPAWarning::relativebear() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.RelativeBear)
  return relativebear_;
}
inline void hgCPAWarning::set_relativebear(double value) {
  
  relativebear_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.RelativeBear)
}

// optional double Distance = 15;
inline void hgCPAWarning::clear_distance() {
  distance_ = 0;
}
inline double hgCPAWarning::distance() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.Distance)
  return distance_;
}
inline void hgCPAWarning::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.Distance)
}

// optional double ReciprocalBear = 16;
inline void hgCPAWarning::clear_reciprocalbear() {
  reciprocalbear_ = 0;
}
inline double hgCPAWarning::reciprocalbear() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.ReciprocalBear)
  return reciprocalbear_;
}
inline void hgCPAWarning::set_reciprocalbear(double value) {
  
  reciprocalbear_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.ReciprocalBear)
}

// optional .hgWarningType WarningType = 17;
inline void hgCPAWarning::clear_warningtype() {
  warningtype_ = 0;
}
inline ::hgWarningType hgCPAWarning::warningtype() const {
  // @@protoc_insertion_point(field_get:hgCPAWarning.WarningType)
  return static_cast< ::hgWarningType >(warningtype_);
}
inline void hgCPAWarning::set_warningtype(::hgWarningType value) {
  
  warningtype_ = value;
  // @@protoc_insertion_point(field_set:hgCPAWarning.WarningType)
}

inline const hgCPAWarning* hgCPAWarning::internal_default_instance() {
  return &hgCPAWarning_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgCPAWarning_2eproto__INCLUDED
