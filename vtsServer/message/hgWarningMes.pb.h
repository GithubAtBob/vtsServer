// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgWarningMes.proto

#ifndef PROTOBUF_hgWarningMes_2eproto__INCLUDED
#define PROTOBUF_hgWarningMes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "hgWarningType.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgWarningMes_2eproto();
void protobuf_InitDefaults_hgWarningMes_2eproto();
void protobuf_AssignDesc_hgWarningMes_2eproto();
void protobuf_ShutdownFile_hgWarningMes_2eproto();

class WarningMessage;
class hgWarningMes;

enum UserLayerType {
  UPolygon = 0,
  UCricle = 1,
  USector = 2,
  UReprotLine = 3,
  UChannel = 4,
  UNotes = 5,
  UserLayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UserLayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UserLayerType_IsValid(int value);
const UserLayerType UserLayerType_MIN = UPolygon;
const UserLayerType UserLayerType_MAX = UNotes;
const int UserLayerType_ARRAYSIZE = UserLayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserLayerType_descriptor();
inline const ::std::string& UserLayerType_Name(UserLayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserLayerType_descriptor(), value);
}
inline bool UserLayerType_Parse(
    const ::std::string& name, UserLayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserLayerType>(
    UserLayerType_descriptor(), name, value);
}
// ===================================================================

class hgWarningMes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgWarningMes) */ {
 public:
  hgWarningMes();
  virtual ~hgWarningMes();

  hgWarningMes(const hgWarningMes& from);

  inline hgWarningMes& operator=(const hgWarningMes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgWarningMes& default_instance();

  static const hgWarningMes* internal_default_instance();

  void Swap(hgWarningMes* other);

  // implements Message ----------------------------------------------

  inline hgWarningMes* New() const { return New(NULL); }

  hgWarningMes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgWarningMes& from);
  void MergeFrom(const hgWarningMes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgWarningMes* other);
  void UnsafeMergeFrom(const hgWarningMes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string WarningID = 1;
  void clear_warningid();
  static const int kWarningIDFieldNumber = 1;
  const ::std::string& warningid() const;
  void set_warningid(const ::std::string& value);
  void set_warningid(const char* value);
  void set_warningid(const char* value, size_t size);
  ::std::string* mutable_warningid();
  ::std::string* release_warningid();
  void set_allocated_warningid(::std::string* warningid);

  // optional string WarningGUID = 2;
  void clear_warningguid();
  static const int kWarningGUIDFieldNumber = 2;
  const ::std::string& warningguid() const;
  void set_warningguid(const ::std::string& value);
  void set_warningguid(const char* value);
  void set_warningguid(const char* value, size_t size);
  ::std::string* mutable_warningguid();
  ::std::string* release_warningguid();
  void set_allocated_warningguid(::std::string* warningguid);

  // optional .hgWarningPriority WarningPriority = 3;
  void clear_warningpriority();
  static const int kWarningPriorityFieldNumber = 3;
  ::hgWarningPriority warningpriority() const;
  void set_warningpriority(::hgWarningPriority value);

  // optional string WarningName = 4;
  void clear_warningname();
  static const int kWarningNameFieldNumber = 4;
  const ::std::string& warningname() const;
  void set_warningname(const ::std::string& value);
  void set_warningname(const char* value);
  void set_warningname(const char* value, size_t size);
  ::std::string* mutable_warningname();
  ::std::string* release_warningname();
  void set_allocated_warningname(::std::string* warningname);

  // optional .WarningMessage Message = 5;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 5;
  const ::WarningMessage& message() const;
  ::WarningMessage* mutable_message();
  ::WarningMessage* release_message();
  void set_allocated_message(::WarningMessage* message);

  // optional string MMSI = 6;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 6;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional string UserLayGUID = 7;
  void clear_userlayguid();
  static const int kUserLayGUIDFieldNumber = 7;
  const ::std::string& userlayguid() const;
  void set_userlayguid(const ::std::string& value);
  void set_userlayguid(const char* value);
  void set_userlayguid(const char* value, size_t size);
  ::std::string* mutable_userlayguid();
  ::std::string* release_userlayguid();
  void set_allocated_userlayguid(::std::string* userlayguid);

  // optional .UserLayerType UserLayID = 8;
  void clear_userlayid();
  static const int kUserLayIDFieldNumber = 8;
  ::UserLayerType userlayid() const;
  void set_userlayid(::UserLayerType value);

  // optional string ID = 9;
  void clear_id();
  static const int kIDFieldNumber = 9;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional int64 WarningTime = 10;
  void clear_warningtime();
  static const int kWarningTimeFieldNumber = 10;
  ::google::protobuf::int64 warningtime() const;
  void set_warningtime(::google::protobuf::int64 value);

  // optional .hgWarningType WarningType = 11;
  void clear_warningtype();
  static const int kWarningTypeFieldNumber = 11;
  ::hgWarningType warningtype() const;
  void set_warningtype(::hgWarningType value);

  // optional string TargetMMSI = 12;
  void clear_targetmmsi();
  static const int kTargetMMSIFieldNumber = 12;
  const ::std::string& targetmmsi() const;
  void set_targetmmsi(const ::std::string& value);
  void set_targetmmsi(const char* value);
  void set_targetmmsi(const char* value, size_t size);
  ::std::string* mutable_targetmmsi();
  ::std::string* release_targetmmsi();
  void set_allocated_targetmmsi(::std::string* targetmmsi);

  // @@protoc_insertion_point(class_scope:hgWarningMes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr warningid_;
  ::google::protobuf::internal::ArenaStringPtr warningguid_;
  ::google::protobuf::internal::ArenaStringPtr warningname_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  ::google::protobuf::internal::ArenaStringPtr userlayguid_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr targetmmsi_;
  ::WarningMessage* message_;
  int warningpriority_;
  int userlayid_;
  ::google::protobuf::int64 warningtime_;
  int warningtype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgWarningMes_2eproto_impl();
  friend void  protobuf_AddDesc_hgWarningMes_2eproto_impl();
  friend void protobuf_AssignDesc_hgWarningMes_2eproto();
  friend void protobuf_ShutdownFile_hgWarningMes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgWarningMes> hgWarningMes_default_instance_;

// -------------------------------------------------------------------

class WarningMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WarningMessage) */ {
 public:
  WarningMessage();
  virtual ~WarningMessage();

  WarningMessage(const WarningMessage& from);

  inline WarningMessage& operator=(const WarningMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarningMessage& default_instance();

  static const WarningMessage* internal_default_instance();

  void Swap(WarningMessage* other);

  // implements Message ----------------------------------------------

  inline WarningMessage* New() const { return New(NULL); }

  WarningMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WarningMessage& from);
  void MergeFrom(const WarningMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WarningMessage* other);
  void UnsafeMergeFrom(const WarningMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string str = 1;
  void clear_str();
  static const int kStrFieldNumber = 1;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:WarningMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgWarningMes_2eproto_impl();
  friend void  protobuf_AddDesc_hgWarningMes_2eproto_impl();
  friend void protobuf_AssignDesc_hgWarningMes_2eproto();
  friend void protobuf_ShutdownFile_hgWarningMes_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<WarningMessage> WarningMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgWarningMes

// optional string WarningID = 1;
inline void hgWarningMes::clear_warningid() {
  warningid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgWarningMes::warningid() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.WarningID)
  return warningid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_warningid(const ::std::string& value) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgWarningMes.WarningID)
}
inline void hgWarningMes::set_warningid(const char* value) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgWarningMes.WarningID)
}
inline void hgWarningMes::set_warningid(const char* value, size_t size) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgWarningMes.WarningID)
}
inline ::std::string* hgWarningMes::mutable_warningid() {
  
  // @@protoc_insertion_point(field_mutable:hgWarningMes.WarningID)
  return warningid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgWarningMes::release_warningid() {
  // @@protoc_insertion_point(field_release:hgWarningMes.WarningID)
  
  return warningid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_allocated_warningid(::std::string* warningid) {
  if (warningid != NULL) {
    
  } else {
    
  }
  warningid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningid);
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.WarningID)
}

// optional string WarningGUID = 2;
inline void hgWarningMes::clear_warningguid() {
  warningguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgWarningMes::warningguid() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.WarningGUID)
  return warningguid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_warningguid(const ::std::string& value) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgWarningMes.WarningGUID)
}
inline void hgWarningMes::set_warningguid(const char* value) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgWarningMes.WarningGUID)
}
inline void hgWarningMes::set_warningguid(const char* value, size_t size) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgWarningMes.WarningGUID)
}
inline ::std::string* hgWarningMes::mutable_warningguid() {
  
  // @@protoc_insertion_point(field_mutable:hgWarningMes.WarningGUID)
  return warningguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgWarningMes::release_warningguid() {
  // @@protoc_insertion_point(field_release:hgWarningMes.WarningGUID)
  
  return warningguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_allocated_warningguid(::std::string* warningguid) {
  if (warningguid != NULL) {
    
  } else {
    
  }
  warningguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningguid);
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.WarningGUID)
}

// optional .hgWarningPriority WarningPriority = 3;
inline void hgWarningMes::clear_warningpriority() {
  warningpriority_ = 0;
}
inline ::hgWarningPriority hgWarningMes::warningpriority() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.WarningPriority)
  return static_cast< ::hgWarningPriority >(warningpriority_);
}
inline void hgWarningMes::set_warningpriority(::hgWarningPriority value) {
  
  warningpriority_ = value;
  // @@protoc_insertion_point(field_set:hgWarningMes.WarningPriority)
}

// optional string WarningName = 4;
inline void hgWarningMes::clear_warningname() {
  warningname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgWarningMes::warningname() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.WarningName)
  return warningname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_warningname(const ::std::string& value) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgWarningMes.WarningName)
}
inline void hgWarningMes::set_warningname(const char* value) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgWarningMes.WarningName)
}
inline void hgWarningMes::set_warningname(const char* value, size_t size) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgWarningMes.WarningName)
}
inline ::std::string* hgWarningMes::mutable_warningname() {
  
  // @@protoc_insertion_point(field_mutable:hgWarningMes.WarningName)
  return warningname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgWarningMes::release_warningname() {
  // @@protoc_insertion_point(field_release:hgWarningMes.WarningName)
  
  return warningname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_allocated_warningname(::std::string* warningname) {
  if (warningname != NULL) {
    
  } else {
    
  }
  warningname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningname);
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.WarningName)
}

// optional .WarningMessage Message = 5;
inline bool hgWarningMes::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void hgWarningMes::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::WarningMessage& hgWarningMes::message() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.Message)
  return message_ != NULL ? *message_
                         : *::WarningMessage::internal_default_instance();
}
inline ::WarningMessage* hgWarningMes::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::WarningMessage;
  }
  // @@protoc_insertion_point(field_mutable:hgWarningMes.Message)
  return message_;
}
inline ::WarningMessage* hgWarningMes::release_message() {
  // @@protoc_insertion_point(field_release:hgWarningMes.Message)
  
  ::WarningMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void hgWarningMes::set_allocated_message(::WarningMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.Message)
}

// optional string MMSI = 6;
inline void hgWarningMes::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgWarningMes::mmsi() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgWarningMes.MMSI)
}
inline void hgWarningMes::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgWarningMes.MMSI)
}
inline void hgWarningMes::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgWarningMes.MMSI)
}
inline ::std::string* hgWarningMes::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgWarningMes.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgWarningMes::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgWarningMes.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.MMSI)
}

// optional string UserLayGUID = 7;
inline void hgWarningMes::clear_userlayguid() {
  userlayguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgWarningMes::userlayguid() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.UserLayGUID)
  return userlayguid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_userlayguid(const ::std::string& value) {
  
  userlayguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgWarningMes.UserLayGUID)
}
inline void hgWarningMes::set_userlayguid(const char* value) {
  
  userlayguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgWarningMes.UserLayGUID)
}
inline void hgWarningMes::set_userlayguid(const char* value, size_t size) {
  
  userlayguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgWarningMes.UserLayGUID)
}
inline ::std::string* hgWarningMes::mutable_userlayguid() {
  
  // @@protoc_insertion_point(field_mutable:hgWarningMes.UserLayGUID)
  return userlayguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgWarningMes::release_userlayguid() {
  // @@protoc_insertion_point(field_release:hgWarningMes.UserLayGUID)
  
  return userlayguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_allocated_userlayguid(::std::string* userlayguid) {
  if (userlayguid != NULL) {
    
  } else {
    
  }
  userlayguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userlayguid);
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.UserLayGUID)
}

// optional .UserLayerType UserLayID = 8;
inline void hgWarningMes::clear_userlayid() {
  userlayid_ = 0;
}
inline ::UserLayerType hgWarningMes::userlayid() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.UserLayID)
  return static_cast< ::UserLayerType >(userlayid_);
}
inline void hgWarningMes::set_userlayid(::UserLayerType value) {
  
  userlayid_ = value;
  // @@protoc_insertion_point(field_set:hgWarningMes.UserLayID)
}

// optional string ID = 9;
inline void hgWarningMes::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgWarningMes::id() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgWarningMes.ID)
}
inline void hgWarningMes::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgWarningMes.ID)
}
inline void hgWarningMes::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgWarningMes.ID)
}
inline ::std::string* hgWarningMes::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hgWarningMes.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgWarningMes::release_id() {
  // @@protoc_insertion_point(field_release:hgWarningMes.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.ID)
}

// optional int64 WarningTime = 10;
inline void hgWarningMes::clear_warningtime() {
  warningtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 hgWarningMes::warningtime() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.WarningTime)
  return warningtime_;
}
inline void hgWarningMes::set_warningtime(::google::protobuf::int64 value) {
  
  warningtime_ = value;
  // @@protoc_insertion_point(field_set:hgWarningMes.WarningTime)
}

// optional .hgWarningType WarningType = 11;
inline void hgWarningMes::clear_warningtype() {
  warningtype_ = 0;
}
inline ::hgWarningType hgWarningMes::warningtype() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.WarningType)
  return static_cast< ::hgWarningType >(warningtype_);
}
inline void hgWarningMes::set_warningtype(::hgWarningType value) {
  
  warningtype_ = value;
  // @@protoc_insertion_point(field_set:hgWarningMes.WarningType)
}

// optional string TargetMMSI = 12;
inline void hgWarningMes::clear_targetmmsi() {
  targetmmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgWarningMes::targetmmsi() const {
  // @@protoc_insertion_point(field_get:hgWarningMes.TargetMMSI)
  return targetmmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_targetmmsi(const ::std::string& value) {
  
  targetmmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgWarningMes.TargetMMSI)
}
inline void hgWarningMes::set_targetmmsi(const char* value) {
  
  targetmmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgWarningMes.TargetMMSI)
}
inline void hgWarningMes::set_targetmmsi(const char* value, size_t size) {
  
  targetmmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgWarningMes.TargetMMSI)
}
inline ::std::string* hgWarningMes::mutable_targetmmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgWarningMes.TargetMMSI)
  return targetmmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgWarningMes::release_targetmmsi() {
  // @@protoc_insertion_point(field_release:hgWarningMes.TargetMMSI)
  
  return targetmmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgWarningMes::set_allocated_targetmmsi(::std::string* targetmmsi) {
  if (targetmmsi != NULL) {
    
  } else {
    
  }
  targetmmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), targetmmsi);
  // @@protoc_insertion_point(field_set_allocated:hgWarningMes.TargetMMSI)
}

inline const hgWarningMes* hgWarningMes::internal_default_instance() {
  return &hgWarningMes_default_instance_.get();
}
// -------------------------------------------------------------------

// WarningMessage

// optional string str = 1;
inline void WarningMessage::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WarningMessage::str() const {
  // @@protoc_insertion_point(field_get:WarningMessage.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WarningMessage::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:WarningMessage.str)
}
inline void WarningMessage::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WarningMessage.str)
}
inline void WarningMessage::set_str(const char* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WarningMessage.str)
}
inline ::std::string* WarningMessage::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:WarningMessage.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WarningMessage::release_str() {
  // @@protoc_insertion_point(field_release:WarningMessage.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WarningMessage::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:WarningMessage.str)
}

inline const WarningMessage* WarningMessage::internal_default_instance() {
  return &WarningMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::UserLayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UserLayerType>() {
  return ::UserLayerType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgWarningMes_2eproto__INCLUDED
