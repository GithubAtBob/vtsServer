// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_group_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_group_2eproto() {
  protobuf_AddDesc_group_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "group.proto");
  GOOGLE_CHECK(file != NULL);
  GroupRequest_descriptor_ = file->message_type(0);
  static const int GroupRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, grouptype_),
  };
  GroupRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupRequest_descriptor_,
      GroupRequest::internal_default_instance(),
      GroupRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRequest, _internal_metadata_));
  GroupRepsone_descriptor_ = file->message_type(1);
  static const int GroupRepsone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRepsone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRepsone, result_),
  };
  GroupRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupRepsone_descriptor_,
      GroupRepsone::internal_default_instance(),
      GroupRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_group_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupRequest_descriptor_, GroupRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupRepsone_descriptor_, GroupRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_group_2eproto() {
  GroupRequest_default_instance_.Shutdown();
  delete GroupRequest_reflection_;
  GroupRepsone_default_instance_.Shutdown();
  delete GroupRepsone_reflection_;
}

void protobuf_InitDefaults_group_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  GroupRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GroupRepsone_default_instance_.DefaultConstruct();
  GroupRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  GroupRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_group_2eproto_once_);
void protobuf_InitDefaults_group_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_group_2eproto_once_,
                 &protobuf_InitDefaults_group_2eproto_impl);
}
void protobuf_AddDesc_group_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_group_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013group.proto\"X\n\014GroupRequest\022\014\n\004type\030\001 "
    "\001(\005\022\n\n\002ID\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\r\n\005power\030\004"
    " \001(\t\022\021\n\tgrouptype\030\005 \001(\005\",\n\014GroupRepsone\022"
    "\014\n\004type\030\001 \001(\005\022\016\n\006result\030\002 \001(\tb\006proto3", 157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "group.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_group_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_group_2eproto_once_);
void protobuf_AddDesc_group_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_group_2eproto_once_,
                 &protobuf_AddDesc_group_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_group_2eproto {
  StaticDescriptorInitializer_group_2eproto() {
    protobuf_AddDesc_group_2eproto();
  }
} static_descriptor_initializer_group_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupRequest::kTypeFieldNumber;
const int GroupRequest::kIDFieldNumber;
const int GroupRequest::kNameFieldNumber;
const int GroupRequest::kPowerFieldNumber;
const int GroupRequest::kGrouptypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupRequest::GroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_group_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupRequest)
}

void GroupRequest::InitAsDefaultInstance() {
}

GroupRequest::GroupRequest(const GroupRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GroupRequest)
}

void GroupRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&grouptype_) -
    reinterpret_cast<char*>(&type_) + sizeof(grouptype_));
  _cached_size_ = 0;
}

GroupRequest::~GroupRequest() {
  // @@protoc_insertion_point(destructor:GroupRequest)
  SharedDtor();
}

void GroupRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupRequest_descriptor_;
}

const GroupRequest& GroupRequest::default_instance() {
  protobuf_InitDefaults_group_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GroupRequest> GroupRequest_default_instance_;

GroupRequest* GroupRequest::New(::google::protobuf::Arena* arena) const {
  GroupRequest* n = new GroupRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GroupRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GroupRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, grouptype_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool GroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (tag == 18) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GroupRequest.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GroupRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_power;
        break;
      }

      // optional string power = 4;
      case 4: {
        if (tag == 34) {
         parse_power:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_power()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->power().data(), this->power().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GroupRequest.power"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_grouptype;
        break;
      }

      // optional int32 grouptype = 5;
      case 5: {
        if (tag == 40) {
         parse_grouptype:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GroupRequest)
  return false;
#undef DO_
}

void GroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GroupRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string power = 4;
  if (this->power().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->power().data(), this->power().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRequest.power");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->power(), output);
  }

  // optional int32 grouptype = 5;
  if (this->grouptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grouptype(), output);
  }

  // @@protoc_insertion_point(serialize_end:GroupRequest)
}

::google::protobuf::uint8* GroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GroupRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string power = 4;
  if (this->power().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->power().data(), this->power().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRequest.power");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->power(), target);
  }

  // optional int32 grouptype = 5;
  if (this->grouptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grouptype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GroupRequest)
  return target;
}

size_t GroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupRequest)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string power = 4;
  if (this->power().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->power());
  }

  // optional int32 grouptype = 5;
  if (this->grouptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->grouptype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupRequest)
    UnsafeMergeFrom(*source);
  }
}

void GroupRequest::MergeFrom(const GroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GroupRequest::UnsafeMergeFrom(const GroupRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.power().size() > 0) {

    power_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.power_);
  }
  if (from.grouptype() != 0) {
    set_grouptype(from.grouptype());
  }
}

void GroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRequest::CopyFrom(const GroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GroupRequest::IsInitialized() const {

  return true;
}

void GroupRequest::Swap(GroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupRequest::InternalSwap(GroupRequest* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  power_.Swap(&other->power_);
  std::swap(grouptype_, other->grouptype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupRequest_descriptor_;
  metadata.reflection = GroupRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupRequest

// optional int32 type = 1;
void GroupRequest::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 GroupRequest::type() const {
  // @@protoc_insertion_point(field_get:GroupRequest.type)
  return type_;
}
void GroupRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:GroupRequest.type)
}

// optional string ID = 2;
void GroupRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupRequest::id() const {
  // @@protoc_insertion_point(field_get:GroupRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GroupRequest.ID)
}
void GroupRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupRequest.ID)
}
void GroupRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupRequest.ID)
}
::std::string* GroupRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:GroupRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:GroupRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:GroupRequest.ID)
}

// optional string name = 3;
void GroupRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupRequest::name() const {
  // @@protoc_insertion_point(field_get:GroupRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GroupRequest.name)
}
void GroupRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupRequest.name)
}
void GroupRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupRequest.name)
}
::std::string* GroupRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:GroupRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupRequest::release_name() {
  // @@protoc_insertion_point(field_release:GroupRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:GroupRequest.name)
}

// optional string power = 4;
void GroupRequest::clear_power() {
  power_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupRequest::power() const {
  // @@protoc_insertion_point(field_get:GroupRequest.power)
  return power_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRequest::set_power(const ::std::string& value) {
  
  power_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GroupRequest.power)
}
void GroupRequest::set_power(const char* value) {
  
  power_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupRequest.power)
}
void GroupRequest::set_power(const char* value, size_t size) {
  
  power_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupRequest.power)
}
::std::string* GroupRequest::mutable_power() {
  
  // @@protoc_insertion_point(field_mutable:GroupRequest.power)
  return power_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupRequest::release_power() {
  // @@protoc_insertion_point(field_release:GroupRequest.power)
  
  return power_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRequest::set_allocated_power(::std::string* power) {
  if (power != NULL) {
    
  } else {
    
  }
  power_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), power);
  // @@protoc_insertion_point(field_set_allocated:GroupRequest.power)
}

// optional int32 grouptype = 5;
void GroupRequest::clear_grouptype() {
  grouptype_ = 0;
}
::google::protobuf::int32 GroupRequest::grouptype() const {
  // @@protoc_insertion_point(field_get:GroupRequest.grouptype)
  return grouptype_;
}
void GroupRequest::set_grouptype(::google::protobuf::int32 value) {
  
  grouptype_ = value;
  // @@protoc_insertion_point(field_set:GroupRequest.grouptype)
}

inline const GroupRequest* GroupRequest::internal_default_instance() {
  return &GroupRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupRepsone::kTypeFieldNumber;
const int GroupRepsone::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupRepsone::GroupRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_group_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:GroupRepsone)
}

void GroupRepsone::InitAsDefaultInstance() {
}

GroupRepsone::GroupRepsone(const GroupRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GroupRepsone)
}

void GroupRepsone::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

GroupRepsone::~GroupRepsone() {
  // @@protoc_insertion_point(destructor:GroupRepsone)
  SharedDtor();
}

void GroupRepsone::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupRepsone_descriptor_;
}

const GroupRepsone& GroupRepsone::default_instance() {
  protobuf_InitDefaults_group_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GroupRepsone> GroupRepsone_default_instance_;

GroupRepsone* GroupRepsone::New(::google::protobuf::Arena* arena) const {
  GroupRepsone* n = new GroupRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:GroupRepsone)
  type_ = 0;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GroupRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GroupRepsone.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GroupRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GroupRepsone)
  return false;
#undef DO_
}

void GroupRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GroupRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRepsone.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:GroupRepsone)
}

::google::protobuf::uint8* GroupRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GroupRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GroupRepsone.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GroupRepsone)
  return target;
}

size_t GroupRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GroupRepsone)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GroupRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GroupRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GroupRepsone)
    UnsafeMergeFrom(*source);
  }
}

void GroupRepsone::MergeFrom(const GroupRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GroupRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GroupRepsone::UnsafeMergeFrom(const GroupRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void GroupRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GroupRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupRepsone::CopyFrom(const GroupRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GroupRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GroupRepsone::IsInitialized() const {

  return true;
}

void GroupRepsone::Swap(GroupRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupRepsone::InternalSwap(GroupRepsone* other) {
  std::swap(type_, other->type_);
  result_.Swap(&other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupRepsone_descriptor_;
  metadata.reflection = GroupRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupRepsone

// optional int32 type = 1;
void GroupRepsone::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 GroupRepsone::type() const {
  // @@protoc_insertion_point(field_get:GroupRepsone.type)
  return type_;
}
void GroupRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:GroupRepsone.type)
}

// optional string result = 2;
void GroupRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupRepsone::result() const {
  // @@protoc_insertion_point(field_get:GroupRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GroupRepsone.result)
}
void GroupRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GroupRepsone.result)
}
void GroupRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GroupRepsone.result)
}
::std::string* GroupRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:GroupRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupRepsone::release_result() {
  // @@protoc_insertion_point(field_release:GroupRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:GroupRepsone.result)
}

inline const GroupRepsone* GroupRepsone::internal_default_instance() {
  return &GroupRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
