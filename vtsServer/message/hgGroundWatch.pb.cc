// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgGroundWatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgGroundWatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgGroundWatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgGroundWatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgGroundWatchRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgGroundWatchRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgGroundWatch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgGroundWatch_2eproto() {
  protobuf_AddDesc_hgGroundWatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgGroundWatch.proto");
  GOOGLE_CHECK(file != NULL);
  hgGroundWatch_descriptor_ = file->message_type(0);
  static const int hgGroundWatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGroundWatch, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGroundWatch, groundwatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGroundWatch, grounddraught_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGroundWatch, keelclearance_),
  };
  hgGroundWatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgGroundWatch_descriptor_,
      hgGroundWatch::internal_default_instance(),
      hgGroundWatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgGroundWatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGroundWatch, _internal_metadata_));
  hgGroundWatchRepsone_descriptor_ = file->message_type(1);
  static const int hgGroundWatchRepsone_offsets_[1] = {
  };
  hgGroundWatchRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgGroundWatchRepsone_descriptor_,
      hgGroundWatchRepsone::internal_default_instance(),
      hgGroundWatchRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgGroundWatchRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGroundWatchRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgGroundWatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgGroundWatch_descriptor_, hgGroundWatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgGroundWatchRepsone_descriptor_, hgGroundWatchRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgGroundWatch_2eproto() {
  hgGroundWatch_default_instance_.Shutdown();
  delete hgGroundWatch_reflection_;
  hgGroundWatchRepsone_default_instance_.Shutdown();
  delete hgGroundWatchRepsone_reflection_;
}

void protobuf_InitDefaults_hgGroundWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgGroundWatch_default_instance_.DefaultConstruct();
  hgGroundWatchRepsone_default_instance_.DefaultConstruct();
  hgGroundWatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgGroundWatchRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgGroundWatch_2eproto_once_);
void protobuf_InitDefaults_hgGroundWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgGroundWatch_2eproto_once_,
                 &protobuf_InitDefaults_hgGroundWatch_2eproto_impl);
}
void protobuf_AddDesc_hgGroundWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgGroundWatch_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023hgGroundWatch.proto\"`\n\rhgGroundWatch\022\014"
    "\n\004MMSI\030\001 \001(\t\022\023\n\013GroundWatch\030\002 \001(\010\022\025\n\rGro"
    "undDraught\030\003 \001(\001\022\025\n\rKeelClearance\030\004 \001(\001\""
    "\026\n\024hgGroundWatchRepsoneb\006proto3", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgGroundWatch.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgGroundWatch_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgGroundWatch_2eproto_once_);
void protobuf_AddDesc_hgGroundWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgGroundWatch_2eproto_once_,
                 &protobuf_AddDesc_hgGroundWatch_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgGroundWatch_2eproto {
  StaticDescriptorInitializer_hgGroundWatch_2eproto() {
    protobuf_AddDesc_hgGroundWatch_2eproto();
  }
} static_descriptor_initializer_hgGroundWatch_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgGroundWatch::kMMSIFieldNumber;
const int hgGroundWatch::kGroundWatchFieldNumber;
const int hgGroundWatch::kGroundDraughtFieldNumber;
const int hgGroundWatch::kKeelClearanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgGroundWatch::hgGroundWatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgGroundWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgGroundWatch)
}

void hgGroundWatch::InitAsDefaultInstance() {
}

hgGroundWatch::hgGroundWatch(const hgGroundWatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgGroundWatch)
}

void hgGroundWatch::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&grounddraught_, 0, reinterpret_cast<char*>(&groundwatch_) -
    reinterpret_cast<char*>(&grounddraught_) + sizeof(groundwatch_));
  _cached_size_ = 0;
}

hgGroundWatch::~hgGroundWatch() {
  // @@protoc_insertion_point(destructor:hgGroundWatch)
  SharedDtor();
}

void hgGroundWatch::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgGroundWatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgGroundWatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgGroundWatch_descriptor_;
}

const hgGroundWatch& hgGroundWatch::default_instance() {
  protobuf_InitDefaults_hgGroundWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgGroundWatch> hgGroundWatch_default_instance_;

hgGroundWatch* hgGroundWatch::New(::google::protobuf::Arena* arena) const {
  hgGroundWatch* n = new hgGroundWatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgGroundWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:hgGroundWatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgGroundWatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgGroundWatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(grounddraught_, groundwatch_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgGroundWatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgGroundWatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgGroundWatch.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GroundWatch;
        break;
      }

      // optional bool GroundWatch = 2;
      case 2: {
        if (tag == 16) {
         parse_GroundWatch:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &groundwatch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_GroundDraught;
        break;
      }

      // optional double GroundDraught = 3;
      case 3: {
        if (tag == 25) {
         parse_GroundDraught:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grounddraught_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_KeelClearance;
        break;
      }

      // optional double KeelClearance = 4;
      case 4: {
        if (tag == 33) {
         parse_KeelClearance:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &keelclearance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgGroundWatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgGroundWatch)
  return false;
#undef DO_
}

void hgGroundWatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgGroundWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgGroundWatch.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool GroundWatch = 2;
  if (this->groundwatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->groundwatch(), output);
  }

  // optional double GroundDraught = 3;
  if (this->grounddraught() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->grounddraught(), output);
  }

  // optional double KeelClearance = 4;
  if (this->keelclearance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->keelclearance(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgGroundWatch)
}

::google::protobuf::uint8* hgGroundWatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgGroundWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgGroundWatch.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool GroundWatch = 2;
  if (this->groundwatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->groundwatch(), target);
  }

  // optional double GroundDraught = 3;
  if (this->grounddraught() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->grounddraught(), target);
  }

  // optional double KeelClearance = 4;
  if (this->keelclearance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->keelclearance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgGroundWatch)
  return target;
}

size_t hgGroundWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgGroundWatch)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool GroundWatch = 2;
  if (this->groundwatch() != 0) {
    total_size += 1 + 1;
  }

  // optional double GroundDraught = 3;
  if (this->grounddraught() != 0) {
    total_size += 1 + 8;
  }

  // optional double KeelClearance = 4;
  if (this->keelclearance() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgGroundWatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgGroundWatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgGroundWatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgGroundWatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgGroundWatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgGroundWatch)
    UnsafeMergeFrom(*source);
  }
}

void hgGroundWatch::MergeFrom(const hgGroundWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgGroundWatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgGroundWatch::UnsafeMergeFrom(const hgGroundWatch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.groundwatch() != 0) {
    set_groundwatch(from.groundwatch());
  }
  if (from.grounddraught() != 0) {
    set_grounddraught(from.grounddraught());
  }
  if (from.keelclearance() != 0) {
    set_keelclearance(from.keelclearance());
  }
}

void hgGroundWatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgGroundWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgGroundWatch::CopyFrom(const hgGroundWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgGroundWatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgGroundWatch::IsInitialized() const {

  return true;
}

void hgGroundWatch::Swap(hgGroundWatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgGroundWatch::InternalSwap(hgGroundWatch* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(groundwatch_, other->groundwatch_);
  std::swap(grounddraught_, other->grounddraught_);
  std::swap(keelclearance_, other->keelclearance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgGroundWatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgGroundWatch_descriptor_;
  metadata.reflection = hgGroundWatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgGroundWatch

// optional string MMSI = 1;
void hgGroundWatch::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgGroundWatch::mmsi() const {
  // @@protoc_insertion_point(field_get:hgGroundWatch.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgGroundWatch::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgGroundWatch.MMSI)
}
void hgGroundWatch::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgGroundWatch.MMSI)
}
void hgGroundWatch::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgGroundWatch.MMSI)
}
::std::string* hgGroundWatch::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgGroundWatch.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgGroundWatch::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgGroundWatch.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgGroundWatch::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgGroundWatch.MMSI)
}

// optional bool GroundWatch = 2;
void hgGroundWatch::clear_groundwatch() {
  groundwatch_ = false;
}
bool hgGroundWatch::groundwatch() const {
  // @@protoc_insertion_point(field_get:hgGroundWatch.GroundWatch)
  return groundwatch_;
}
void hgGroundWatch::set_groundwatch(bool value) {
  
  groundwatch_ = value;
  // @@protoc_insertion_point(field_set:hgGroundWatch.GroundWatch)
}

// optional double GroundDraught = 3;
void hgGroundWatch::clear_grounddraught() {
  grounddraught_ = 0;
}
double hgGroundWatch::grounddraught() const {
  // @@protoc_insertion_point(field_get:hgGroundWatch.GroundDraught)
  return grounddraught_;
}
void hgGroundWatch::set_grounddraught(double value) {
  
  grounddraught_ = value;
  // @@protoc_insertion_point(field_set:hgGroundWatch.GroundDraught)
}

// optional double KeelClearance = 4;
void hgGroundWatch::clear_keelclearance() {
  keelclearance_ = 0;
}
double hgGroundWatch::keelclearance() const {
  // @@protoc_insertion_point(field_get:hgGroundWatch.KeelClearance)
  return keelclearance_;
}
void hgGroundWatch::set_keelclearance(double value) {
  
  keelclearance_ = value;
  // @@protoc_insertion_point(field_set:hgGroundWatch.KeelClearance)
}

inline const hgGroundWatch* hgGroundWatch::internal_default_instance() {
  return &hgGroundWatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgGroundWatchRepsone::hgGroundWatchRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgGroundWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgGroundWatchRepsone)
}

void hgGroundWatchRepsone::InitAsDefaultInstance() {
}

hgGroundWatchRepsone::hgGroundWatchRepsone(const hgGroundWatchRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgGroundWatchRepsone)
}

void hgGroundWatchRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgGroundWatchRepsone::~hgGroundWatchRepsone() {
  // @@protoc_insertion_point(destructor:hgGroundWatchRepsone)
  SharedDtor();
}

void hgGroundWatchRepsone::SharedDtor() {
}

void hgGroundWatchRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgGroundWatchRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgGroundWatchRepsone_descriptor_;
}

const hgGroundWatchRepsone& hgGroundWatchRepsone::default_instance() {
  protobuf_InitDefaults_hgGroundWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgGroundWatchRepsone> hgGroundWatchRepsone_default_instance_;

hgGroundWatchRepsone* hgGroundWatchRepsone::New(::google::protobuf::Arena* arena) const {
  hgGroundWatchRepsone* n = new hgGroundWatchRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgGroundWatchRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgGroundWatchRepsone)
}

bool hgGroundWatchRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgGroundWatchRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgGroundWatchRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgGroundWatchRepsone)
  return false;
#undef DO_
}

void hgGroundWatchRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgGroundWatchRepsone)
  // @@protoc_insertion_point(serialize_end:hgGroundWatchRepsone)
}

::google::protobuf::uint8* hgGroundWatchRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgGroundWatchRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgGroundWatchRepsone)
  return target;
}

size_t hgGroundWatchRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgGroundWatchRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgGroundWatchRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgGroundWatchRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgGroundWatchRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgGroundWatchRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgGroundWatchRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgGroundWatchRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgGroundWatchRepsone::MergeFrom(const hgGroundWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgGroundWatchRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgGroundWatchRepsone::UnsafeMergeFrom(const hgGroundWatchRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgGroundWatchRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgGroundWatchRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgGroundWatchRepsone::CopyFrom(const hgGroundWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgGroundWatchRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgGroundWatchRepsone::IsInitialized() const {

  return true;
}

void hgGroundWatchRepsone::Swap(hgGroundWatchRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgGroundWatchRepsone::InternalSwap(hgGroundWatchRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgGroundWatchRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgGroundWatchRepsone_descriptor_;
  metadata.reflection = hgGroundWatchRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgGroundWatchRepsone

inline const hgGroundWatchRepsone* hgGroundWatchRepsone::internal_default_instance() {
  return &hgGroundWatchRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
