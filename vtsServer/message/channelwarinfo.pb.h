// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channelwarinfo.proto

#ifndef PROTOBUF_channelwarinfo_2eproto__INCLUDED
#define PROTOBUF_channelwarinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_channelwarinfo_2eproto();
void protobuf_InitDefaults_channelwarinfo_2eproto();
void protobuf_AssignDesc_channelwarinfo_2eproto();
void protobuf_ShutdownFile_channelwarinfo_2eproto();

class ChannelWarInfo;

// ===================================================================

class ChannelWarInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChannelWarInfo) */ {
 public:
  ChannelWarInfo();
  virtual ~ChannelWarInfo();

  ChannelWarInfo(const ChannelWarInfo& from);

  inline ChannelWarInfo& operator=(const ChannelWarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelWarInfo& default_instance();

  static const ChannelWarInfo* internal_default_instance();

  void Swap(ChannelWarInfo* other);

  // implements Message ----------------------------------------------

  inline ChannelWarInfo* New() const { return New(NULL); }

  ChannelWarInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelWarInfo& from);
  void MergeFrom(const ChannelWarInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelWarInfo* other);
  void UnsafeMergeFrom(const ChannelWarInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double Depth = 1;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  double depth() const;
  void set_depth(double value);

  // optional double MinBorder = 2;
  void clear_minborder();
  static const int kMinBorderFieldNumber = 2;
  double minborder() const;
  void set_minborder(double value);

  // optional double MaxBorder = 3;
  void clear_maxborder();
  static const int kMaxBorderFieldNumber = 3;
  double maxborder() const;
  void set_maxborder(double value);

  // optional double MinAngle = 4;
  void clear_minangle();
  static const int kMinAngleFieldNumber = 4;
  double minangle() const;
  void set_minangle(double value);

  // optional double MaxAngle = 5;
  void clear_maxangle();
  static const int kMaxAngleFieldNumber = 5;
  double maxangle() const;
  void set_maxangle(double value);

  // optional double MaxLong = 6;
  void clear_maxlong();
  static const int kMaxLongFieldNumber = 6;
  double maxlong() const;
  void set_maxlong(double value);

  // optional string EnterType = 7;
  void clear_entertype();
  static const int kEnterTypeFieldNumber = 7;
  const ::std::string& entertype() const;
  void set_entertype(const ::std::string& value);
  void set_entertype(const char* value);
  void set_entertype(const char* value, size_t size);
  ::std::string* mutable_entertype();
  ::std::string* release_entertype();
  void set_allocated_entertype(::std::string* entertype);

  // optional string fCourse = 8;
  void clear_fcourse();
  static const int kFCourseFieldNumber = 8;
  const ::std::string& fcourse() const;
  void set_fcourse(const ::std::string& value);
  void set_fcourse(const char* value);
  void set_fcourse(const char* value, size_t size);
  ::std::string* mutable_fcourse();
  ::std::string* release_fcourse();
  void set_allocated_fcourse(::std::string* fcourse);

  // optional double fAngle = 9;
  void clear_fangle();
  static const int kFAngleFieldNumber = 9;
  double fangle() const;
  void set_fangle(double value);

  // optional double fMinSpeed = 10;
  void clear_fminspeed();
  static const int kFMinSpeedFieldNumber = 10;
  double fminspeed() const;
  void set_fminspeed(double value);

  // optional double fMaxSpeed = 11;
  void clear_fmaxspeed();
  static const int kFMaxSpeedFieldNumber = 11;
  double fmaxspeed() const;
  void set_fmaxspeed(double value);

  // optional double fMinSpeedTime = 12;
  void clear_fminspeedtime();
  static const int kFMinSpeedTimeFieldNumber = 12;
  double fminspeedtime() const;
  void set_fminspeedtime(double value);

  // optional double fMaxSpeedTime = 13;
  void clear_fmaxspeedtime();
  static const int kFMaxSpeedTimeFieldNumber = 13;
  double fmaxspeedtime() const;
  void set_fmaxspeedtime(double value);

  // optional double fEnDist = 14;
  void clear_fendist();
  static const int kFEnDistFieldNumber = 14;
  double fendist() const;
  void set_fendist(double value);

  // optional double fDisEnDist = 15;
  void clear_fdisendist();
  static const int kFDisEnDistFieldNumber = 15;
  double fdisendist() const;
  void set_fdisendist(double value);

  // optional double fSailEnDist = 16;
  void clear_fsailendist();
  static const int kFSailEnDistFieldNumber = 16;
  double fsailendist() const;
  void set_fsailendist(double value);

  // optional string bCourse = 17;
  void clear_bcourse();
  static const int kBCourseFieldNumber = 17;
  const ::std::string& bcourse() const;
  void set_bcourse(const ::std::string& value);
  void set_bcourse(const char* value);
  void set_bcourse(const char* value, size_t size);
  ::std::string* mutable_bcourse();
  ::std::string* release_bcourse();
  void set_allocated_bcourse(::std::string* bcourse);

  // optional double bAngle = 18;
  void clear_bangle();
  static const int kBAngleFieldNumber = 18;
  double bangle() const;
  void set_bangle(double value);

  // optional double bMinSpeed = 19;
  void clear_bminspeed();
  static const int kBMinSpeedFieldNumber = 19;
  double bminspeed() const;
  void set_bminspeed(double value);

  // optional double bMaxSpeed = 20;
  void clear_bmaxspeed();
  static const int kBMaxSpeedFieldNumber = 20;
  double bmaxspeed() const;
  void set_bmaxspeed(double value);

  // optional double bMinSpeedTime = 21;
  void clear_bminspeedtime();
  static const int kBMinSpeedTimeFieldNumber = 21;
  double bminspeedtime() const;
  void set_bminspeedtime(double value);

  // optional double bMaxSpeedTime = 22;
  void clear_bmaxspeedtime();
  static const int kBMaxSpeedTimeFieldNumber = 22;
  double bmaxspeedtime() const;
  void set_bmaxspeedtime(double value);

  // optional double bEnDist = 23;
  void clear_bendist();
  static const int kBEnDistFieldNumber = 23;
  double bendist() const;
  void set_bendist(double value);

  // optional double bDisEnDist = 24;
  void clear_bdisendist();
  static const int kBDisEnDistFieldNumber = 24;
  double bdisendist() const;
  void set_bdisendist(double value);

  // optional double bSailEnDist = 25;
  void clear_bsailendist();
  static const int kBSailEnDistFieldNumber = 25;
  double bsailendist() const;
  void set_bsailendist(double value);

  // @@protoc_insertion_point(class_scope:ChannelWarInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr entertype_;
  ::google::protobuf::internal::ArenaStringPtr fcourse_;
  ::google::protobuf::internal::ArenaStringPtr bcourse_;
  double depth_;
  double minborder_;
  double maxborder_;
  double minangle_;
  double maxangle_;
  double maxlong_;
  double fangle_;
  double fminspeed_;
  double fmaxspeed_;
  double fminspeedtime_;
  double fmaxspeedtime_;
  double fendist_;
  double fdisendist_;
  double fsailendist_;
  double bangle_;
  double bminspeed_;
  double bmaxspeed_;
  double bminspeedtime_;
  double bmaxspeedtime_;
  double bendist_;
  double bdisendist_;
  double bsailendist_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channelwarinfo_2eproto_impl();
  friend void  protobuf_AddDesc_channelwarinfo_2eproto_impl();
  friend void protobuf_AssignDesc_channelwarinfo_2eproto();
  friend void protobuf_ShutdownFile_channelwarinfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChannelWarInfo> ChannelWarInfo_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelWarInfo

// optional double Depth = 1;
inline void ChannelWarInfo::clear_depth() {
  depth_ = 0;
}
inline double ChannelWarInfo::depth() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.Depth)
  return depth_;
}
inline void ChannelWarInfo::set_depth(double value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.Depth)
}

// optional double MinBorder = 2;
inline void ChannelWarInfo::clear_minborder() {
  minborder_ = 0;
}
inline double ChannelWarInfo::minborder() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MinBorder)
  return minborder_;
}
inline void ChannelWarInfo::set_minborder(double value) {
  
  minborder_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MinBorder)
}

// optional double MaxBorder = 3;
inline void ChannelWarInfo::clear_maxborder() {
  maxborder_ = 0;
}
inline double ChannelWarInfo::maxborder() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MaxBorder)
  return maxborder_;
}
inline void ChannelWarInfo::set_maxborder(double value) {
  
  maxborder_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MaxBorder)
}

// optional double MinAngle = 4;
inline void ChannelWarInfo::clear_minangle() {
  minangle_ = 0;
}
inline double ChannelWarInfo::minangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MinAngle)
  return minangle_;
}
inline void ChannelWarInfo::set_minangle(double value) {
  
  minangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MinAngle)
}

// optional double MaxAngle = 5;
inline void ChannelWarInfo::clear_maxangle() {
  maxangle_ = 0;
}
inline double ChannelWarInfo::maxangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MaxAngle)
  return maxangle_;
}
inline void ChannelWarInfo::set_maxangle(double value) {
  
  maxangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MaxAngle)
}

// optional double MaxLong = 6;
inline void ChannelWarInfo::clear_maxlong() {
  maxlong_ = 0;
}
inline double ChannelWarInfo::maxlong() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.MaxLong)
  return maxlong_;
}
inline void ChannelWarInfo::set_maxlong(double value) {
  
  maxlong_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.MaxLong)
}

// optional string EnterType = 7;
inline void ChannelWarInfo::clear_entertype() {
  entertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelWarInfo::entertype() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.EnterType)
  return entertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelWarInfo::set_entertype(const ::std::string& value) {
  
  entertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelWarInfo.EnterType)
}
inline void ChannelWarInfo::set_entertype(const char* value) {
  
  entertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelWarInfo.EnterType)
}
inline void ChannelWarInfo::set_entertype(const char* value, size_t size) {
  
  entertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelWarInfo.EnterType)
}
inline ::std::string* ChannelWarInfo::mutable_entertype() {
  
  // @@protoc_insertion_point(field_mutable:ChannelWarInfo.EnterType)
  return entertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelWarInfo::release_entertype() {
  // @@protoc_insertion_point(field_release:ChannelWarInfo.EnterType)
  
  return entertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelWarInfo::set_allocated_entertype(::std::string* entertype) {
  if (entertype != NULL) {
    
  } else {
    
  }
  entertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entertype);
  // @@protoc_insertion_point(field_set_allocated:ChannelWarInfo.EnterType)
}

// optional string fCourse = 8;
inline void ChannelWarInfo::clear_fcourse() {
  fcourse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelWarInfo::fcourse() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fCourse)
  return fcourse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelWarInfo::set_fcourse(const ::std::string& value) {
  
  fcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fCourse)
}
inline void ChannelWarInfo::set_fcourse(const char* value) {
  
  fcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelWarInfo.fCourse)
}
inline void ChannelWarInfo::set_fcourse(const char* value, size_t size) {
  
  fcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelWarInfo.fCourse)
}
inline ::std::string* ChannelWarInfo::mutable_fcourse() {
  
  // @@protoc_insertion_point(field_mutable:ChannelWarInfo.fCourse)
  return fcourse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelWarInfo::release_fcourse() {
  // @@protoc_insertion_point(field_release:ChannelWarInfo.fCourse)
  
  return fcourse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelWarInfo::set_allocated_fcourse(::std::string* fcourse) {
  if (fcourse != NULL) {
    
  } else {
    
  }
  fcourse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fcourse);
  // @@protoc_insertion_point(field_set_allocated:ChannelWarInfo.fCourse)
}

// optional double fAngle = 9;
inline void ChannelWarInfo::clear_fangle() {
  fangle_ = 0;
}
inline double ChannelWarInfo::fangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fAngle)
  return fangle_;
}
inline void ChannelWarInfo::set_fangle(double value) {
  
  fangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fAngle)
}

// optional double fMinSpeed = 10;
inline void ChannelWarInfo::clear_fminspeed() {
  fminspeed_ = 0;
}
inline double ChannelWarInfo::fminspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMinSpeed)
  return fminspeed_;
}
inline void ChannelWarInfo::set_fminspeed(double value) {
  
  fminspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMinSpeed)
}

// optional double fMaxSpeed = 11;
inline void ChannelWarInfo::clear_fmaxspeed() {
  fmaxspeed_ = 0;
}
inline double ChannelWarInfo::fmaxspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMaxSpeed)
  return fmaxspeed_;
}
inline void ChannelWarInfo::set_fmaxspeed(double value) {
  
  fmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMaxSpeed)
}

// optional double fMinSpeedTime = 12;
inline void ChannelWarInfo::clear_fminspeedtime() {
  fminspeedtime_ = 0;
}
inline double ChannelWarInfo::fminspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMinSpeedTime)
  return fminspeedtime_;
}
inline void ChannelWarInfo::set_fminspeedtime(double value) {
  
  fminspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMinSpeedTime)
}

// optional double fMaxSpeedTime = 13;
inline void ChannelWarInfo::clear_fmaxspeedtime() {
  fmaxspeedtime_ = 0;
}
inline double ChannelWarInfo::fmaxspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fMaxSpeedTime)
  return fmaxspeedtime_;
}
inline void ChannelWarInfo::set_fmaxspeedtime(double value) {
  
  fmaxspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fMaxSpeedTime)
}

// optional double fEnDist = 14;
inline void ChannelWarInfo::clear_fendist() {
  fendist_ = 0;
}
inline double ChannelWarInfo::fendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fEnDist)
  return fendist_;
}
inline void ChannelWarInfo::set_fendist(double value) {
  
  fendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fEnDist)
}

// optional double fDisEnDist = 15;
inline void ChannelWarInfo::clear_fdisendist() {
  fdisendist_ = 0;
}
inline double ChannelWarInfo::fdisendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fDisEnDist)
  return fdisendist_;
}
inline void ChannelWarInfo::set_fdisendist(double value) {
  
  fdisendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fDisEnDist)
}

// optional double fSailEnDist = 16;
inline void ChannelWarInfo::clear_fsailendist() {
  fsailendist_ = 0;
}
inline double ChannelWarInfo::fsailendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.fSailEnDist)
  return fsailendist_;
}
inline void ChannelWarInfo::set_fsailendist(double value) {
  
  fsailendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.fSailEnDist)
}

// optional string bCourse = 17;
inline void ChannelWarInfo::clear_bcourse() {
  bcourse_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelWarInfo::bcourse() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bCourse)
  return bcourse_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelWarInfo::set_bcourse(const ::std::string& value) {
  
  bcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bCourse)
}
inline void ChannelWarInfo::set_bcourse(const char* value) {
  
  bcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelWarInfo.bCourse)
}
inline void ChannelWarInfo::set_bcourse(const char* value, size_t size) {
  
  bcourse_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelWarInfo.bCourse)
}
inline ::std::string* ChannelWarInfo::mutable_bcourse() {
  
  // @@protoc_insertion_point(field_mutable:ChannelWarInfo.bCourse)
  return bcourse_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelWarInfo::release_bcourse() {
  // @@protoc_insertion_point(field_release:ChannelWarInfo.bCourse)
  
  return bcourse_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelWarInfo::set_allocated_bcourse(::std::string* bcourse) {
  if (bcourse != NULL) {
    
  } else {
    
  }
  bcourse_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bcourse);
  // @@protoc_insertion_point(field_set_allocated:ChannelWarInfo.bCourse)
}

// optional double bAngle = 18;
inline void ChannelWarInfo::clear_bangle() {
  bangle_ = 0;
}
inline double ChannelWarInfo::bangle() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bAngle)
  return bangle_;
}
inline void ChannelWarInfo::set_bangle(double value) {
  
  bangle_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bAngle)
}

// optional double bMinSpeed = 19;
inline void ChannelWarInfo::clear_bminspeed() {
  bminspeed_ = 0;
}
inline double ChannelWarInfo::bminspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMinSpeed)
  return bminspeed_;
}
inline void ChannelWarInfo::set_bminspeed(double value) {
  
  bminspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMinSpeed)
}

// optional double bMaxSpeed = 20;
inline void ChannelWarInfo::clear_bmaxspeed() {
  bmaxspeed_ = 0;
}
inline double ChannelWarInfo::bmaxspeed() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMaxSpeed)
  return bmaxspeed_;
}
inline void ChannelWarInfo::set_bmaxspeed(double value) {
  
  bmaxspeed_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMaxSpeed)
}

// optional double bMinSpeedTime = 21;
inline void ChannelWarInfo::clear_bminspeedtime() {
  bminspeedtime_ = 0;
}
inline double ChannelWarInfo::bminspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMinSpeedTime)
  return bminspeedtime_;
}
inline void ChannelWarInfo::set_bminspeedtime(double value) {
  
  bminspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMinSpeedTime)
}

// optional double bMaxSpeedTime = 22;
inline void ChannelWarInfo::clear_bmaxspeedtime() {
  bmaxspeedtime_ = 0;
}
inline double ChannelWarInfo::bmaxspeedtime() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bMaxSpeedTime)
  return bmaxspeedtime_;
}
inline void ChannelWarInfo::set_bmaxspeedtime(double value) {
  
  bmaxspeedtime_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bMaxSpeedTime)
}

// optional double bEnDist = 23;
inline void ChannelWarInfo::clear_bendist() {
  bendist_ = 0;
}
inline double ChannelWarInfo::bendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bEnDist)
  return bendist_;
}
inline void ChannelWarInfo::set_bendist(double value) {
  
  bendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bEnDist)
}

// optional double bDisEnDist = 24;
inline void ChannelWarInfo::clear_bdisendist() {
  bdisendist_ = 0;
}
inline double ChannelWarInfo::bdisendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bDisEnDist)
  return bdisendist_;
}
inline void ChannelWarInfo::set_bdisendist(double value) {
  
  bdisendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bDisEnDist)
}

// optional double bSailEnDist = 25;
inline void ChannelWarInfo::clear_bsailendist() {
  bsailendist_ = 0;
}
inline double ChannelWarInfo::bsailendist() const {
  // @@protoc_insertion_point(field_get:ChannelWarInfo.bSailEnDist)
  return bsailendist_;
}
inline void ChannelWarInfo::set_bsailendist(double value) {
  
  bsailendist_ = value;
  // @@protoc_insertion_point(field_set:ChannelWarInfo.bSailEnDist)
}

inline const ChannelWarInfo* ChannelWarInfo::internal_default_instance() {
  return &ChannelWarInfo_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channelwarinfo_2eproto__INCLUDED
