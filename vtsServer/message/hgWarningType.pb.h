// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgWarningType.proto

#ifndef PROTOBUF_hgWarningType_2eproto__INCLUDED
#define PROTOBUF_hgWarningType_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgWarningType_2eproto();
void protobuf_InitDefaults_hgWarningType_2eproto();
void protobuf_AssignDesc_hgWarningType_2eproto();
void protobuf_ShutdownFile_hgWarningType_2eproto();


enum hgWarningType {
  Meaningless = 0,
  OverallCollision = 1,
  PolygonCollision = 2,
  SectorCollision = 3,
  CircleCollision = 4,
  AnchorAreaWarn = 5,
  ClubbingWarn = 6,
  DraggingWarn = 7,
  AnchorReservWarn = 8,
  BerthWatchWarn = 9,
  CollisionWatchWarn = 10,
  DomainWatchWarn = 11,
  GroundWatchWarn = 12,
  ChannelWarn = 13,
  ReportAreaWarn = 14,
  ReportTimeWarn = 15,
  EarlistWarn = 16,
  LatestWarn = 17,
  MinSpeedWarn = 18,
  MaxSpeedWarn = 19,
  TurnCircleWarn = 20,
  MovementEndWarn = 21,
  EarlyWarning = 22,
  hgWarningType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  hgWarningType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool hgWarningType_IsValid(int value);
const hgWarningType hgWarningType_MIN = Meaningless;
const hgWarningType hgWarningType_MAX = EarlyWarning;
const int hgWarningType_ARRAYSIZE = hgWarningType_MAX + 1;

const ::google::protobuf::EnumDescriptor* hgWarningType_descriptor();
inline const ::std::string& hgWarningType_Name(hgWarningType value) {
  return ::google::protobuf::internal::NameOfEnum(
    hgWarningType_descriptor(), value);
}
inline bool hgWarningType_Parse(
    const ::std::string& name, hgWarningType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hgWarningType>(
    hgWarningType_descriptor(), name, value);
}
enum hgWarningPriority {
  NoRisk = 0,
  PriorityRed = 1,
  hgWarningPriority_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  hgWarningPriority_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool hgWarningPriority_IsValid(int value);
const hgWarningPriority hgWarningPriority_MIN = NoRisk;
const hgWarningPriority hgWarningPriority_MAX = PriorityRed;
const int hgWarningPriority_ARRAYSIZE = hgWarningPriority_MAX + 1;

const ::google::protobuf::EnumDescriptor* hgWarningPriority_descriptor();
inline const ::std::string& hgWarningPriority_Name(hgWarningPriority value) {
  return ::google::protobuf::internal::NameOfEnum(
    hgWarningPriority_descriptor(), value);
}
inline bool hgWarningPriority_Parse(
    const ::std::string& name, hgWarningPriority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hgWarningPriority>(
    hgWarningPriority_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hgWarningType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hgWarningType>() {
  return ::hgWarningType_descriptor();
}
template <> struct is_proto_enum< ::hgWarningPriority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hgWarningPriority>() {
  return ::hgWarningPriority_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgWarningType_2eproto__INCLUDED
