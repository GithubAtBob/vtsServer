// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgCPA.proto

#ifndef PROTOBUF_hgCPA_2eproto__INCLUDED
#define PROTOBUF_hgCPA_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgCPA_2eproto();
void protobuf_InitDefaults_hgCPA_2eproto();
void protobuf_AssignDesc_hgCPA_2eproto();
void protobuf_ShutdownFile_hgCPA_2eproto();

class hgCPA;
class hgCPARepsone;

// ===================================================================

class hgCPA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgCPA) */ {
 public:
  hgCPA();
  virtual ~hgCPA();

  hgCPA(const hgCPA& from);

  inline hgCPA& operator=(const hgCPA& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgCPA& default_instance();

  static const hgCPA* internal_default_instance();

  void Swap(hgCPA* other);

  // implements Message ----------------------------------------------

  inline hgCPA* New() const { return New(NULL); }

  hgCPA* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgCPA& from);
  void MergeFrom(const hgCPA& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgCPA* other);
  void UnsafeMergeFrom(const hgCPA& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MMSI = 1;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 1;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional double OwnLat = 2;
  void clear_ownlat();
  static const int kOwnLatFieldNumber = 2;
  double ownlat() const;
  void set_ownlat(double value);

  // optional double OwnLon = 3;
  void clear_ownlon();
  static const int kOwnLonFieldNumber = 3;
  double ownlon() const;
  void set_ownlon(double value);

  // optional double OwnSog = 4;
  void clear_ownsog();
  static const int kOwnSogFieldNumber = 4;
  double ownsog() const;
  void set_ownsog(double value);

  // optional double OwnCog = 5;
  void clear_owncog();
  static const int kOwnCogFieldNumber = 5;
  double owncog() const;
  void set_owncog(double value);

  // optional double TargetLat = 6;
  void clear_targetlat();
  static const int kTargetLatFieldNumber = 6;
  double targetlat() const;
  void set_targetlat(double value);

  // optional double TargetLon = 7;
  void clear_targetlon();
  static const int kTargetLonFieldNumber = 7;
  double targetlon() const;
  void set_targetlon(double value);

  // optional double TargetSog = 8;
  void clear_targetsog();
  static const int kTargetSogFieldNumber = 8;
  double targetsog() const;
  void set_targetsog(double value);

  // optional double TargetCog = 9;
  void clear_targetcog();
  static const int kTargetCogFieldNumber = 9;
  double targetcog() const;
  void set_targetcog(double value);

  // @@protoc_insertion_point(class_scope:hgCPA)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  double ownlat_;
  double ownlon_;
  double ownsog_;
  double owncog_;
  double targetlat_;
  double targetlon_;
  double targetsog_;
  double targetcog_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgCPA_2eproto_impl();
  friend void  protobuf_AddDesc_hgCPA_2eproto_impl();
  friend void protobuf_AssignDesc_hgCPA_2eproto();
  friend void protobuf_ShutdownFile_hgCPA_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgCPA> hgCPA_default_instance_;

// -------------------------------------------------------------------

class hgCPARepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgCPARepsone) */ {
 public:
  hgCPARepsone();
  virtual ~hgCPARepsone();

  hgCPARepsone(const hgCPARepsone& from);

  inline hgCPARepsone& operator=(const hgCPARepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgCPARepsone& default_instance();

  static const hgCPARepsone* internal_default_instance();

  void Swap(hgCPARepsone* other);

  // implements Message ----------------------------------------------

  inline hgCPARepsone* New() const { return New(NULL); }

  hgCPARepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgCPARepsone& from);
  void MergeFrom(const hgCPARepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgCPARepsone* other);
  void UnsafeMergeFrom(const hgCPARepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MMSI = 1;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 1;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional double TCPA = 2;
  void clear_tcpa();
  static const int kTCPAFieldNumber = 2;
  double tcpa() const;
  void set_tcpa(double value);

  // optional double CPA = 3;
  void clear_cpa();
  static const int kCPAFieldNumber = 3;
  double cpa() const;
  void set_cpa(double value);

  // @@protoc_insertion_point(class_scope:hgCPARepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  double tcpa_;
  double cpa_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgCPA_2eproto_impl();
  friend void  protobuf_AddDesc_hgCPA_2eproto_impl();
  friend void protobuf_AssignDesc_hgCPA_2eproto();
  friend void protobuf_ShutdownFile_hgCPA_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgCPARepsone> hgCPARepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCPA

// optional string MMSI = 1;
inline void hgCPA::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPA::mmsi() const {
  // @@protoc_insertion_point(field_get:hgCPA.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPA::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPA.MMSI)
}
inline void hgCPA::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPA.MMSI)
}
inline void hgCPA::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPA.MMSI)
}
inline ::std::string* hgCPA::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCPA.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPA::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgCPA.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPA::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCPA.MMSI)
}

// optional double OwnLat = 2;
inline void hgCPA::clear_ownlat() {
  ownlat_ = 0;
}
inline double hgCPA::ownlat() const {
  // @@protoc_insertion_point(field_get:hgCPA.OwnLat)
  return ownlat_;
}
inline void hgCPA::set_ownlat(double value) {
  
  ownlat_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.OwnLat)
}

// optional double OwnLon = 3;
inline void hgCPA::clear_ownlon() {
  ownlon_ = 0;
}
inline double hgCPA::ownlon() const {
  // @@protoc_insertion_point(field_get:hgCPA.OwnLon)
  return ownlon_;
}
inline void hgCPA::set_ownlon(double value) {
  
  ownlon_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.OwnLon)
}

// optional double OwnSog = 4;
inline void hgCPA::clear_ownsog() {
  ownsog_ = 0;
}
inline double hgCPA::ownsog() const {
  // @@protoc_insertion_point(field_get:hgCPA.OwnSog)
  return ownsog_;
}
inline void hgCPA::set_ownsog(double value) {
  
  ownsog_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.OwnSog)
}

// optional double OwnCog = 5;
inline void hgCPA::clear_owncog() {
  owncog_ = 0;
}
inline double hgCPA::owncog() const {
  // @@protoc_insertion_point(field_get:hgCPA.OwnCog)
  return owncog_;
}
inline void hgCPA::set_owncog(double value) {
  
  owncog_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.OwnCog)
}

// optional double TargetLat = 6;
inline void hgCPA::clear_targetlat() {
  targetlat_ = 0;
}
inline double hgCPA::targetlat() const {
  // @@protoc_insertion_point(field_get:hgCPA.TargetLat)
  return targetlat_;
}
inline void hgCPA::set_targetlat(double value) {
  
  targetlat_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.TargetLat)
}

// optional double TargetLon = 7;
inline void hgCPA::clear_targetlon() {
  targetlon_ = 0;
}
inline double hgCPA::targetlon() const {
  // @@protoc_insertion_point(field_get:hgCPA.TargetLon)
  return targetlon_;
}
inline void hgCPA::set_targetlon(double value) {
  
  targetlon_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.TargetLon)
}

// optional double TargetSog = 8;
inline void hgCPA::clear_targetsog() {
  targetsog_ = 0;
}
inline double hgCPA::targetsog() const {
  // @@protoc_insertion_point(field_get:hgCPA.TargetSog)
  return targetsog_;
}
inline void hgCPA::set_targetsog(double value) {
  
  targetsog_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.TargetSog)
}

// optional double TargetCog = 9;
inline void hgCPA::clear_targetcog() {
  targetcog_ = 0;
}
inline double hgCPA::targetcog() const {
  // @@protoc_insertion_point(field_get:hgCPA.TargetCog)
  return targetcog_;
}
inline void hgCPA::set_targetcog(double value) {
  
  targetcog_ = value;
  // @@protoc_insertion_point(field_set:hgCPA.TargetCog)
}

inline const hgCPA* hgCPA::internal_default_instance() {
  return &hgCPA_default_instance_.get();
}
// -------------------------------------------------------------------

// hgCPARepsone

// optional string MMSI = 1;
inline void hgCPARepsone::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCPARepsone::mmsi() const {
  // @@protoc_insertion_point(field_get:hgCPARepsone.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPARepsone::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCPARepsone.MMSI)
}
inline void hgCPARepsone::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCPARepsone.MMSI)
}
inline void hgCPARepsone::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCPARepsone.MMSI)
}
inline ::std::string* hgCPARepsone::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCPARepsone.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCPARepsone::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgCPARepsone.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCPARepsone::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCPARepsone.MMSI)
}

// optional double TCPA = 2;
inline void hgCPARepsone::clear_tcpa() {
  tcpa_ = 0;
}
inline double hgCPARepsone::tcpa() const {
  // @@protoc_insertion_point(field_get:hgCPARepsone.TCPA)
  return tcpa_;
}
inline void hgCPARepsone::set_tcpa(double value) {
  
  tcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPARepsone.TCPA)
}

// optional double CPA = 3;
inline void hgCPARepsone::clear_cpa() {
  cpa_ = 0;
}
inline double hgCPARepsone::cpa() const {
  // @@protoc_insertion_point(field_get:hgCPARepsone.CPA)
  return cpa_;
}
inline void hgCPARepsone::set_cpa(double value) {
  
  cpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPARepsone.CPA)
}

inline const hgCPARepsone* hgCPARepsone::internal_default_instance() {
  return &hgCPARepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgCPA_2eproto__INCLUDED
