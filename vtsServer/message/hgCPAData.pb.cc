// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgCPAData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgCPAData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgCPAData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgCPAData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgCPAData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgCPAData_2eproto() {
  protobuf_AddDesc_hgCPAData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgCPAData.proto");
  GOOGLE_CHECK(file != NULL);
  hgCPAData_descriptor_ = file->message_type(0);
  static const int hgCPAData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCPAData, daycpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCPAData, daytcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCPAData, nightcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCPAData, nighttcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCPAData, customcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCPAData, customtcpa_),
  };
  hgCPAData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgCPAData_descriptor_,
      hgCPAData::internal_default_instance(),
      hgCPAData_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgCPAData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCPAData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgCPAData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgCPAData_descriptor_, hgCPAData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgCPAData_2eproto() {
  hgCPAData_default_instance_.Shutdown();
  delete hgCPAData_reflection_;
}

void protobuf_InitDefaults_hgCPAData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  hgCPAData_default_instance_.DefaultConstruct();
  hgCPAData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgCPAData_2eproto_once_);
void protobuf_InitDefaults_hgCPAData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgCPAData_2eproto_once_,
                 &protobuf_InitDefaults_hgCPAData_2eproto_impl);
}
void protobuf_AddDesc_hgCPAData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgCPAData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017hgCPAData.proto\"x\n\thgCPAData\022\016\n\006DayCPA"
    "\030\001 \001(\001\022\017\n\007DayTCPA\030\002 \001(\001\022\020\n\010NightCPA\030\003 \001("
    "\001\022\021\n\tNightTCPA\030\004 \001(\001\022\021\n\tCustomCPA\030\005 \001(\001\022"
    "\022\n\nCustomTCPA\030\006 \001(\001b\006proto3", 147);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgCPAData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgCPAData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgCPAData_2eproto_once_);
void protobuf_AddDesc_hgCPAData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgCPAData_2eproto_once_,
                 &protobuf_AddDesc_hgCPAData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgCPAData_2eproto {
  StaticDescriptorInitializer_hgCPAData_2eproto() {
    protobuf_AddDesc_hgCPAData_2eproto();
  }
} static_descriptor_initializer_hgCPAData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgCPAData::kDayCPAFieldNumber;
const int hgCPAData::kDayTCPAFieldNumber;
const int hgCPAData::kNightCPAFieldNumber;
const int hgCPAData::kNightTCPAFieldNumber;
const int hgCPAData::kCustomCPAFieldNumber;
const int hgCPAData::kCustomTCPAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgCPAData::hgCPAData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgCPAData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgCPAData)
}

void hgCPAData::InitAsDefaultInstance() {
}

hgCPAData::hgCPAData(const hgCPAData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgCPAData)
}

void hgCPAData::SharedCtor() {
  ::memset(&daycpa_, 0, reinterpret_cast<char*>(&customtcpa_) -
    reinterpret_cast<char*>(&daycpa_) + sizeof(customtcpa_));
  _cached_size_ = 0;
}

hgCPAData::~hgCPAData() {
  // @@protoc_insertion_point(destructor:hgCPAData)
  SharedDtor();
}

void hgCPAData::SharedDtor() {
}

void hgCPAData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgCPAData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgCPAData_descriptor_;
}

const hgCPAData& hgCPAData::default_instance() {
  protobuf_InitDefaults_hgCPAData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgCPAData> hgCPAData_default_instance_;

hgCPAData* hgCPAData::New(::google::protobuf::Arena* arena) const {
  hgCPAData* n = new hgCPAData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgCPAData::Clear() {
// @@protoc_insertion_point(message_clear_start:hgCPAData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgCPAData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgCPAData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(daycpa_, customtcpa_);

#undef ZR_HELPER_
#undef ZR_

}

bool hgCPAData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgCPAData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double DayCPA = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &daycpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_DayTCPA;
        break;
      }

      // optional double DayTCPA = 2;
      case 2: {
        if (tag == 17) {
         parse_DayTCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &daytcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_NightCPA;
        break;
      }

      // optional double NightCPA = 3;
      case 3: {
        if (tag == 25) {
         parse_NightCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nightcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_NightTCPA;
        break;
      }

      // optional double NightTCPA = 4;
      case 4: {
        if (tag == 33) {
         parse_NightTCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nighttcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_CustomCPA;
        break;
      }

      // optional double CustomCPA = 5;
      case 5: {
        if (tag == 41) {
         parse_CustomCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &customcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_CustomTCPA;
        break;
      }

      // optional double CustomTCPA = 6;
      case 6: {
        if (tag == 49) {
         parse_CustomTCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &customtcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgCPAData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgCPAData)
  return false;
#undef DO_
}

void hgCPAData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgCPAData)
  // optional double DayCPA = 1;
  if (this->daycpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->daycpa(), output);
  }

  // optional double DayTCPA = 2;
  if (this->daytcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->daytcpa(), output);
  }

  // optional double NightCPA = 3;
  if (this->nightcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->nightcpa(), output);
  }

  // optional double NightTCPA = 4;
  if (this->nighttcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->nighttcpa(), output);
  }

  // optional double CustomCPA = 5;
  if (this->customcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->customcpa(), output);
  }

  // optional double CustomTCPA = 6;
  if (this->customtcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->customtcpa(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgCPAData)
}

::google::protobuf::uint8* hgCPAData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgCPAData)
  // optional double DayCPA = 1;
  if (this->daycpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->daycpa(), target);
  }

  // optional double DayTCPA = 2;
  if (this->daytcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->daytcpa(), target);
  }

  // optional double NightCPA = 3;
  if (this->nightcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->nightcpa(), target);
  }

  // optional double NightTCPA = 4;
  if (this->nighttcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->nighttcpa(), target);
  }

  // optional double CustomCPA = 5;
  if (this->customcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->customcpa(), target);
  }

  // optional double CustomTCPA = 6;
  if (this->customtcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->customtcpa(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgCPAData)
  return target;
}

size_t hgCPAData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgCPAData)
  size_t total_size = 0;

  // optional double DayCPA = 1;
  if (this->daycpa() != 0) {
    total_size += 1 + 8;
  }

  // optional double DayTCPA = 2;
  if (this->daytcpa() != 0) {
    total_size += 1 + 8;
  }

  // optional double NightCPA = 3;
  if (this->nightcpa() != 0) {
    total_size += 1 + 8;
  }

  // optional double NightTCPA = 4;
  if (this->nighttcpa() != 0) {
    total_size += 1 + 8;
  }

  // optional double CustomCPA = 5;
  if (this->customcpa() != 0) {
    total_size += 1 + 8;
  }

  // optional double CustomTCPA = 6;
  if (this->customtcpa() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgCPAData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgCPAData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgCPAData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgCPAData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgCPAData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgCPAData)
    UnsafeMergeFrom(*source);
  }
}

void hgCPAData::MergeFrom(const hgCPAData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgCPAData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgCPAData::UnsafeMergeFrom(const hgCPAData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.daycpa() != 0) {
    set_daycpa(from.daycpa());
  }
  if (from.daytcpa() != 0) {
    set_daytcpa(from.daytcpa());
  }
  if (from.nightcpa() != 0) {
    set_nightcpa(from.nightcpa());
  }
  if (from.nighttcpa() != 0) {
    set_nighttcpa(from.nighttcpa());
  }
  if (from.customcpa() != 0) {
    set_customcpa(from.customcpa());
  }
  if (from.customtcpa() != 0) {
    set_customtcpa(from.customtcpa());
  }
}

void hgCPAData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgCPAData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgCPAData::CopyFrom(const hgCPAData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgCPAData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgCPAData::IsInitialized() const {

  return true;
}

void hgCPAData::Swap(hgCPAData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgCPAData::InternalSwap(hgCPAData* other) {
  std::swap(daycpa_, other->daycpa_);
  std::swap(daytcpa_, other->daytcpa_);
  std::swap(nightcpa_, other->nightcpa_);
  std::swap(nighttcpa_, other->nighttcpa_);
  std::swap(customcpa_, other->customcpa_);
  std::swap(customtcpa_, other->customtcpa_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgCPAData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgCPAData_descriptor_;
  metadata.reflection = hgCPAData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCPAData

// optional double DayCPA = 1;
void hgCPAData::clear_daycpa() {
  daycpa_ = 0;
}
double hgCPAData::daycpa() const {
  // @@protoc_insertion_point(field_get:hgCPAData.DayCPA)
  return daycpa_;
}
void hgCPAData::set_daycpa(double value) {
  
  daycpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAData.DayCPA)
}

// optional double DayTCPA = 2;
void hgCPAData::clear_daytcpa() {
  daytcpa_ = 0;
}
double hgCPAData::daytcpa() const {
  // @@protoc_insertion_point(field_get:hgCPAData.DayTCPA)
  return daytcpa_;
}
void hgCPAData::set_daytcpa(double value) {
  
  daytcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAData.DayTCPA)
}

// optional double NightCPA = 3;
void hgCPAData::clear_nightcpa() {
  nightcpa_ = 0;
}
double hgCPAData::nightcpa() const {
  // @@protoc_insertion_point(field_get:hgCPAData.NightCPA)
  return nightcpa_;
}
void hgCPAData::set_nightcpa(double value) {
  
  nightcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAData.NightCPA)
}

// optional double NightTCPA = 4;
void hgCPAData::clear_nighttcpa() {
  nighttcpa_ = 0;
}
double hgCPAData::nighttcpa() const {
  // @@protoc_insertion_point(field_get:hgCPAData.NightTCPA)
  return nighttcpa_;
}
void hgCPAData::set_nighttcpa(double value) {
  
  nighttcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAData.NightTCPA)
}

// optional double CustomCPA = 5;
void hgCPAData::clear_customcpa() {
  customcpa_ = 0;
}
double hgCPAData::customcpa() const {
  // @@protoc_insertion_point(field_get:hgCPAData.CustomCPA)
  return customcpa_;
}
void hgCPAData::set_customcpa(double value) {
  
  customcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAData.CustomCPA)
}

// optional double CustomTCPA = 6;
void hgCPAData::clear_customtcpa() {
  customtcpa_ = 0;
}
double hgCPAData::customtcpa() const {
  // @@protoc_insertion_point(field_get:hgCPAData.CustomTCPA)
  return customtcpa_;
}
void hgCPAData::set_customtcpa(double value) {
  
  customtcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCPAData.CustomTCPA)
}

inline const hgCPAData* hgCPAData::internal_default_instance() {
  return &hgCPAData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
