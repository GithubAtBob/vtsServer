// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgAlgorWar.proto

#ifndef PROTOBUF_hgAlgorWar_2eproto__INCLUDED
#define PROTOBUF_hgAlgorWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgAlgorWar_2eproto();
void protobuf_InitDefaults_hgAlgorWar_2eproto();
void protobuf_AssignDesc_hgAlgorWar_2eproto();
void protobuf_ShutdownFile_hgAlgorWar_2eproto();

class hgAlgorWarMes;

enum hgAlgorWarLevel {
  LevelBegin = 0,
  DANCOMMONLY = 1,
  DANCOLLISION = 2,
  DANCRITICAL = 3,
  DANURGENT = 4,
  hgAlgorWarLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  hgAlgorWarLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool hgAlgorWarLevel_IsValid(int value);
const hgAlgorWarLevel hgAlgorWarLevel_MIN = LevelBegin;
const hgAlgorWarLevel hgAlgorWarLevel_MAX = DANURGENT;
const int hgAlgorWarLevel_ARRAYSIZE = hgAlgorWarLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* hgAlgorWarLevel_descriptor();
inline const ::std::string& hgAlgorWarLevel_Name(hgAlgorWarLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    hgAlgorWarLevel_descriptor(), value);
}
inline bool hgAlgorWarLevel_Parse(
    const ::std::string& name, hgAlgorWarLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hgAlgorWarLevel>(
    hgAlgorWarLevel_descriptor(), name, value);
}
enum hgAlgorWarMesType {
  NormalRight = 0,
  NormalLeft = 1,
  CollisionRight = 2,
  CollisionLeft = 3,
  CollisionDRight = 4,
  CollisionDLeft = 5,
  ApproDRight = 6,
  ApproDLeft = 7,
  DangerCase = 8,
  hgAlgorWarMesType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  hgAlgorWarMesType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool hgAlgorWarMesType_IsValid(int value);
const hgAlgorWarMesType hgAlgorWarMesType_MIN = NormalRight;
const hgAlgorWarMesType hgAlgorWarMesType_MAX = DangerCase;
const int hgAlgorWarMesType_ARRAYSIZE = hgAlgorWarMesType_MAX + 1;

const ::google::protobuf::EnumDescriptor* hgAlgorWarMesType_descriptor();
inline const ::std::string& hgAlgorWarMesType_Name(hgAlgorWarMesType value) {
  return ::google::protobuf::internal::NameOfEnum(
    hgAlgorWarMesType_descriptor(), value);
}
inline bool hgAlgorWarMesType_Parse(
    const ::std::string& name, hgAlgorWarMesType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<hgAlgorWarMesType>(
    hgAlgorWarMesType_descriptor(), name, value);
}
// ===================================================================

class hgAlgorWarMes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgAlgorWarMes) */ {
 public:
  hgAlgorWarMes();
  virtual ~hgAlgorWarMes();

  hgAlgorWarMes(const hgAlgorWarMes& from);

  inline hgAlgorWarMes& operator=(const hgAlgorWarMes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgAlgorWarMes& default_instance();

  static const hgAlgorWarMes* internal_default_instance();

  void Swap(hgAlgorWarMes* other);

  // implements Message ----------------------------------------------

  inline hgAlgorWarMes* New() const { return New(NULL); }

  hgAlgorWarMes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgAlgorWarMes& from);
  void MergeFrom(const hgAlgorWarMes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgAlgorWarMes* other);
  void UnsafeMergeFrom(const hgAlgorWarMes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string WarningID = 1;
  void clear_warningid();
  static const int kWarningIDFieldNumber = 1;
  const ::std::string& warningid() const;
  void set_warningid(const ::std::string& value);
  void set_warningid(const char* value);
  void set_warningid(const char* value, size_t size);
  ::std::string* mutable_warningid();
  ::std::string* release_warningid();
  void set_allocated_warningid(::std::string* warningid);

  // optional string WarningGUID = 2;
  void clear_warningguid();
  static const int kWarningGUIDFieldNumber = 2;
  const ::std::string& warningguid() const;
  void set_warningguid(const ::std::string& value);
  void set_warningguid(const char* value);
  void set_warningguid(const char* value, size_t size);
  ::std::string* mutable_warningguid();
  ::std::string* release_warningguid();
  void set_allocated_warningguid(::std::string* warningguid);

  // optional int32 WarningPriority = 3;
  void clear_warningpriority();
  static const int kWarningPriorityFieldNumber = 3;
  ::google::protobuf::int32 warningpriority() const;
  void set_warningpriority(::google::protobuf::int32 value);

  // optional string WarningName = 4;
  void clear_warningname();
  static const int kWarningNameFieldNumber = 4;
  const ::std::string& warningname() const;
  void set_warningname(const ::std::string& value);
  void set_warningname(const char* value);
  void set_warningname(const char* value, size_t size);
  ::std::string* mutable_warningname();
  ::std::string* release_warningname();
  void set_allocated_warningname(::std::string* warningname);

  // optional string MMSI = 5;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 5;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional string otherMMSI = 6;
  void clear_othermmsi();
  static const int kOtherMMSIFieldNumber = 6;
  const ::std::string& othermmsi() const;
  void set_othermmsi(const ::std::string& value);
  void set_othermmsi(const char* value);
  void set_othermmsi(const char* value, size_t size);
  ::std::string* mutable_othermmsi();
  ::std::string* release_othermmsi();
  void set_allocated_othermmsi(::std::string* othermmsi);

  // optional int64 WarningTime = 7;
  void clear_warningtime();
  static const int kWarningTimeFieldNumber = 7;
  ::google::protobuf::int64 warningtime() const;
  void set_warningtime(::google::protobuf::int64 value);

  // optional .hgAlgorWarMesType WarMes = 8;
  void clear_warmes();
  static const int kWarMesFieldNumber = 8;
  ::hgAlgorWarMesType warmes() const;
  void set_warmes(::hgAlgorWarMesType value);

  // optional .hgAlgorWarLevel level = 9;
  void clear_level();
  static const int kLevelFieldNumber = 9;
  ::hgAlgorWarLevel level() const;
  void set_level(::hgAlgorWarLevel value);

  // optional int32 blink = 10;
  void clear_blink();
  static const int kBlinkFieldNumber = 10;
  ::google::protobuf::int32 blink() const;
  void set_blink(::google::protobuf::int32 value);

  // optional double vector_min = 11;
  void clear_vector_min();
  static const int kVectorMinFieldNumber = 11;
  double vector_min() const;
  void set_vector_min(double value);

  // optional int32 sound = 12;
  void clear_sound();
  static const int kSoundFieldNumber = 12;
  ::google::protobuf::int32 sound() const;
  void set_sound(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:hgAlgorWarMes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr warningid_;
  ::google::protobuf::internal::ArenaStringPtr warningguid_;
  ::google::protobuf::internal::ArenaStringPtr warningname_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  ::google::protobuf::internal::ArenaStringPtr othermmsi_;
  ::google::protobuf::int32 warningpriority_;
  int warmes_;
  ::google::protobuf::int64 warningtime_;
  int level_;
  ::google::protobuf::int32 blink_;
  double vector_min_;
  ::google::protobuf::int32 sound_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgAlgorWar_2eproto_impl();
  friend void  protobuf_AddDesc_hgAlgorWar_2eproto_impl();
  friend void protobuf_AssignDesc_hgAlgorWar_2eproto();
  friend void protobuf_ShutdownFile_hgAlgorWar_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgAlgorWarMes> hgAlgorWarMes_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgAlgorWarMes

// optional string WarningID = 1;
inline void hgAlgorWarMes::clear_warningid() {
  warningid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgAlgorWarMes::warningid() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.WarningID)
  return warningid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_warningid(const ::std::string& value) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.WarningID)
}
inline void hgAlgorWarMes::set_warningid(const char* value) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAlgorWarMes.WarningID)
}
inline void hgAlgorWarMes::set_warningid(const char* value, size_t size) {
  
  warningid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAlgorWarMes.WarningID)
}
inline ::std::string* hgAlgorWarMes::mutable_warningid() {
  
  // @@protoc_insertion_point(field_mutable:hgAlgorWarMes.WarningID)
  return warningid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgAlgorWarMes::release_warningid() {
  // @@protoc_insertion_point(field_release:hgAlgorWarMes.WarningID)
  
  return warningid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_allocated_warningid(::std::string* warningid) {
  if (warningid != NULL) {
    
  } else {
    
  }
  warningid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningid);
  // @@protoc_insertion_point(field_set_allocated:hgAlgorWarMes.WarningID)
}

// optional string WarningGUID = 2;
inline void hgAlgorWarMes::clear_warningguid() {
  warningguid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgAlgorWarMes::warningguid() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.WarningGUID)
  return warningguid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_warningguid(const ::std::string& value) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.WarningGUID)
}
inline void hgAlgorWarMes::set_warningguid(const char* value) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAlgorWarMes.WarningGUID)
}
inline void hgAlgorWarMes::set_warningguid(const char* value, size_t size) {
  
  warningguid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAlgorWarMes.WarningGUID)
}
inline ::std::string* hgAlgorWarMes::mutable_warningguid() {
  
  // @@protoc_insertion_point(field_mutable:hgAlgorWarMes.WarningGUID)
  return warningguid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgAlgorWarMes::release_warningguid() {
  // @@protoc_insertion_point(field_release:hgAlgorWarMes.WarningGUID)
  
  return warningguid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_allocated_warningguid(::std::string* warningguid) {
  if (warningguid != NULL) {
    
  } else {
    
  }
  warningguid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningguid);
  // @@protoc_insertion_point(field_set_allocated:hgAlgorWarMes.WarningGUID)
}

// optional int32 WarningPriority = 3;
inline void hgAlgorWarMes::clear_warningpriority() {
  warningpriority_ = 0;
}
inline ::google::protobuf::int32 hgAlgorWarMes::warningpriority() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.WarningPriority)
  return warningpriority_;
}
inline void hgAlgorWarMes::set_warningpriority(::google::protobuf::int32 value) {
  
  warningpriority_ = value;
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.WarningPriority)
}

// optional string WarningName = 4;
inline void hgAlgorWarMes::clear_warningname() {
  warningname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgAlgorWarMes::warningname() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.WarningName)
  return warningname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_warningname(const ::std::string& value) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.WarningName)
}
inline void hgAlgorWarMes::set_warningname(const char* value) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAlgorWarMes.WarningName)
}
inline void hgAlgorWarMes::set_warningname(const char* value, size_t size) {
  
  warningname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAlgorWarMes.WarningName)
}
inline ::std::string* hgAlgorWarMes::mutable_warningname() {
  
  // @@protoc_insertion_point(field_mutable:hgAlgorWarMes.WarningName)
  return warningname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgAlgorWarMes::release_warningname() {
  // @@protoc_insertion_point(field_release:hgAlgorWarMes.WarningName)
  
  return warningname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_allocated_warningname(::std::string* warningname) {
  if (warningname != NULL) {
    
  } else {
    
  }
  warningname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), warningname);
  // @@protoc_insertion_point(field_set_allocated:hgAlgorWarMes.WarningName)
}

// optional string MMSI = 5;
inline void hgAlgorWarMes::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgAlgorWarMes::mmsi() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.MMSI)
}
inline void hgAlgorWarMes::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAlgorWarMes.MMSI)
}
inline void hgAlgorWarMes::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAlgorWarMes.MMSI)
}
inline ::std::string* hgAlgorWarMes::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgAlgorWarMes.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgAlgorWarMes::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgAlgorWarMes.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgAlgorWarMes.MMSI)
}

// optional string otherMMSI = 6;
inline void hgAlgorWarMes::clear_othermmsi() {
  othermmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgAlgorWarMes::othermmsi() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.otherMMSI)
  return othermmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_othermmsi(const ::std::string& value) {
  
  othermmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.otherMMSI)
}
inline void hgAlgorWarMes::set_othermmsi(const char* value) {
  
  othermmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAlgorWarMes.otherMMSI)
}
inline void hgAlgorWarMes::set_othermmsi(const char* value, size_t size) {
  
  othermmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAlgorWarMes.otherMMSI)
}
inline ::std::string* hgAlgorWarMes::mutable_othermmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgAlgorWarMes.otherMMSI)
  return othermmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgAlgorWarMes::release_othermmsi() {
  // @@protoc_insertion_point(field_release:hgAlgorWarMes.otherMMSI)
  
  return othermmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAlgorWarMes::set_allocated_othermmsi(::std::string* othermmsi) {
  if (othermmsi != NULL) {
    
  } else {
    
  }
  othermmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), othermmsi);
  // @@protoc_insertion_point(field_set_allocated:hgAlgorWarMes.otherMMSI)
}

// optional int64 WarningTime = 7;
inline void hgAlgorWarMes::clear_warningtime() {
  warningtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 hgAlgorWarMes::warningtime() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.WarningTime)
  return warningtime_;
}
inline void hgAlgorWarMes::set_warningtime(::google::protobuf::int64 value) {
  
  warningtime_ = value;
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.WarningTime)
}

// optional .hgAlgorWarMesType WarMes = 8;
inline void hgAlgorWarMes::clear_warmes() {
  warmes_ = 0;
}
inline ::hgAlgorWarMesType hgAlgorWarMes::warmes() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.WarMes)
  return static_cast< ::hgAlgorWarMesType >(warmes_);
}
inline void hgAlgorWarMes::set_warmes(::hgAlgorWarMesType value) {
  
  warmes_ = value;
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.WarMes)
}

// optional .hgAlgorWarLevel level = 9;
inline void hgAlgorWarMes::clear_level() {
  level_ = 0;
}
inline ::hgAlgorWarLevel hgAlgorWarMes::level() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.level)
  return static_cast< ::hgAlgorWarLevel >(level_);
}
inline void hgAlgorWarMes::set_level(::hgAlgorWarLevel value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.level)
}

// optional int32 blink = 10;
inline void hgAlgorWarMes::clear_blink() {
  blink_ = 0;
}
inline ::google::protobuf::int32 hgAlgorWarMes::blink() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.blink)
  return blink_;
}
inline void hgAlgorWarMes::set_blink(::google::protobuf::int32 value) {
  
  blink_ = value;
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.blink)
}

// optional double vector_min = 11;
inline void hgAlgorWarMes::clear_vector_min() {
  vector_min_ = 0;
}
inline double hgAlgorWarMes::vector_min() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.vector_min)
  return vector_min_;
}
inline void hgAlgorWarMes::set_vector_min(double value) {
  
  vector_min_ = value;
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.vector_min)
}

// optional int32 sound = 12;
inline void hgAlgorWarMes::clear_sound() {
  sound_ = 0;
}
inline ::google::protobuf::int32 hgAlgorWarMes::sound() const {
  // @@protoc_insertion_point(field_get:hgAlgorWarMes.sound)
  return sound_;
}
inline void hgAlgorWarMes::set_sound(::google::protobuf::int32 value) {
  
  sound_ = value;
  // @@protoc_insertion_point(field_set:hgAlgorWarMes.sound)
}

inline const hgAlgorWarMes* hgAlgorWarMes::internal_default_instance() {
  return &hgAlgorWarMes_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hgAlgorWarLevel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hgAlgorWarLevel>() {
  return ::hgAlgorWarLevel_descriptor();
}
template <> struct is_proto_enum< ::hgAlgorWarMesType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hgAlgorWarMesType>() {
  return ::hgAlgorWarMesType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgAlgorWar_2eproto__INCLUDED
