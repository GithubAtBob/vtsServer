// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reportline.proto

#ifndef PROTOBUF_reportline_2eproto__INCLUDED
#define PROTOBUF_reportline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PointMes.pb.h"
#include "waringinfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_reportline_2eproto();
void protobuf_InitDefaults_reportline_2eproto();
void protobuf_AssignDesc_reportline_2eproto();
void protobuf_ShutdownFile_reportline_2eproto();

class ReportLineRepsone;
class ReportLineRequest;

// ===================================================================

class ReportLineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReportLineRequest) */ {
 public:
  ReportLineRequest();
  virtual ~ReportLineRequest();

  ReportLineRequest(const ReportLineRequest& from);

  inline ReportLineRequest& operator=(const ReportLineRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportLineRequest& default_instance();

  static const ReportLineRequest* internal_default_instance();

  void Swap(ReportLineRequest* other);

  // implements Message ----------------------------------------------

  inline ReportLineRequest* New() const { return New(NULL); }

  ReportLineRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportLineRequest& from);
  void MergeFrom(const ReportLineRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportLineRequest* other);
  void UnsafeMergeFrom(const ReportLineRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .PointMes point = 4;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 4;
  const ::PointMes& point(int index) const;
  ::PointMes* mutable_point(int index);
  ::PointMes* add_point();
  ::google::protobuf::RepeatedPtrField< ::PointMes >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::PointMes >&
      point() const;

  // optional int32 linestyle = 5;
  void clear_linestyle();
  static const int kLinestyleFieldNumber = 5;
  ::google::protobuf::int32 linestyle() const;
  void set_linestyle(::google::protobuf::int32 value);

  // optional int32 fullstyle = 6;
  void clear_fullstyle();
  static const int kFullstyleFieldNumber = 6;
  ::google::protobuf::int32 fullstyle() const;
  void set_fullstyle(::google::protobuf::int32 value);

  // optional int32 linewidth = 7;
  void clear_linewidth();
  static const int kLinewidthFieldNumber = 7;
  ::google::protobuf::int32 linewidth() const;
  void set_linewidth(::google::protobuf::int32 value);

  // repeated string waringID = 8;
  int waringid_size() const;
  void clear_waringid();
  static const int kWaringIDFieldNumber = 8;
  const ::std::string& waringid(int index) const;
  ::std::string* mutable_waringid(int index);
  void set_waringid(int index, const ::std::string& value);
  void set_waringid(int index, const char* value);
  void set_waringid(int index, const char* value, size_t size);
  ::std::string* add_waringid();
  void add_waringid(const ::std::string& value);
  void add_waringid(const char* value);
  void add_waringid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& waringid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_waringid();

  // optional string waringtype = 9;
  void clear_waringtype();
  static const int kWaringtypeFieldNumber = 9;
  const ::std::string& waringtype() const;
  void set_waringtype(const ::std::string& value);
  void set_waringtype(const char* value);
  void set_waringtype(const char* value, size_t size);
  ::std::string* mutable_waringtype();
  ::std::string* release_waringtype();
  void set_allocated_waringtype(::std::string* waringtype);

  // optional string drawman = 10;
  void clear_drawman();
  static const int kDrawmanFieldNumber = 10;
  const ::std::string& drawman() const;
  void set_drawman(const ::std::string& value);
  void set_drawman(const char* value);
  void set_drawman(const char* value, size_t size);
  ::std::string* mutable_drawman();
  ::std::string* release_drawman();
  void set_allocated_drawman(::std::string* drawman);

  // optional bool isshare = 11;
  void clear_isshare();
  static const int kIsshareFieldNumber = 11;
  bool isshare() const;
  void set_isshare(bool value);

  // optional string linecolor = 12;
  void clear_linecolor();
  static const int kLinecolorFieldNumber = 12;
  const ::std::string& linecolor() const;
  void set_linecolor(const ::std::string& value);
  void set_linecolor(const char* value);
  void set_linecolor(const char* value, size_t size);
  ::std::string* mutable_linecolor();
  ::std::string* release_linecolor();
  void set_allocated_linecolor(::std::string* linecolor);

  // optional string fullcolor = 13;
  void clear_fullcolor();
  static const int kFullcolorFieldNumber = 13;
  const ::std::string& fullcolor() const;
  void set_fullcolor(const ::std::string& value);
  void set_fullcolor(const char* value);
  void set_fullcolor(const char* value, size_t size);
  ::std::string* mutable_fullcolor();
  ::std::string* release_fullcolor();
  void set_allocated_fullcolor(::std::string* fullcolor);

  // repeated .WaringInfo info = 14;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 14;
  const ::WaringInfo& info(int index) const;
  ::WaringInfo* mutable_info(int index);
  ::WaringInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::WaringInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::WaringInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:ReportLineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PointMes > point_;
  ::google::protobuf::RepeatedPtrField< ::std::string> waringid_;
  ::google::protobuf::RepeatedPtrField< ::WaringInfo > info_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr waringtype_;
  ::google::protobuf::internal::ArenaStringPtr drawman_;
  ::google::protobuf::internal::ArenaStringPtr linecolor_;
  ::google::protobuf::internal::ArenaStringPtr fullcolor_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 linestyle_;
  ::google::protobuf::int32 fullstyle_;
  ::google::protobuf::int32 linewidth_;
  bool isshare_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_reportline_2eproto_impl();
  friend void  protobuf_AddDesc_reportline_2eproto_impl();
  friend void protobuf_AssignDesc_reportline_2eproto();
  friend void protobuf_ShutdownFile_reportline_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReportLineRequest> ReportLineRequest_default_instance_;

// -------------------------------------------------------------------

class ReportLineRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReportLineRepsone) */ {
 public:
  ReportLineRepsone();
  virtual ~ReportLineRepsone();

  ReportLineRepsone(const ReportLineRepsone& from);

  inline ReportLineRepsone& operator=(const ReportLineRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportLineRepsone& default_instance();

  static const ReportLineRepsone* internal_default_instance();

  void Swap(ReportLineRepsone* other);

  // implements Message ----------------------------------------------

  inline ReportLineRepsone* New() const { return New(NULL); }

  ReportLineRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportLineRepsone& from);
  void MergeFrom(const ReportLineRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportLineRepsone* other);
  void UnsafeMergeFrom(const ReportLineRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // repeated .ReportLineRequest ploylines = 3;
  int ploylines_size() const;
  void clear_ploylines();
  static const int kPloylinesFieldNumber = 3;
  const ::ReportLineRequest& ploylines(int index) const;
  ::ReportLineRequest* mutable_ploylines(int index);
  ::ReportLineRequest* add_ploylines();
  ::google::protobuf::RepeatedPtrField< ::ReportLineRequest >*
      mutable_ploylines();
  const ::google::protobuf::RepeatedPtrField< ::ReportLineRequest >&
      ploylines() const;

  // @@protoc_insertion_point(class_scope:ReportLineRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ReportLineRequest > ploylines_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_reportline_2eproto_impl();
  friend void  protobuf_AddDesc_reportline_2eproto_impl();
  friend void protobuf_AssignDesc_reportline_2eproto();
  friend void protobuf_ShutdownFile_reportline_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReportLineRepsone> ReportLineRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportLineRequest

// optional int32 type = 1;
inline void ReportLineRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ReportLineRequest::type() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.type)
  return type_;
}
inline void ReportLineRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ReportLineRequest.type)
}

// optional string ID = 2;
inline void ReportLineRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportLineRequest::id() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportLineRequest.ID)
}
inline void ReportLineRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportLineRequest.ID)
}
inline void ReportLineRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportLineRequest.ID)
}
inline ::std::string* ReportLineRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportLineRequest::release_id() {
  // @@protoc_insertion_point(field_release:ReportLineRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ReportLineRequest.ID)
}

// optional string name = 3;
inline void ReportLineRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportLineRequest::name() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportLineRequest.name)
}
inline void ReportLineRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportLineRequest.name)
}
inline void ReportLineRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportLineRequest.name)
}
inline ::std::string* ReportLineRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportLineRequest::release_name() {
  // @@protoc_insertion_point(field_release:ReportLineRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ReportLineRequest.name)
}

// repeated .PointMes point = 4;
inline int ReportLineRequest::point_size() const {
  return point_.size();
}
inline void ReportLineRequest::clear_point() {
  point_.Clear();
}
inline const ::PointMes& ReportLineRequest::point(int index) const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.point)
  return point_.Get(index);
}
inline ::PointMes* ReportLineRequest::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.point)
  return point_.Mutable(index);
}
inline ::PointMes* ReportLineRequest::add_point() {
  // @@protoc_insertion_point(field_add:ReportLineRequest.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PointMes >*
ReportLineRequest::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:ReportLineRequest.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PointMes >&
ReportLineRequest::point() const {
  // @@protoc_insertion_point(field_list:ReportLineRequest.point)
  return point_;
}

// optional int32 linestyle = 5;
inline void ReportLineRequest::clear_linestyle() {
  linestyle_ = 0;
}
inline ::google::protobuf::int32 ReportLineRequest::linestyle() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.linestyle)
  return linestyle_;
}
inline void ReportLineRequest::set_linestyle(::google::protobuf::int32 value) {
  
  linestyle_ = value;
  // @@protoc_insertion_point(field_set:ReportLineRequest.linestyle)
}

// optional int32 fullstyle = 6;
inline void ReportLineRequest::clear_fullstyle() {
  fullstyle_ = 0;
}
inline ::google::protobuf::int32 ReportLineRequest::fullstyle() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.fullstyle)
  return fullstyle_;
}
inline void ReportLineRequest::set_fullstyle(::google::protobuf::int32 value) {
  
  fullstyle_ = value;
  // @@protoc_insertion_point(field_set:ReportLineRequest.fullstyle)
}

// optional int32 linewidth = 7;
inline void ReportLineRequest::clear_linewidth() {
  linewidth_ = 0;
}
inline ::google::protobuf::int32 ReportLineRequest::linewidth() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.linewidth)
  return linewidth_;
}
inline void ReportLineRequest::set_linewidth(::google::protobuf::int32 value) {
  
  linewidth_ = value;
  // @@protoc_insertion_point(field_set:ReportLineRequest.linewidth)
}

// repeated string waringID = 8;
inline int ReportLineRequest::waringid_size() const {
  return waringid_.size();
}
inline void ReportLineRequest::clear_waringid() {
  waringid_.Clear();
}
inline const ::std::string& ReportLineRequest::waringid(int index) const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.waringID)
  return waringid_.Get(index);
}
inline ::std::string* ReportLineRequest::mutable_waringid(int index) {
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.waringID)
  return waringid_.Mutable(index);
}
inline void ReportLineRequest::set_waringid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ReportLineRequest.waringID)
  waringid_.Mutable(index)->assign(value);
}
inline void ReportLineRequest::set_waringid(int index, const char* value) {
  waringid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ReportLineRequest.waringID)
}
inline void ReportLineRequest::set_waringid(int index, const char* value, size_t size) {
  waringid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReportLineRequest.waringID)
}
inline ::std::string* ReportLineRequest::add_waringid() {
  // @@protoc_insertion_point(field_add_mutable:ReportLineRequest.waringID)
  return waringid_.Add();
}
inline void ReportLineRequest::add_waringid(const ::std::string& value) {
  waringid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ReportLineRequest.waringID)
}
inline void ReportLineRequest::add_waringid(const char* value) {
  waringid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ReportLineRequest.waringID)
}
inline void ReportLineRequest::add_waringid(const char* value, size_t size) {
  waringid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ReportLineRequest.waringID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReportLineRequest::waringid() const {
  // @@protoc_insertion_point(field_list:ReportLineRequest.waringID)
  return waringid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReportLineRequest::mutable_waringid() {
  // @@protoc_insertion_point(field_mutable_list:ReportLineRequest.waringID)
  return &waringid_;
}

// optional string waringtype = 9;
inline void ReportLineRequest::clear_waringtype() {
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportLineRequest::waringtype() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.waringtype)
  return waringtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_waringtype(const ::std::string& value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportLineRequest.waringtype)
}
inline void ReportLineRequest::set_waringtype(const char* value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportLineRequest.waringtype)
}
inline void ReportLineRequest::set_waringtype(const char* value, size_t size) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportLineRequest.waringtype)
}
inline ::std::string* ReportLineRequest::mutable_waringtype() {
  
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.waringtype)
  return waringtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportLineRequest::release_waringtype() {
  // @@protoc_insertion_point(field_release:ReportLineRequest.waringtype)
  
  return waringtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_allocated_waringtype(::std::string* waringtype) {
  if (waringtype != NULL) {
    
  } else {
    
  }
  waringtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waringtype);
  // @@protoc_insertion_point(field_set_allocated:ReportLineRequest.waringtype)
}

// optional string drawman = 10;
inline void ReportLineRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportLineRequest::drawman() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportLineRequest.drawman)
}
inline void ReportLineRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportLineRequest.drawman)
}
inline void ReportLineRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportLineRequest.drawman)
}
inline ::std::string* ReportLineRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportLineRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:ReportLineRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:ReportLineRequest.drawman)
}

// optional bool isshare = 11;
inline void ReportLineRequest::clear_isshare() {
  isshare_ = false;
}
inline bool ReportLineRequest::isshare() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.isshare)
  return isshare_;
}
inline void ReportLineRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:ReportLineRequest.isshare)
}

// optional string linecolor = 12;
inline void ReportLineRequest::clear_linecolor() {
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportLineRequest::linecolor() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.linecolor)
  return linecolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_linecolor(const ::std::string& value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportLineRequest.linecolor)
}
inline void ReportLineRequest::set_linecolor(const char* value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportLineRequest.linecolor)
}
inline void ReportLineRequest::set_linecolor(const char* value, size_t size) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportLineRequest.linecolor)
}
inline ::std::string* ReportLineRequest::mutable_linecolor() {
  
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.linecolor)
  return linecolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportLineRequest::release_linecolor() {
  // @@protoc_insertion_point(field_release:ReportLineRequest.linecolor)
  
  return linecolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_allocated_linecolor(::std::string* linecolor) {
  if (linecolor != NULL) {
    
  } else {
    
  }
  linecolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linecolor);
  // @@protoc_insertion_point(field_set_allocated:ReportLineRequest.linecolor)
}

// optional string fullcolor = 13;
inline void ReportLineRequest::clear_fullcolor() {
  fullcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportLineRequest::fullcolor() const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.fullcolor)
  return fullcolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_fullcolor(const ::std::string& value) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportLineRequest.fullcolor)
}
inline void ReportLineRequest::set_fullcolor(const char* value) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportLineRequest.fullcolor)
}
inline void ReportLineRequest::set_fullcolor(const char* value, size_t size) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportLineRequest.fullcolor)
}
inline ::std::string* ReportLineRequest::mutable_fullcolor() {
  
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.fullcolor)
  return fullcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportLineRequest::release_fullcolor() {
  // @@protoc_insertion_point(field_release:ReportLineRequest.fullcolor)
  
  return fullcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRequest::set_allocated_fullcolor(::std::string* fullcolor) {
  if (fullcolor != NULL) {
    
  } else {
    
  }
  fullcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullcolor);
  // @@protoc_insertion_point(field_set_allocated:ReportLineRequest.fullcolor)
}

// repeated .WaringInfo info = 14;
inline int ReportLineRequest::info_size() const {
  return info_.size();
}
inline void ReportLineRequest::clear_info() {
  info_.Clear();
}
inline const ::WaringInfo& ReportLineRequest::info(int index) const {
  // @@protoc_insertion_point(field_get:ReportLineRequest.info)
  return info_.Get(index);
}
inline ::WaringInfo* ReportLineRequest::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ReportLineRequest.info)
  return info_.Mutable(index);
}
inline ::WaringInfo* ReportLineRequest::add_info() {
  // @@protoc_insertion_point(field_add:ReportLineRequest.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::WaringInfo >*
ReportLineRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ReportLineRequest.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::WaringInfo >&
ReportLineRequest::info() const {
  // @@protoc_insertion_point(field_list:ReportLineRequest.info)
  return info_;
}

inline const ReportLineRequest* ReportLineRequest::internal_default_instance() {
  return &ReportLineRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ReportLineRepsone

// optional int32 type = 1;
inline void ReportLineRepsone::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ReportLineRepsone::type() const {
  // @@protoc_insertion_point(field_get:ReportLineRepsone.type)
  return type_;
}
inline void ReportLineRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ReportLineRepsone.type)
}

// optional string result = 2;
inline void ReportLineRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportLineRepsone::result() const {
  // @@protoc_insertion_point(field_get:ReportLineRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReportLineRepsone.result)
}
inline void ReportLineRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReportLineRepsone.result)
}
inline void ReportLineRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReportLineRepsone.result)
}
inline ::std::string* ReportLineRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:ReportLineRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportLineRepsone::release_result() {
  // @@protoc_insertion_point(field_release:ReportLineRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportLineRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:ReportLineRepsone.result)
}

// repeated .ReportLineRequest ploylines = 3;
inline int ReportLineRepsone::ploylines_size() const {
  return ploylines_.size();
}
inline void ReportLineRepsone::clear_ploylines() {
  ploylines_.Clear();
}
inline const ::ReportLineRequest& ReportLineRepsone::ploylines(int index) const {
  // @@protoc_insertion_point(field_get:ReportLineRepsone.ploylines)
  return ploylines_.Get(index);
}
inline ::ReportLineRequest* ReportLineRepsone::mutable_ploylines(int index) {
  // @@protoc_insertion_point(field_mutable:ReportLineRepsone.ploylines)
  return ploylines_.Mutable(index);
}
inline ::ReportLineRequest* ReportLineRepsone::add_ploylines() {
  // @@protoc_insertion_point(field_add:ReportLineRepsone.ploylines)
  return ploylines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ReportLineRequest >*
ReportLineRepsone::mutable_ploylines() {
  // @@protoc_insertion_point(field_mutable_list:ReportLineRepsone.ploylines)
  return &ploylines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ReportLineRequest >&
ReportLineRepsone::ploylines() const {
  // @@protoc_insertion_point(field_list:ReportLineRepsone.ploylines)
  return ploylines_;
}

inline const ReportLineRepsone* ReportLineRepsone::internal_default_instance() {
  return &ReportLineRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_reportline_2eproto__INCLUDED
