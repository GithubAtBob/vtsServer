// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: createUser.proto

#ifndef PROTOBUF_createUser_2eproto__INCLUDED
#define PROTOBUF_createUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_createUser_2eproto();
void protobuf_InitDefaults_createUser_2eproto();
void protobuf_AssignDesc_createUser_2eproto();
void protobuf_ShutdownFile_createUser_2eproto();

class CreateUserRepsone;
class CreateUserRequest;

// ===================================================================

class CreateUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateUserRequest) */ {
 public:
  CreateUserRequest();
  virtual ~CreateUserRequest();

  CreateUserRequest(const CreateUserRequest& from);

  inline CreateUserRequest& operator=(const CreateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateUserRequest& default_instance();

  static const CreateUserRequest* internal_default_instance();

  void Swap(CreateUserRequest* other);

  // implements Message ----------------------------------------------

  inline CreateUserRequest* New() const { return New(NULL); }

  CreateUserRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateUserRequest& from);
  void MergeFrom(const CreateUserRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateUserRequest* other);
  void UnsafeMergeFrom(const CreateUserRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Account = 1;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // optional string RealName = 2;
  void clear_realname();
  static const int kRealNameFieldNumber = 2;
  const ::std::string& realname() const;
  void set_realname(const ::std::string& value);
  void set_realname(const char* value);
  void set_realname(const char* value, size_t size);
  ::std::string* mutable_realname();
  ::std::string* release_realname();
  void set_allocated_realname(::std::string* realname);

  // optional string Password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string Telephone = 4;
  void clear_telephone();
  static const int kTelephoneFieldNumber = 4;
  const ::std::string& telephone() const;
  void set_telephone(const ::std::string& value);
  void set_telephone(const char* value);
  void set_telephone(const char* value, size_t size);
  ::std::string* mutable_telephone();
  ::std::string* release_telephone();
  void set_allocated_telephone(::std::string* telephone);

  // optional string GroupName = 5;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 5;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // optional string UserImagePath = 6;
  void clear_userimagepath();
  static const int kUserImagePathFieldNumber = 6;
  const ::std::string& userimagepath() const;
  void set_userimagepath(const ::std::string& value);
  void set_userimagepath(const char* value);
  void set_userimagepath(const char* value, size_t size);
  ::std::string* mutable_userimagepath();
  ::std::string* release_userimagepath();
  void set_allocated_userimagepath(::std::string* userimagepath);

  // @@protoc_insertion_point(class_scope:CreateUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr realname_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr telephone_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr userimagepath_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_createUser_2eproto_impl();
  friend void  protobuf_AddDesc_createUser_2eproto_impl();
  friend void protobuf_AssignDesc_createUser_2eproto();
  friend void protobuf_ShutdownFile_createUser_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CreateUserRequest> CreateUserRequest_default_instance_;

// -------------------------------------------------------------------

class CreateUserRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CreateUserRepsone) */ {
 public:
  CreateUserRepsone();
  virtual ~CreateUserRepsone();

  CreateUserRepsone(const CreateUserRepsone& from);

  inline CreateUserRepsone& operator=(const CreateUserRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateUserRepsone& default_instance();

  static const CreateUserRepsone* internal_default_instance();

  void Swap(CreateUserRepsone* other);

  // implements Message ----------------------------------------------

  inline CreateUserRepsone* New() const { return New(NULL); }

  CreateUserRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateUserRepsone& from);
  void MergeFrom(const CreateUserRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateUserRepsone* other);
  void UnsafeMergeFrom(const CreateUserRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:CreateUserRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_createUser_2eproto_impl();
  friend void  protobuf_AddDesc_createUser_2eproto_impl();
  friend void protobuf_AssignDesc_createUser_2eproto();
  friend void protobuf_ShutdownFile_createUser_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CreateUserRepsone> CreateUserRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateUserRequest

// optional string Account = 1;
inline void CreateUserRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserRequest::account() const {
  // @@protoc_insertion_point(field_get:CreateUserRequest.Account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateUserRequest.Account)
}
inline void CreateUserRequest::set_account(const char* value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateUserRequest.Account)
}
inline void CreateUserRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateUserRequest.Account)
}
inline ::std::string* CreateUserRequest::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:CreateUserRequest.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserRequest::release_account() {
  // @@protoc_insertion_point(field_release:CreateUserRequest.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:CreateUserRequest.Account)
}

// optional string RealName = 2;
inline void CreateUserRequest::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserRequest::realname() const {
  // @@protoc_insertion_point(field_get:CreateUserRequest.RealName)
  return realname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_realname(const ::std::string& value) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateUserRequest.RealName)
}
inline void CreateUserRequest::set_realname(const char* value) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateUserRequest.RealName)
}
inline void CreateUserRequest::set_realname(const char* value, size_t size) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateUserRequest.RealName)
}
inline ::std::string* CreateUserRequest::mutable_realname() {
  
  // @@protoc_insertion_point(field_mutable:CreateUserRequest.RealName)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserRequest::release_realname() {
  // @@protoc_insertion_point(field_release:CreateUserRequest.RealName)
  
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    
  } else {
    
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:CreateUserRequest.RealName)
}

// optional string Password = 3;
inline void CreateUserRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserRequest::password() const {
  // @@protoc_insertion_point(field_get:CreateUserRequest.Password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateUserRequest.Password)
}
inline void CreateUserRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateUserRequest.Password)
}
inline void CreateUserRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateUserRequest.Password)
}
inline ::std::string* CreateUserRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:CreateUserRequest.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserRequest::release_password() {
  // @@protoc_insertion_point(field_release:CreateUserRequest.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CreateUserRequest.Password)
}

// optional string Telephone = 4;
inline void CreateUserRequest::clear_telephone() {
  telephone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserRequest::telephone() const {
  // @@protoc_insertion_point(field_get:CreateUserRequest.Telephone)
  return telephone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_telephone(const ::std::string& value) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateUserRequest.Telephone)
}
inline void CreateUserRequest::set_telephone(const char* value) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateUserRequest.Telephone)
}
inline void CreateUserRequest::set_telephone(const char* value, size_t size) {
  
  telephone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateUserRequest.Telephone)
}
inline ::std::string* CreateUserRequest::mutable_telephone() {
  
  // @@protoc_insertion_point(field_mutable:CreateUserRequest.Telephone)
  return telephone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserRequest::release_telephone() {
  // @@protoc_insertion_point(field_release:CreateUserRequest.Telephone)
  
  return telephone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_allocated_telephone(::std::string* telephone) {
  if (telephone != NULL) {
    
  } else {
    
  }
  telephone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), telephone);
  // @@protoc_insertion_point(field_set_allocated:CreateUserRequest.Telephone)
}

// optional string GroupName = 5;
inline void CreateUserRequest::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserRequest::groupname() const {
  // @@protoc_insertion_point(field_get:CreateUserRequest.GroupName)
  return groupname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateUserRequest.GroupName)
}
inline void CreateUserRequest::set_groupname(const char* value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateUserRequest.GroupName)
}
inline void CreateUserRequest::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateUserRequest.GroupName)
}
inline ::std::string* CreateUserRequest::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:CreateUserRequest.GroupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserRequest::release_groupname() {
  // @@protoc_insertion_point(field_release:CreateUserRequest.GroupName)
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:CreateUserRequest.GroupName)
}

// optional string UserImagePath = 6;
inline void CreateUserRequest::clear_userimagepath() {
  userimagepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserRequest::userimagepath() const {
  // @@protoc_insertion_point(field_get:CreateUserRequest.UserImagePath)
  return userimagepath_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_userimagepath(const ::std::string& value) {
  
  userimagepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateUserRequest.UserImagePath)
}
inline void CreateUserRequest::set_userimagepath(const char* value) {
  
  userimagepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateUserRequest.UserImagePath)
}
inline void CreateUserRequest::set_userimagepath(const char* value, size_t size) {
  
  userimagepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateUserRequest.UserImagePath)
}
inline ::std::string* CreateUserRequest::mutable_userimagepath() {
  
  // @@protoc_insertion_point(field_mutable:CreateUserRequest.UserImagePath)
  return userimagepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserRequest::release_userimagepath() {
  // @@protoc_insertion_point(field_release:CreateUserRequest.UserImagePath)
  
  return userimagepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRequest::set_allocated_userimagepath(::std::string* userimagepath) {
  if (userimagepath != NULL) {
    
  } else {
    
  }
  userimagepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userimagepath);
  // @@protoc_insertion_point(field_set_allocated:CreateUserRequest.UserImagePath)
}

inline const CreateUserRequest* CreateUserRequest::internal_default_instance() {
  return &CreateUserRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// CreateUserRepsone

// optional string result = 1;
inline void CreateUserRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateUserRepsone::result() const {
  // @@protoc_insertion_point(field_get:CreateUserRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateUserRepsone.result)
}
inline void CreateUserRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateUserRepsone.result)
}
inline void CreateUserRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateUserRepsone.result)
}
inline ::std::string* CreateUserRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:CreateUserRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateUserRepsone::release_result() {
  // @@protoc_insertion_point(field_release:CreateUserRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateUserRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:CreateUserRepsone.result)
}

inline const CreateUserRepsone* CreateUserRepsone::internal_default_instance() {
  return &CreateUserRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_createUser_2eproto__INCLUDED
