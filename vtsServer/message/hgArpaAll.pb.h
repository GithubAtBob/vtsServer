// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgArpaAll.proto

#ifndef PROTOBUF_hgArpaAll_2eproto__INCLUDED
#define PROTOBUF_hgArpaAll_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgArpaAll_2eproto();
void protobuf_InitDefaults_hgArpaAll_2eproto();
void protobuf_AssignDesc_hgArpaAll_2eproto();
void protobuf_ShutdownFile_hgArpaAll_2eproto();

class hgArpaAllPack;

// ===================================================================

class hgArpaAllPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgArpaAllPack) */ {
 public:
  hgArpaAllPack();
  virtual ~hgArpaAllPack();

  hgArpaAllPack(const hgArpaAllPack& from);

  inline hgArpaAllPack& operator=(const hgArpaAllPack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgArpaAllPack& default_instance();

  static const hgArpaAllPack* internal_default_instance();

  void Swap(hgArpaAllPack* other);

  // implements Message ----------------------------------------------

  inline hgArpaAllPack* New() const { return New(NULL); }

  hgArpaAllPack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgArpaAllPack& from);
  void MergeFrom(const hgArpaAllPack& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgArpaAllPack* other);
  void UnsafeMergeFrom(const hgArpaAllPack& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes arpadata = 1;
  void clear_arpadata();
  static const int kArpadataFieldNumber = 1;
  const ::std::string& arpadata() const;
  void set_arpadata(const ::std::string& value);
  void set_arpadata(const char* value);
  void set_arpadata(const void* value, size_t size);
  ::std::string* mutable_arpadata();
  ::std::string* release_arpadata();
  void set_allocated_arpadata(::std::string* arpadata);

  // @@protoc_insertion_point(class_scope:hgArpaAllPack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr arpadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgArpaAll_2eproto_impl();
  friend void  protobuf_AddDesc_hgArpaAll_2eproto_impl();
  friend void protobuf_AssignDesc_hgArpaAll_2eproto();
  friend void protobuf_ShutdownFile_hgArpaAll_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgArpaAllPack> hgArpaAllPack_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgArpaAllPack

// optional bytes arpadata = 1;
inline void hgArpaAllPack::clear_arpadata() {
  arpadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgArpaAllPack::arpadata() const {
  // @@protoc_insertion_point(field_get:hgArpaAllPack.arpadata)
  return arpadata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgArpaAllPack::set_arpadata(const ::std::string& value) {
  
  arpadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgArpaAllPack.arpadata)
}
inline void hgArpaAllPack::set_arpadata(const char* value) {
  
  arpadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgArpaAllPack.arpadata)
}
inline void hgArpaAllPack::set_arpadata(const void* value, size_t size) {
  
  arpadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgArpaAllPack.arpadata)
}
inline ::std::string* hgArpaAllPack::mutable_arpadata() {
  
  // @@protoc_insertion_point(field_mutable:hgArpaAllPack.arpadata)
  return arpadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgArpaAllPack::release_arpadata() {
  // @@protoc_insertion_point(field_release:hgArpaAllPack.arpadata)
  
  return arpadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgArpaAllPack::set_allocated_arpadata(::std::string* arpadata) {
  if (arpadata != NULL) {
    
  } else {
    
  }
  arpadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arpadata);
  // @@protoc_insertion_point(field_set_allocated:hgArpaAllPack.arpadata)
}

inline const hgArpaAllPack* hgArpaAllPack::internal_default_instance() {
  return &hgArpaAllPack_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgArpaAll_2eproto__INCLUDED
