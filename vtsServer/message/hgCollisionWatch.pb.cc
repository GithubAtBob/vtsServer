// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgCollisionWatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgCollisionWatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgCollisionWatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgCollisionWatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgCollisionWatchRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgCollisionWatchRepsone_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* hgCollisionCPAType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgCollisionWatch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgCollisionWatch_2eproto() {
  protobuf_AddDesc_hgCollisionWatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgCollisionWatch.proto");
  GOOGLE_CHECK(file != NULL);
  hgCollisionWatch_descriptor_ = file->message_type(0);
  static const int hgCollisionWatch_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatch, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatch, collisionwatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatch, dcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatch, tcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatch, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatch, getcpa_),
  };
  hgCollisionWatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgCollisionWatch_descriptor_,
      hgCollisionWatch::internal_default_instance(),
      hgCollisionWatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgCollisionWatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatch, _internal_metadata_));
  hgCollisionWatchRepsone_descriptor_ = file->message_type(1);
  static const int hgCollisionWatchRepsone_offsets_[1] = {
  };
  hgCollisionWatchRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgCollisionWatchRepsone_descriptor_,
      hgCollisionWatchRepsone::internal_default_instance(),
      hgCollisionWatchRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgCollisionWatchRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCollisionWatchRepsone, _internal_metadata_));
  hgCollisionCPAType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgCollisionWatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgCollisionWatch_descriptor_, hgCollisionWatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgCollisionWatchRepsone_descriptor_, hgCollisionWatchRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgCollisionWatch_2eproto() {
  hgCollisionWatch_default_instance_.Shutdown();
  delete hgCollisionWatch_reflection_;
  hgCollisionWatchRepsone_default_instance_.Shutdown();
  delete hgCollisionWatchRepsone_reflection_;
}

void protobuf_InitDefaults_hgCollisionWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgCollisionWatch_default_instance_.DefaultConstruct();
  hgCollisionWatchRepsone_default_instance_.DefaultConstruct();
  hgCollisionWatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgCollisionWatchRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgCollisionWatch_2eproto_once_);
void protobuf_InitDefaults_hgCollisionWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgCollisionWatch_2eproto_once_,
                 &protobuf_InitDefaults_hgCollisionWatch_2eproto_impl);
}
void protobuf_AddDesc_hgCollisionWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgCollisionWatch_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026hgCollisionWatch.proto\"r\n\020hgCollisionW"
    "atch\022\014\n\004MMSI\030\001 \001(\t\022\026\n\016CollisionWatch\030\002 \001"
    "(\010\022\014\n\004DCPA\030\003 \001(\001\022\014\n\004TCPA\030\004 \001(\001\022\014\n\004Type\030\005"
    " \001(\005\022\016\n\006GetCPA\030\006 \001(\005\"\031\n\027hgCollisionWatch"
    "Repsone*u\n\022hgCollisionCPAType\022\n\n\006Custom\020"
    "\000\022\016\n\nDayDefault\020\001\022\017\n\013DayShipType\020\002\022\020\n\014Ni"
    "ghtDefault\020\003\022\021\n\rNightShipType\020\004\022\r\n\tCPAre"
    "cord\020\005b\006proto3", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgCollisionWatch.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgCollisionWatch_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgCollisionWatch_2eproto_once_);
void protobuf_AddDesc_hgCollisionWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgCollisionWatch_2eproto_once_,
                 &protobuf_AddDesc_hgCollisionWatch_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgCollisionWatch_2eproto {
  StaticDescriptorInitializer_hgCollisionWatch_2eproto() {
    protobuf_AddDesc_hgCollisionWatch_2eproto();
  }
} static_descriptor_initializer_hgCollisionWatch_2eproto_;
const ::google::protobuf::EnumDescriptor* hgCollisionCPAType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgCollisionCPAType_descriptor_;
}
bool hgCollisionCPAType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgCollisionWatch::kMMSIFieldNumber;
const int hgCollisionWatch::kCollisionWatchFieldNumber;
const int hgCollisionWatch::kDCPAFieldNumber;
const int hgCollisionWatch::kTCPAFieldNumber;
const int hgCollisionWatch::kTypeFieldNumber;
const int hgCollisionWatch::kGetCPAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgCollisionWatch::hgCollisionWatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgCollisionWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgCollisionWatch)
}

void hgCollisionWatch::InitAsDefaultInstance() {
}

hgCollisionWatch::hgCollisionWatch(const hgCollisionWatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgCollisionWatch)
}

void hgCollisionWatch::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dcpa_, 0, reinterpret_cast<char*>(&getcpa_) -
    reinterpret_cast<char*>(&dcpa_) + sizeof(getcpa_));
  _cached_size_ = 0;
}

hgCollisionWatch::~hgCollisionWatch() {
  // @@protoc_insertion_point(destructor:hgCollisionWatch)
  SharedDtor();
}

void hgCollisionWatch::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgCollisionWatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgCollisionWatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgCollisionWatch_descriptor_;
}

const hgCollisionWatch& hgCollisionWatch::default_instance() {
  protobuf_InitDefaults_hgCollisionWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgCollisionWatch> hgCollisionWatch_default_instance_;

hgCollisionWatch* hgCollisionWatch::New(::google::protobuf::Arena* arena) const {
  hgCollisionWatch* n = new hgCollisionWatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgCollisionWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:hgCollisionWatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgCollisionWatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgCollisionWatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dcpa_, getcpa_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgCollisionWatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgCollisionWatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgCollisionWatch.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CollisionWatch;
        break;
      }

      // optional bool CollisionWatch = 2;
      case 2: {
        if (tag == 16) {
         parse_CollisionWatch:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collisionwatch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_DCPA;
        break;
      }

      // optional double DCPA = 3;
      case 3: {
        if (tag == 25) {
         parse_DCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_TCPA;
        break;
      }

      // optional double TCPA = 4;
      case 4: {
        if (tag == 33) {
         parse_TCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional int32 Type = 5;
      case 5: {
        if (tag == 40) {
         parse_Type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_GetCPA;
        break;
      }

      // optional int32 GetCPA = 6;
      case 6: {
        if (tag == 48) {
         parse_GetCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgCollisionWatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgCollisionWatch)
  return false;
#undef DO_
}

void hgCollisionWatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgCollisionWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCollisionWatch.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool CollisionWatch = 2;
  if (this->collisionwatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->collisionwatch(), output);
  }

  // optional double DCPA = 3;
  if (this->dcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dcpa(), output);
  }

  // optional double TCPA = 4;
  if (this->tcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tcpa(), output);
  }

  // optional int32 Type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 GetCPA = 6;
  if (this->getcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->getcpa(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgCollisionWatch)
}

::google::protobuf::uint8* hgCollisionWatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgCollisionWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCollisionWatch.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool CollisionWatch = 2;
  if (this->collisionwatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->collisionwatch(), target);
  }

  // optional double DCPA = 3;
  if (this->dcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dcpa(), target);
  }

  // optional double TCPA = 4;
  if (this->tcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tcpa(), target);
  }

  // optional int32 Type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 GetCPA = 6;
  if (this->getcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->getcpa(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgCollisionWatch)
  return target;
}

size_t hgCollisionWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgCollisionWatch)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool CollisionWatch = 2;
  if (this->collisionwatch() != 0) {
    total_size += 1 + 1;
  }

  // optional double DCPA = 3;
  if (this->dcpa() != 0) {
    total_size += 1 + 8;
  }

  // optional double TCPA = 4;
  if (this->tcpa() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 Type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional int32 GetCPA = 6;
  if (this->getcpa() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->getcpa());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgCollisionWatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgCollisionWatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgCollisionWatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgCollisionWatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgCollisionWatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgCollisionWatch)
    UnsafeMergeFrom(*source);
  }
}

void hgCollisionWatch::MergeFrom(const hgCollisionWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgCollisionWatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgCollisionWatch::UnsafeMergeFrom(const hgCollisionWatch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.collisionwatch() != 0) {
    set_collisionwatch(from.collisionwatch());
  }
  if (from.dcpa() != 0) {
    set_dcpa(from.dcpa());
  }
  if (from.tcpa() != 0) {
    set_tcpa(from.tcpa());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.getcpa() != 0) {
    set_getcpa(from.getcpa());
  }
}

void hgCollisionWatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgCollisionWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgCollisionWatch::CopyFrom(const hgCollisionWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgCollisionWatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgCollisionWatch::IsInitialized() const {

  return true;
}

void hgCollisionWatch::Swap(hgCollisionWatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgCollisionWatch::InternalSwap(hgCollisionWatch* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(collisionwatch_, other->collisionwatch_);
  std::swap(dcpa_, other->dcpa_);
  std::swap(tcpa_, other->tcpa_);
  std::swap(type_, other->type_);
  std::swap(getcpa_, other->getcpa_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgCollisionWatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgCollisionWatch_descriptor_;
  metadata.reflection = hgCollisionWatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCollisionWatch

// optional string MMSI = 1;
void hgCollisionWatch::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgCollisionWatch::mmsi() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCollisionWatch::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCollisionWatch.MMSI)
}
void hgCollisionWatch::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCollisionWatch.MMSI)
}
void hgCollisionWatch::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCollisionWatch.MMSI)
}
::std::string* hgCollisionWatch::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCollisionWatch.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgCollisionWatch::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgCollisionWatch.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCollisionWatch::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCollisionWatch.MMSI)
}

// optional bool CollisionWatch = 2;
void hgCollisionWatch::clear_collisionwatch() {
  collisionwatch_ = false;
}
bool hgCollisionWatch::collisionwatch() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.CollisionWatch)
  return collisionwatch_;
}
void hgCollisionWatch::set_collisionwatch(bool value) {
  
  collisionwatch_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.CollisionWatch)
}

// optional double DCPA = 3;
void hgCollisionWatch::clear_dcpa() {
  dcpa_ = 0;
}
double hgCollisionWatch::dcpa() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.DCPA)
  return dcpa_;
}
void hgCollisionWatch::set_dcpa(double value) {
  
  dcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.DCPA)
}

// optional double TCPA = 4;
void hgCollisionWatch::clear_tcpa() {
  tcpa_ = 0;
}
double hgCollisionWatch::tcpa() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.TCPA)
  return tcpa_;
}
void hgCollisionWatch::set_tcpa(double value) {
  
  tcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.TCPA)
}

// optional int32 Type = 5;
void hgCollisionWatch::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 hgCollisionWatch::type() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.Type)
  return type_;
}
void hgCollisionWatch::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.Type)
}

// optional int32 GetCPA = 6;
void hgCollisionWatch::clear_getcpa() {
  getcpa_ = 0;
}
::google::protobuf::int32 hgCollisionWatch::getcpa() const {
  // @@protoc_insertion_point(field_get:hgCollisionWatch.GetCPA)
  return getcpa_;
}
void hgCollisionWatch::set_getcpa(::google::protobuf::int32 value) {
  
  getcpa_ = value;
  // @@protoc_insertion_point(field_set:hgCollisionWatch.GetCPA)
}

inline const hgCollisionWatch* hgCollisionWatch::internal_default_instance() {
  return &hgCollisionWatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgCollisionWatchRepsone::hgCollisionWatchRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgCollisionWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgCollisionWatchRepsone)
}

void hgCollisionWatchRepsone::InitAsDefaultInstance() {
}

hgCollisionWatchRepsone::hgCollisionWatchRepsone(const hgCollisionWatchRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgCollisionWatchRepsone)
}

void hgCollisionWatchRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgCollisionWatchRepsone::~hgCollisionWatchRepsone() {
  // @@protoc_insertion_point(destructor:hgCollisionWatchRepsone)
  SharedDtor();
}

void hgCollisionWatchRepsone::SharedDtor() {
}

void hgCollisionWatchRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgCollisionWatchRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgCollisionWatchRepsone_descriptor_;
}

const hgCollisionWatchRepsone& hgCollisionWatchRepsone::default_instance() {
  protobuf_InitDefaults_hgCollisionWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgCollisionWatchRepsone> hgCollisionWatchRepsone_default_instance_;

hgCollisionWatchRepsone* hgCollisionWatchRepsone::New(::google::protobuf::Arena* arena) const {
  hgCollisionWatchRepsone* n = new hgCollisionWatchRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgCollisionWatchRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgCollisionWatchRepsone)
}

bool hgCollisionWatchRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgCollisionWatchRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgCollisionWatchRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgCollisionWatchRepsone)
  return false;
#undef DO_
}

void hgCollisionWatchRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgCollisionWatchRepsone)
  // @@protoc_insertion_point(serialize_end:hgCollisionWatchRepsone)
}

::google::protobuf::uint8* hgCollisionWatchRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgCollisionWatchRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgCollisionWatchRepsone)
  return target;
}

size_t hgCollisionWatchRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgCollisionWatchRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgCollisionWatchRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgCollisionWatchRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgCollisionWatchRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgCollisionWatchRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgCollisionWatchRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgCollisionWatchRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgCollisionWatchRepsone::MergeFrom(const hgCollisionWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgCollisionWatchRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgCollisionWatchRepsone::UnsafeMergeFrom(const hgCollisionWatchRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgCollisionWatchRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgCollisionWatchRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgCollisionWatchRepsone::CopyFrom(const hgCollisionWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgCollisionWatchRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgCollisionWatchRepsone::IsInitialized() const {

  return true;
}

void hgCollisionWatchRepsone::Swap(hgCollisionWatchRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgCollisionWatchRepsone::InternalSwap(hgCollisionWatchRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgCollisionWatchRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgCollisionWatchRepsone_descriptor_;
  metadata.reflection = hgCollisionWatchRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCollisionWatchRepsone

inline const hgCollisionWatchRepsone* hgCollisionWatchRepsone::internal_default_instance() {
  return &hgCollisionWatchRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
