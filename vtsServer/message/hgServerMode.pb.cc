// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgServerMode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgServerMode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgServerMode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgServerMode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgServerMode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgServerMode_2eproto() {
  protobuf_AddDesc_hgServerMode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgServerMode.proto");
  GOOGLE_CHECK(file != NULL);
  hgServerMode_descriptor_ = file->message_type(0);
  static const int hgServerMode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgServerMode, playback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgServerMode, freshmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgServerMode, aisdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgServerMode, radardata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgServerMode, radarimage_),
  };
  hgServerMode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgServerMode_descriptor_,
      hgServerMode::internal_default_instance(),
      hgServerMode_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgServerMode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgServerMode, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgServerMode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgServerMode_descriptor_, hgServerMode::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgServerMode_2eproto() {
  hgServerMode_default_instance_.Shutdown();
  delete hgServerMode_reflection_;
}

void protobuf_InitDefaults_hgServerMode_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  hgServerMode_default_instance_.DefaultConstruct();
  hgServerMode_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgServerMode_2eproto_once_);
void protobuf_InitDefaults_hgServerMode_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgServerMode_2eproto_once_,
                 &protobuf_InitDefaults_hgServerMode_2eproto_impl);
}
void protobuf_AddDesc_hgServerMode_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgServerMode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022hgServerMode.proto\"k\n\014hgServerMode\022\020\n\010"
    "playback\030\001 \001(\005\022\021\n\tfreshMode\030\002 \001(\005\022\017\n\007ais"
    "Data\030\003 \001(\005\022\021\n\tradarData\030\004 \001(\005\022\022\n\nradarIm"
    "age\030\005 \001(\005b\006proto3", 137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgServerMode.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgServerMode_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgServerMode_2eproto_once_);
void protobuf_AddDesc_hgServerMode_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgServerMode_2eproto_once_,
                 &protobuf_AddDesc_hgServerMode_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgServerMode_2eproto {
  StaticDescriptorInitializer_hgServerMode_2eproto() {
    protobuf_AddDesc_hgServerMode_2eproto();
  }
} static_descriptor_initializer_hgServerMode_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgServerMode::kPlaybackFieldNumber;
const int hgServerMode::kFreshModeFieldNumber;
const int hgServerMode::kAisDataFieldNumber;
const int hgServerMode::kRadarDataFieldNumber;
const int hgServerMode::kRadarImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgServerMode::hgServerMode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgServerMode_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgServerMode)
}

void hgServerMode::InitAsDefaultInstance() {
}

hgServerMode::hgServerMode(const hgServerMode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgServerMode)
}

void hgServerMode::SharedCtor() {
  ::memset(&playback_, 0, reinterpret_cast<char*>(&radarimage_) -
    reinterpret_cast<char*>(&playback_) + sizeof(radarimage_));
  _cached_size_ = 0;
}

hgServerMode::~hgServerMode() {
  // @@protoc_insertion_point(destructor:hgServerMode)
  SharedDtor();
}

void hgServerMode::SharedDtor() {
}

void hgServerMode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgServerMode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgServerMode_descriptor_;
}

const hgServerMode& hgServerMode::default_instance() {
  protobuf_InitDefaults_hgServerMode_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgServerMode> hgServerMode_default_instance_;

hgServerMode* hgServerMode::New(::google::protobuf::Arena* arena) const {
  hgServerMode* n = new hgServerMode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgServerMode::Clear() {
// @@protoc_insertion_point(message_clear_start:hgServerMode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgServerMode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgServerMode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(playback_, radarimage_);

#undef ZR_HELPER_
#undef ZR_

}

bool hgServerMode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgServerMode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playback = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_freshMode;
        break;
      }

      // optional int32 freshMode = 2;
      case 2: {
        if (tag == 16) {
         parse_freshMode:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freshmode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aisData;
        break;
      }

      // optional int32 aisData = 3;
      case 3: {
        if (tag == 24) {
         parse_aisData:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aisdata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_radarData;
        break;
      }

      // optional int32 radarData = 4;
      case 4: {
        if (tag == 32) {
         parse_radarData:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radardata_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_radarImage;
        break;
      }

      // optional int32 radarImage = 5;
      case 5: {
        if (tag == 40) {
         parse_radarImage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radarimage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgServerMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgServerMode)
  return false;
#undef DO_
}

void hgServerMode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgServerMode)
  // optional int32 playback = 1;
  if (this->playback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playback(), output);
  }

  // optional int32 freshMode = 2;
  if (this->freshmode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freshmode(), output);
  }

  // optional int32 aisData = 3;
  if (this->aisdata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->aisdata(), output);
  }

  // optional int32 radarData = 4;
  if (this->radardata() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->radardata(), output);
  }

  // optional int32 radarImage = 5;
  if (this->radarimage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->radarimage(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgServerMode)
}

::google::protobuf::uint8* hgServerMode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgServerMode)
  // optional int32 playback = 1;
  if (this->playback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playback(), target);
  }

  // optional int32 freshMode = 2;
  if (this->freshmode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freshmode(), target);
  }

  // optional int32 aisData = 3;
  if (this->aisdata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->aisdata(), target);
  }

  // optional int32 radarData = 4;
  if (this->radardata() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->radardata(), target);
  }

  // optional int32 radarImage = 5;
  if (this->radarimage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->radarimage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgServerMode)
  return target;
}

size_t hgServerMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgServerMode)
  size_t total_size = 0;

  // optional int32 playback = 1;
  if (this->playback() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playback());
  }

  // optional int32 freshMode = 2;
  if (this->freshmode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->freshmode());
  }

  // optional int32 aisData = 3;
  if (this->aisdata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->aisdata());
  }

  // optional int32 radarData = 4;
  if (this->radardata() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radardata());
  }

  // optional int32 radarImage = 5;
  if (this->radarimage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radarimage());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgServerMode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgServerMode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgServerMode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgServerMode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgServerMode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgServerMode)
    UnsafeMergeFrom(*source);
  }
}

void hgServerMode::MergeFrom(const hgServerMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgServerMode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgServerMode::UnsafeMergeFrom(const hgServerMode& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.playback() != 0) {
    set_playback(from.playback());
  }
  if (from.freshmode() != 0) {
    set_freshmode(from.freshmode());
  }
  if (from.aisdata() != 0) {
    set_aisdata(from.aisdata());
  }
  if (from.radardata() != 0) {
    set_radardata(from.radardata());
  }
  if (from.radarimage() != 0) {
    set_radarimage(from.radarimage());
  }
}

void hgServerMode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgServerMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgServerMode::CopyFrom(const hgServerMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgServerMode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgServerMode::IsInitialized() const {

  return true;
}

void hgServerMode::Swap(hgServerMode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgServerMode::InternalSwap(hgServerMode* other) {
  std::swap(playback_, other->playback_);
  std::swap(freshmode_, other->freshmode_);
  std::swap(aisdata_, other->aisdata_);
  std::swap(radardata_, other->radardata_);
  std::swap(radarimage_, other->radarimage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgServerMode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgServerMode_descriptor_;
  metadata.reflection = hgServerMode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgServerMode

// optional int32 playback = 1;
void hgServerMode::clear_playback() {
  playback_ = 0;
}
::google::protobuf::int32 hgServerMode::playback() const {
  // @@protoc_insertion_point(field_get:hgServerMode.playback)
  return playback_;
}
void hgServerMode::set_playback(::google::protobuf::int32 value) {
  
  playback_ = value;
  // @@protoc_insertion_point(field_set:hgServerMode.playback)
}

// optional int32 freshMode = 2;
void hgServerMode::clear_freshmode() {
  freshmode_ = 0;
}
::google::protobuf::int32 hgServerMode::freshmode() const {
  // @@protoc_insertion_point(field_get:hgServerMode.freshMode)
  return freshmode_;
}
void hgServerMode::set_freshmode(::google::protobuf::int32 value) {
  
  freshmode_ = value;
  // @@protoc_insertion_point(field_set:hgServerMode.freshMode)
}

// optional int32 aisData = 3;
void hgServerMode::clear_aisdata() {
  aisdata_ = 0;
}
::google::protobuf::int32 hgServerMode::aisdata() const {
  // @@protoc_insertion_point(field_get:hgServerMode.aisData)
  return aisdata_;
}
void hgServerMode::set_aisdata(::google::protobuf::int32 value) {
  
  aisdata_ = value;
  // @@protoc_insertion_point(field_set:hgServerMode.aisData)
}

// optional int32 radarData = 4;
void hgServerMode::clear_radardata() {
  radardata_ = 0;
}
::google::protobuf::int32 hgServerMode::radardata() const {
  // @@protoc_insertion_point(field_get:hgServerMode.radarData)
  return radardata_;
}
void hgServerMode::set_radardata(::google::protobuf::int32 value) {
  
  radardata_ = value;
  // @@protoc_insertion_point(field_set:hgServerMode.radarData)
}

// optional int32 radarImage = 5;
void hgServerMode::clear_radarimage() {
  radarimage_ = 0;
}
::google::protobuf::int32 hgServerMode::radarimage() const {
  // @@protoc_insertion_point(field_get:hgServerMode.radarImage)
  return radarimage_;
}
void hgServerMode::set_radarimage(::google::protobuf::int32 value) {
  
  radarimage_ = value;
  // @@protoc_insertion_point(field_set:hgServerMode.radarImage)
}

inline const hgServerMode* hgServerMode::internal_default_instance() {
  return &hgServerMode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
