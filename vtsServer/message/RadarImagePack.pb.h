// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RadarImagePack.proto

#ifndef PROTOBUF_RadarImagePack_2eproto__INCLUDED
#define PROTOBUF_RadarImagePack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RadarImagePack_2eproto();
void protobuf_InitDefaults_RadarImagePack_2eproto();
void protobuf_AssignDesc_RadarImagePack_2eproto();
void protobuf_ShutdownFile_RadarImagePack_2eproto();

class ArpaTargetPack;
class RadarAISStatePack;
class RadarHeader;
class RadarImagePack;
class RadarRequst;

// ===================================================================

class RadarImagePack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RadarImagePack) */ {
 public:
  RadarImagePack();
  virtual ~RadarImagePack();

  RadarImagePack(const RadarImagePack& from);

  inline RadarImagePack& operator=(const RadarImagePack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarImagePack& default_instance();

  static const RadarImagePack* internal_default_instance();

  void Swap(RadarImagePack* other);

  // implements Message ----------------------------------------------

  inline RadarImagePack* New() const { return New(NULL); }

  RadarImagePack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarImagePack& from);
  void MergeFrom(const RadarImagePack& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarImagePack* other);
  void UnsafeMergeFrom(const RadarImagePack& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 packettype = 1;
  void clear_packettype();
  static const int kPackettypeFieldNumber = 1;
  ::google::protobuf::int32 packettype() const;
  void set_packettype(::google::protobuf::int32 value);

  // repeated string reserved0 = 2;
  int reserved0_size() const;
  void clear_reserved0();
  static const int kReserved0FieldNumber = 2;
  const ::std::string& reserved0(int index) const;
  ::std::string* mutable_reserved0(int index);
  void set_reserved0(int index, const ::std::string& value);
  void set_reserved0(int index, const char* value);
  void set_reserved0(int index, const char* value, size_t size);
  ::std::string* add_reserved0();
  void add_reserved0(const ::std::string& value);
  void add_reserved0(const char* value);
  void add_reserved0(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reserved0() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reserved0();

  // optional int64 utc = 3;
  void clear_utc();
  static const int kUtcFieldNumber = 3;
  ::google::protobuf::int64 utc() const;
  void set_utc(::google::protobuf::int64 value);

  // optional double view_center_x = 4;
  void clear_view_center_x();
  static const int kViewCenterXFieldNumber = 4;
  double view_center_x() const;
  void set_view_center_x(double value);

  // optional double view_center_y = 5;
  void clear_view_center_y();
  static const int kViewCenterYFieldNumber = 5;
  double view_center_y() const;
  void set_view_center_y(double value);

  // optional double view_scale = 6;
  void clear_view_scale();
  static const int kViewScaleFieldNumber = 6;
  double view_scale() const;
  void set_view_scale(double value);

  // repeated string reserved1 = 7;
  int reserved1_size() const;
  void clear_reserved1();
  static const int kReserved1FieldNumber = 7;
  const ::std::string& reserved1(int index) const;
  ::std::string* mutable_reserved1(int index);
  void set_reserved1(int index, const ::std::string& value);
  void set_reserved1(int index, const char* value);
  void set_reserved1(int index, const char* value, size_t size);
  ::std::string* add_reserved1();
  void add_reserved1(const ::std::string& value);
  void add_reserved1(const char* value);
  void add_reserved1(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& reserved1() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reserved1();

  // optional bytes image = 8;
  void clear_image();
  static const int kImageFieldNumber = 8;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // optional string clientname = 9;
  void clear_clientname();
  static const int kClientnameFieldNumber = 9;
  const ::std::string& clientname() const;
  void set_clientname(const ::std::string& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  ::std::string* mutable_clientname();
  ::std::string* release_clientname();
  void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:RadarImagePack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reserved0_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reserved1_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  ::google::protobuf::internal::ArenaStringPtr clientname_;
  ::google::protobuf::int64 utc_;
  double view_center_x_;
  double view_center_y_;
  double view_scale_;
  ::google::protobuf::int32 packettype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_RadarImagePack_2eproto_impl();
  friend void  protobuf_AddDesc_RadarImagePack_2eproto_impl();
  friend void protobuf_AssignDesc_RadarImagePack_2eproto();
  friend void protobuf_ShutdownFile_RadarImagePack_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadarImagePack> RadarImagePack_default_instance_;

// -------------------------------------------------------------------

class ArpaTargetPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArpaTargetPack) */ {
 public:
  ArpaTargetPack();
  virtual ~ArpaTargetPack();

  ArpaTargetPack(const ArpaTargetPack& from);

  inline ArpaTargetPack& operator=(const ArpaTargetPack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArpaTargetPack& default_instance();

  static const ArpaTargetPack* internal_default_instance();

  void Swap(ArpaTargetPack* other);

  // implements Message ----------------------------------------------

  inline ArpaTargetPack* New() const { return New(NULL); }

  ArpaTargetPack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArpaTargetPack& from);
  void MergeFrom(const ArpaTargetPack& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArpaTargetPack* other);
  void UnsafeMergeFrom(const ArpaTargetPack& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // optional int32 reserved = 2;
  void clear_reserved();
  static const int kReservedFieldNumber = 2;
  ::google::protobuf::int32 reserved() const;
  void set_reserved(::google::protobuf::int32 value);

  // optional int32 rng = 3;
  void clear_rng();
  static const int kRngFieldNumber = 3;
  ::google::protobuf::int32 rng() const;
  void set_rng(::google::protobuf::int32 value);

  // optional int32 brg = 4;
  void clear_brg();
  static const int kBrgFieldNumber = 4;
  ::google::protobuf::int32 brg() const;
  void set_brg(::google::protobuf::int32 value);

  // optional int32 orientation_size = 5;
  void clear_orientation_size();
  static const int kOrientationSizeFieldNumber = 5;
  ::google::protobuf::int32 orientation_size() const;
  void set_orientation_size(::google::protobuf::int32 value);

  // optional int32 sog = 6;
  void clear_sog();
  static const int kSogFieldNumber = 6;
  ::google::protobuf::int32 sog() const;
  void set_sog(::google::protobuf::int32 value);

  // optional int32 cog = 7;
  void clear_cog();
  static const int kCogFieldNumber = 7;
  ::google::protobuf::int32 cog() const;
  void set_cog(::google::protobuf::int32 value);

  // optional int32 scans = 8;
  void clear_scans();
  static const int kScansFieldNumber = 8;
  ::google::protobuf::int32 scans() const;
  void set_scans(::google::protobuf::int32 value);

  // optional int32 flags = 9;
  void clear_flags();
  static const int kFlagsFieldNumber = 9;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // optional int32 longitude = 10;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 10;
  ::google::protobuf::int32 longitude() const;
  void set_longitude(::google::protobuf::int32 value);

  // optional int32 latitude = 11;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 11;
  ::google::protobuf::int32 latitude() const;
  void set_latitude(::google::protobuf::int32 value);

  // optional string clientname = 12;
  void clear_clientname();
  static const int kClientnameFieldNumber = 12;
  const ::std::string& clientname() const;
  void set_clientname(const ::std::string& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  ::std::string* mutable_clientname();
  ::std::string* release_clientname();
  void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:ArpaTargetPack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientname_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 reserved_;
  ::google::protobuf::int32 rng_;
  ::google::protobuf::int32 brg_;
  ::google::protobuf::int32 orientation_size_;
  ::google::protobuf::int32 sog_;
  ::google::protobuf::int32 cog_;
  ::google::protobuf::int32 scans_;
  ::google::protobuf::int32 flags_;
  ::google::protobuf::int32 longitude_;
  ::google::protobuf::int32 latitude_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_RadarImagePack_2eproto_impl();
  friend void  protobuf_AddDesc_RadarImagePack_2eproto_impl();
  friend void protobuf_AssignDesc_RadarImagePack_2eproto();
  friend void protobuf_ShutdownFile_RadarImagePack_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ArpaTargetPack> ArpaTargetPack_default_instance_;

// -------------------------------------------------------------------

class RadarHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RadarHeader) */ {
 public:
  RadarHeader();
  virtual ~RadarHeader();

  RadarHeader(const RadarHeader& from);

  inline RadarHeader& operator=(const RadarHeader& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarHeader& default_instance();

  static const RadarHeader* internal_default_instance();

  void Swap(RadarHeader* other);

  // implements Message ----------------------------------------------

  inline RadarHeader* New() const { return New(NULL); }

  RadarHeader* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarHeader& from);
  void MergeFrom(const RadarHeader& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarHeader* other);
  void UnsafeMergeFrom(const RadarHeader& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 packettype = 1;
  void clear_packettype();
  static const int kPackettypeFieldNumber = 1;
  ::google::protobuf::int32 packettype() const;
  void set_packettype(::google::protobuf::int32 value);

  // optional int32 stateflags = 2;
  void clear_stateflags();
  static const int kStateflagsFieldNumber = 2;
  ::google::protobuf::int32 stateflags() const;
  void set_stateflags(::google::protobuf::int32 value);

  // repeated int32 reserved0 = 3;
  int reserved0_size() const;
  void clear_reserved0();
  static const int kReserved0FieldNumber = 3;
  ::google::protobuf::int32 reserved0(int index) const;
  void set_reserved0(int index, ::google::protobuf::int32 value);
  void add_reserved0(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      reserved0() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_reserved0();

  // optional int64 utc = 4;
  void clear_utc();
  static const int kUtcFieldNumber = 4;
  ::google::protobuf::int64 utc() const;
  void set_utc(::google::protobuf::int64 value);

  // repeated int32 control = 5;
  int control_size() const;
  void clear_control();
  static const int kControlFieldNumber = 5;
  ::google::protobuf::int32 control(int index) const;
  void set_control(int index, ::google::protobuf::int32 value);
  void add_control(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      control() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_control();

  // optional int32 tune_min = 6;
  void clear_tune_min();
  static const int kTuneMinFieldNumber = 6;
  ::google::protobuf::int32 tune_min() const;
  void set_tune_min(::google::protobuf::int32 value);

  // optional int32 tune_max = 7;
  void clear_tune_max();
  static const int kTuneMaxFieldNumber = 7;
  ::google::protobuf::int32 tune_max() const;
  void set_tune_max(::google::protobuf::int32 value);

  // optional int32 tune_value = 8;
  void clear_tune_value();
  static const int kTuneValueFieldNumber = 8;
  ::google::protobuf::int32 tune_value() const;
  void set_tune_value(::google::protobuf::int32 value);

  // repeated int32 pad = 9;
  int pad_size() const;
  void clear_pad();
  static const int kPadFieldNumber = 9;
  ::google::protobuf::int32 pad(int index) const;
  void set_pad(int index, ::google::protobuf::int32 value);
  void add_pad(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pad() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pad();

  // optional int32 controlbits0 = 10;
  void clear_controlbits0();
  static const int kControlbits0FieldNumber = 10;
  ::google::protobuf::int32 controlbits0() const;
  void set_controlbits0(::google::protobuf::int32 value);

  // optional int32 controlbits1 = 11;
  void clear_controlbits1();
  static const int kControlbits1FieldNumber = 11;
  ::google::protobuf::int32 controlbits1() const;
  void set_controlbits1(::google::protobuf::int32 value);

  // optional string clientname = 12;
  void clear_clientname();
  static const int kClientnameFieldNumber = 12;
  const ::std::string& clientname() const;
  void set_clientname(const ::std::string& value);
  void set_clientname(const char* value);
  void set_clientname(const char* value, size_t size);
  ::std::string* mutable_clientname();
  ::std::string* release_clientname();
  void set_allocated_clientname(::std::string* clientname);

  // optional int32 arpaState = 13;
  void clear_arpastate();
  static const int kArpaStateFieldNumber = 13;
  ::google::protobuf::int32 arpastate() const;
  void set_arpastate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RadarHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > reserved0_;
  mutable int _reserved0_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > control_;
  mutable int _control_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pad_;
  mutable int _pad_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr clientname_;
  ::google::protobuf::int32 packettype_;
  ::google::protobuf::int32 stateflags_;
  ::google::protobuf::int64 utc_;
  ::google::protobuf::int32 tune_min_;
  ::google::protobuf::int32 tune_max_;
  ::google::protobuf::int32 tune_value_;
  ::google::protobuf::int32 controlbits0_;
  ::google::protobuf::int32 controlbits1_;
  ::google::protobuf::int32 arpastate_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_RadarImagePack_2eproto_impl();
  friend void  protobuf_AddDesc_RadarImagePack_2eproto_impl();
  friend void protobuf_AssignDesc_RadarImagePack_2eproto();
  friend void protobuf_ShutdownFile_RadarImagePack_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadarHeader> RadarHeader_default_instance_;

// -------------------------------------------------------------------

class RadarRequst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RadarRequst) */ {
 public:
  RadarRequst();
  virtual ~RadarRequst();

  RadarRequst(const RadarRequst& from);

  inline RadarRequst& operator=(const RadarRequst& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRequst& default_instance();

  static const RadarRequst* internal_default_instance();

  void Swap(RadarRequst* other);

  // implements Message ----------------------------------------------

  inline RadarRequst* New() const { return New(NULL); }

  RadarRequst* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRequst& from);
  void MergeFrom(const RadarRequst& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarRequst* other);
  void UnsafeMergeFrom(const RadarRequst& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mess = 1;
  void clear_mess();
  static const int kMessFieldNumber = 1;
  const ::std::string& mess() const;
  void set_mess(const ::std::string& value);
  void set_mess(const char* value);
  void set_mess(const char* value, size_t size);
  ::std::string* mutable_mess();
  ::std::string* release_mess();
  void set_allocated_mess(::std::string* mess);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:RadarRequst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mess_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_RadarImagePack_2eproto_impl();
  friend void  protobuf_AddDesc_RadarImagePack_2eproto_impl();
  friend void protobuf_AssignDesc_RadarImagePack_2eproto();
  friend void protobuf_ShutdownFile_RadarImagePack_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadarRequst> RadarRequst_default_instance_;

// -------------------------------------------------------------------

class RadarAISStatePack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RadarAISStatePack) */ {
 public:
  RadarAISStatePack();
  virtual ~RadarAISStatePack();

  RadarAISStatePack(const RadarAISStatePack& from);

  inline RadarAISStatePack& operator=(const RadarAISStatePack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarAISStatePack& default_instance();

  static const RadarAISStatePack* internal_default_instance();

  void Swap(RadarAISStatePack* other);

  // implements Message ----------------------------------------------

  inline RadarAISStatePack* New() const { return New(NULL); }

  RadarAISStatePack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarAISStatePack& from);
  void MergeFrom(const RadarAISStatePack& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarAISStatePack* other);
  void UnsafeMergeFrom(const RadarAISStatePack& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // optional int32 reserved = 2;
  void clear_reserved();
  static const int kReservedFieldNumber = 2;
  ::google::protobuf::int32 reserved() const;
  void set_reserved(::google::protobuf::int32 value);

  // optional int32 mms_id = 3;
  void clear_mms_id();
  static const int kMmsIdFieldNumber = 3;
  ::google::protobuf::int32 mms_id() const;
  void set_mms_id(::google::protobuf::int32 value);

  // optional int32 imo = 4;
  void clear_imo();
  static const int kImoFieldNumber = 4;
  ::google::protobuf::int32 imo() const;
  void set_imo(::google::protobuf::int32 value);

  // optional string callsign = 5;
  void clear_callsign();
  static const int kCallsignFieldNumber = 5;
  const ::std::string& callsign() const;
  void set_callsign(const ::std::string& value);
  void set_callsign(const char* value);
  void set_callsign(const char* value, size_t size);
  ::std::string* mutable_callsign();
  ::std::string* release_callsign();
  void set_allocated_callsign(::std::string* callsign);

  // optional string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string destination = 7;
  void clear_destination();
  static const int kDestinationFieldNumber = 7;
  const ::std::string& destination() const;
  void set_destination(const ::std::string& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  ::std::string* mutable_destination();
  ::std::string* release_destination();
  void set_allocated_destination(::std::string* destination);

  // optional int32 cargo = 8;
  void clear_cargo();
  static const int kCargoFieldNumber = 8;
  ::google::protobuf::int32 cargo() const;
  void set_cargo(::google::protobuf::int32 value);

  // optional int32 dimensions = 9;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 9;
  ::google::protobuf::int32 dimensions() const;
  void set_dimensions(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RadarAISStatePack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr callsign_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr destination_;
  ::google::protobuf::int32 number_;
  ::google::protobuf::int32 reserved_;
  ::google::protobuf::int32 mms_id_;
  ::google::protobuf::int32 imo_;
  ::google::protobuf::int32 cargo_;
  ::google::protobuf::int32 dimensions_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_RadarImagePack_2eproto_impl();
  friend void  protobuf_AddDesc_RadarImagePack_2eproto_impl();
  friend void protobuf_AssignDesc_RadarImagePack_2eproto();
  friend void protobuf_ShutdownFile_RadarImagePack_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadarAISStatePack> RadarAISStatePack_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarImagePack

// optional int32 packettype = 1;
inline void RadarImagePack::clear_packettype() {
  packettype_ = 0;
}
inline ::google::protobuf::int32 RadarImagePack::packettype() const {
  // @@protoc_insertion_point(field_get:RadarImagePack.packettype)
  return packettype_;
}
inline void RadarImagePack::set_packettype(::google::protobuf::int32 value) {
  
  packettype_ = value;
  // @@protoc_insertion_point(field_set:RadarImagePack.packettype)
}

// repeated string reserved0 = 2;
inline int RadarImagePack::reserved0_size() const {
  return reserved0_.size();
}
inline void RadarImagePack::clear_reserved0() {
  reserved0_.Clear();
}
inline const ::std::string& RadarImagePack::reserved0(int index) const {
  // @@protoc_insertion_point(field_get:RadarImagePack.reserved0)
  return reserved0_.Get(index);
}
inline ::std::string* RadarImagePack::mutable_reserved0(int index) {
  // @@protoc_insertion_point(field_mutable:RadarImagePack.reserved0)
  return reserved0_.Mutable(index);
}
inline void RadarImagePack::set_reserved0(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:RadarImagePack.reserved0)
  reserved0_.Mutable(index)->assign(value);
}
inline void RadarImagePack::set_reserved0(int index, const char* value) {
  reserved0_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RadarImagePack.reserved0)
}
inline void RadarImagePack::set_reserved0(int index, const char* value, size_t size) {
  reserved0_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RadarImagePack.reserved0)
}
inline ::std::string* RadarImagePack::add_reserved0() {
  // @@protoc_insertion_point(field_add_mutable:RadarImagePack.reserved0)
  return reserved0_.Add();
}
inline void RadarImagePack::add_reserved0(const ::std::string& value) {
  reserved0_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RadarImagePack.reserved0)
}
inline void RadarImagePack::add_reserved0(const char* value) {
  reserved0_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RadarImagePack.reserved0)
}
inline void RadarImagePack::add_reserved0(const char* value, size_t size) {
  reserved0_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RadarImagePack.reserved0)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RadarImagePack::reserved0() const {
  // @@protoc_insertion_point(field_list:RadarImagePack.reserved0)
  return reserved0_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RadarImagePack::mutable_reserved0() {
  // @@protoc_insertion_point(field_mutable_list:RadarImagePack.reserved0)
  return &reserved0_;
}

// optional int64 utc = 3;
inline void RadarImagePack::clear_utc() {
  utc_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RadarImagePack::utc() const {
  // @@protoc_insertion_point(field_get:RadarImagePack.utc)
  return utc_;
}
inline void RadarImagePack::set_utc(::google::protobuf::int64 value) {
  
  utc_ = value;
  // @@protoc_insertion_point(field_set:RadarImagePack.utc)
}

// optional double view_center_x = 4;
inline void RadarImagePack::clear_view_center_x() {
  view_center_x_ = 0;
}
inline double RadarImagePack::view_center_x() const {
  // @@protoc_insertion_point(field_get:RadarImagePack.view_center_x)
  return view_center_x_;
}
inline void RadarImagePack::set_view_center_x(double value) {
  
  view_center_x_ = value;
  // @@protoc_insertion_point(field_set:RadarImagePack.view_center_x)
}

// optional double view_center_y = 5;
inline void RadarImagePack::clear_view_center_y() {
  view_center_y_ = 0;
}
inline double RadarImagePack::view_center_y() const {
  // @@protoc_insertion_point(field_get:RadarImagePack.view_center_y)
  return view_center_y_;
}
inline void RadarImagePack::set_view_center_y(double value) {
  
  view_center_y_ = value;
  // @@protoc_insertion_point(field_set:RadarImagePack.view_center_y)
}

// optional double view_scale = 6;
inline void RadarImagePack::clear_view_scale() {
  view_scale_ = 0;
}
inline double RadarImagePack::view_scale() const {
  // @@protoc_insertion_point(field_get:RadarImagePack.view_scale)
  return view_scale_;
}
inline void RadarImagePack::set_view_scale(double value) {
  
  view_scale_ = value;
  // @@protoc_insertion_point(field_set:RadarImagePack.view_scale)
}

// repeated string reserved1 = 7;
inline int RadarImagePack::reserved1_size() const {
  return reserved1_.size();
}
inline void RadarImagePack::clear_reserved1() {
  reserved1_.Clear();
}
inline const ::std::string& RadarImagePack::reserved1(int index) const {
  // @@protoc_insertion_point(field_get:RadarImagePack.reserved1)
  return reserved1_.Get(index);
}
inline ::std::string* RadarImagePack::mutable_reserved1(int index) {
  // @@protoc_insertion_point(field_mutable:RadarImagePack.reserved1)
  return reserved1_.Mutable(index);
}
inline void RadarImagePack::set_reserved1(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:RadarImagePack.reserved1)
  reserved1_.Mutable(index)->assign(value);
}
inline void RadarImagePack::set_reserved1(int index, const char* value) {
  reserved1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RadarImagePack.reserved1)
}
inline void RadarImagePack::set_reserved1(int index, const char* value, size_t size) {
  reserved1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RadarImagePack.reserved1)
}
inline ::std::string* RadarImagePack::add_reserved1() {
  // @@protoc_insertion_point(field_add_mutable:RadarImagePack.reserved1)
  return reserved1_.Add();
}
inline void RadarImagePack::add_reserved1(const ::std::string& value) {
  reserved1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RadarImagePack.reserved1)
}
inline void RadarImagePack::add_reserved1(const char* value) {
  reserved1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RadarImagePack.reserved1)
}
inline void RadarImagePack::add_reserved1(const char* value, size_t size) {
  reserved1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RadarImagePack.reserved1)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RadarImagePack::reserved1() const {
  // @@protoc_insertion_point(field_list:RadarImagePack.reserved1)
  return reserved1_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RadarImagePack::mutable_reserved1() {
  // @@protoc_insertion_point(field_mutable_list:RadarImagePack.reserved1)
  return &reserved1_;
}

// optional bytes image = 8;
inline void RadarImagePack::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarImagePack::image() const {
  // @@protoc_insertion_point(field_get:RadarImagePack.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarImagePack::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarImagePack.image)
}
inline void RadarImagePack::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarImagePack.image)
}
inline void RadarImagePack::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarImagePack.image)
}
inline ::std::string* RadarImagePack::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:RadarImagePack.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarImagePack::release_image() {
  // @@protoc_insertion_point(field_release:RadarImagePack.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarImagePack::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:RadarImagePack.image)
}

// optional string clientname = 9;
inline void RadarImagePack::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarImagePack::clientname() const {
  // @@protoc_insertion_point(field_get:RadarImagePack.clientname)
  return clientname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarImagePack::set_clientname(const ::std::string& value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarImagePack.clientname)
}
inline void RadarImagePack::set_clientname(const char* value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarImagePack.clientname)
}
inline void RadarImagePack::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarImagePack.clientname)
}
inline ::std::string* RadarImagePack::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:RadarImagePack.clientname)
  return clientname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarImagePack::release_clientname() {
  // @@protoc_insertion_point(field_release:RadarImagePack.clientname)
  
  return clientname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarImagePack::set_allocated_clientname(::std::string* clientname) {
  if (clientname != NULL) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:RadarImagePack.clientname)
}

inline const RadarImagePack* RadarImagePack::internal_default_instance() {
  return &RadarImagePack_default_instance_.get();
}
// -------------------------------------------------------------------

// ArpaTargetPack

// optional int32 number = 1;
inline void ArpaTargetPack::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::number() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.number)
  return number_;
}
inline void ArpaTargetPack::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.number)
}

// optional int32 reserved = 2;
inline void ArpaTargetPack::clear_reserved() {
  reserved_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::reserved() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.reserved)
  return reserved_;
}
inline void ArpaTargetPack::set_reserved(::google::protobuf::int32 value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.reserved)
}

// optional int32 rng = 3;
inline void ArpaTargetPack::clear_rng() {
  rng_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::rng() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.rng)
  return rng_;
}
inline void ArpaTargetPack::set_rng(::google::protobuf::int32 value) {
  
  rng_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.rng)
}

// optional int32 brg = 4;
inline void ArpaTargetPack::clear_brg() {
  brg_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::brg() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.brg)
  return brg_;
}
inline void ArpaTargetPack::set_brg(::google::protobuf::int32 value) {
  
  brg_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.brg)
}

// optional int32 orientation_size = 5;
inline void ArpaTargetPack::clear_orientation_size() {
  orientation_size_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::orientation_size() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.orientation_size)
  return orientation_size_;
}
inline void ArpaTargetPack::set_orientation_size(::google::protobuf::int32 value) {
  
  orientation_size_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.orientation_size)
}

// optional int32 sog = 6;
inline void ArpaTargetPack::clear_sog() {
  sog_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::sog() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.sog)
  return sog_;
}
inline void ArpaTargetPack::set_sog(::google::protobuf::int32 value) {
  
  sog_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.sog)
}

// optional int32 cog = 7;
inline void ArpaTargetPack::clear_cog() {
  cog_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::cog() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.cog)
  return cog_;
}
inline void ArpaTargetPack::set_cog(::google::protobuf::int32 value) {
  
  cog_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.cog)
}

// optional int32 scans = 8;
inline void ArpaTargetPack::clear_scans() {
  scans_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::scans() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.scans)
  return scans_;
}
inline void ArpaTargetPack::set_scans(::google::protobuf::int32 value) {
  
  scans_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.scans)
}

// optional int32 flags = 9;
inline void ArpaTargetPack::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::flags() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.flags)
  return flags_;
}
inline void ArpaTargetPack::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.flags)
}

// optional int32 longitude = 10;
inline void ArpaTargetPack::clear_longitude() {
  longitude_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::longitude() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.longitude)
  return longitude_;
}
inline void ArpaTargetPack::set_longitude(::google::protobuf::int32 value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.longitude)
}

// optional int32 latitude = 11;
inline void ArpaTargetPack::clear_latitude() {
  latitude_ = 0;
}
inline ::google::protobuf::int32 ArpaTargetPack::latitude() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.latitude)
  return latitude_;
}
inline void ArpaTargetPack::set_latitude(::google::protobuf::int32 value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:ArpaTargetPack.latitude)
}

// optional string clientname = 12;
inline void ArpaTargetPack::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ArpaTargetPack::clientname() const {
  // @@protoc_insertion_point(field_get:ArpaTargetPack.clientname)
  return clientname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArpaTargetPack::set_clientname(const ::std::string& value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArpaTargetPack.clientname)
}
inline void ArpaTargetPack::set_clientname(const char* value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArpaTargetPack.clientname)
}
inline void ArpaTargetPack::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArpaTargetPack.clientname)
}
inline ::std::string* ArpaTargetPack::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:ArpaTargetPack.clientname)
  return clientname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ArpaTargetPack::release_clientname() {
  // @@protoc_insertion_point(field_release:ArpaTargetPack.clientname)
  
  return clientname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ArpaTargetPack::set_allocated_clientname(::std::string* clientname) {
  if (clientname != NULL) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:ArpaTargetPack.clientname)
}

inline const ArpaTargetPack* ArpaTargetPack::internal_default_instance() {
  return &ArpaTargetPack_default_instance_.get();
}
// -------------------------------------------------------------------

// RadarHeader

// optional int32 packettype = 1;
inline void RadarHeader::clear_packettype() {
  packettype_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::packettype() const {
  // @@protoc_insertion_point(field_get:RadarHeader.packettype)
  return packettype_;
}
inline void RadarHeader::set_packettype(::google::protobuf::int32 value) {
  
  packettype_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.packettype)
}

// optional int32 stateflags = 2;
inline void RadarHeader::clear_stateflags() {
  stateflags_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::stateflags() const {
  // @@protoc_insertion_point(field_get:RadarHeader.stateflags)
  return stateflags_;
}
inline void RadarHeader::set_stateflags(::google::protobuf::int32 value) {
  
  stateflags_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.stateflags)
}

// repeated int32 reserved0 = 3;
inline int RadarHeader::reserved0_size() const {
  return reserved0_.size();
}
inline void RadarHeader::clear_reserved0() {
  reserved0_.Clear();
}
inline ::google::protobuf::int32 RadarHeader::reserved0(int index) const {
  // @@protoc_insertion_point(field_get:RadarHeader.reserved0)
  return reserved0_.Get(index);
}
inline void RadarHeader::set_reserved0(int index, ::google::protobuf::int32 value) {
  reserved0_.Set(index, value);
  // @@protoc_insertion_point(field_set:RadarHeader.reserved0)
}
inline void RadarHeader::add_reserved0(::google::protobuf::int32 value) {
  reserved0_.Add(value);
  // @@protoc_insertion_point(field_add:RadarHeader.reserved0)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RadarHeader::reserved0() const {
  // @@protoc_insertion_point(field_list:RadarHeader.reserved0)
  return reserved0_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RadarHeader::mutable_reserved0() {
  // @@protoc_insertion_point(field_mutable_list:RadarHeader.reserved0)
  return &reserved0_;
}

// optional int64 utc = 4;
inline void RadarHeader::clear_utc() {
  utc_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RadarHeader::utc() const {
  // @@protoc_insertion_point(field_get:RadarHeader.utc)
  return utc_;
}
inline void RadarHeader::set_utc(::google::protobuf::int64 value) {
  
  utc_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.utc)
}

// repeated int32 control = 5;
inline int RadarHeader::control_size() const {
  return control_.size();
}
inline void RadarHeader::clear_control() {
  control_.Clear();
}
inline ::google::protobuf::int32 RadarHeader::control(int index) const {
  // @@protoc_insertion_point(field_get:RadarHeader.control)
  return control_.Get(index);
}
inline void RadarHeader::set_control(int index, ::google::protobuf::int32 value) {
  control_.Set(index, value);
  // @@protoc_insertion_point(field_set:RadarHeader.control)
}
inline void RadarHeader::add_control(::google::protobuf::int32 value) {
  control_.Add(value);
  // @@protoc_insertion_point(field_add:RadarHeader.control)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RadarHeader::control() const {
  // @@protoc_insertion_point(field_list:RadarHeader.control)
  return control_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RadarHeader::mutable_control() {
  // @@protoc_insertion_point(field_mutable_list:RadarHeader.control)
  return &control_;
}

// optional int32 tune_min = 6;
inline void RadarHeader::clear_tune_min() {
  tune_min_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::tune_min() const {
  // @@protoc_insertion_point(field_get:RadarHeader.tune_min)
  return tune_min_;
}
inline void RadarHeader::set_tune_min(::google::protobuf::int32 value) {
  
  tune_min_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.tune_min)
}

// optional int32 tune_max = 7;
inline void RadarHeader::clear_tune_max() {
  tune_max_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::tune_max() const {
  // @@protoc_insertion_point(field_get:RadarHeader.tune_max)
  return tune_max_;
}
inline void RadarHeader::set_tune_max(::google::protobuf::int32 value) {
  
  tune_max_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.tune_max)
}

// optional int32 tune_value = 8;
inline void RadarHeader::clear_tune_value() {
  tune_value_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::tune_value() const {
  // @@protoc_insertion_point(field_get:RadarHeader.tune_value)
  return tune_value_;
}
inline void RadarHeader::set_tune_value(::google::protobuf::int32 value) {
  
  tune_value_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.tune_value)
}

// repeated int32 pad = 9;
inline int RadarHeader::pad_size() const {
  return pad_.size();
}
inline void RadarHeader::clear_pad() {
  pad_.Clear();
}
inline ::google::protobuf::int32 RadarHeader::pad(int index) const {
  // @@protoc_insertion_point(field_get:RadarHeader.pad)
  return pad_.Get(index);
}
inline void RadarHeader::set_pad(int index, ::google::protobuf::int32 value) {
  pad_.Set(index, value);
  // @@protoc_insertion_point(field_set:RadarHeader.pad)
}
inline void RadarHeader::add_pad(::google::protobuf::int32 value) {
  pad_.Add(value);
  // @@protoc_insertion_point(field_add:RadarHeader.pad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RadarHeader::pad() const {
  // @@protoc_insertion_point(field_list:RadarHeader.pad)
  return pad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RadarHeader::mutable_pad() {
  // @@protoc_insertion_point(field_mutable_list:RadarHeader.pad)
  return &pad_;
}

// optional int32 controlbits0 = 10;
inline void RadarHeader::clear_controlbits0() {
  controlbits0_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::controlbits0() const {
  // @@protoc_insertion_point(field_get:RadarHeader.controlbits0)
  return controlbits0_;
}
inline void RadarHeader::set_controlbits0(::google::protobuf::int32 value) {
  
  controlbits0_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.controlbits0)
}

// optional int32 controlbits1 = 11;
inline void RadarHeader::clear_controlbits1() {
  controlbits1_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::controlbits1() const {
  // @@protoc_insertion_point(field_get:RadarHeader.controlbits1)
  return controlbits1_;
}
inline void RadarHeader::set_controlbits1(::google::protobuf::int32 value) {
  
  controlbits1_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.controlbits1)
}

// optional string clientname = 12;
inline void RadarHeader::clear_clientname() {
  clientname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarHeader::clientname() const {
  // @@protoc_insertion_point(field_get:RadarHeader.clientname)
  return clientname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarHeader::set_clientname(const ::std::string& value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarHeader.clientname)
}
inline void RadarHeader::set_clientname(const char* value) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarHeader.clientname)
}
inline void RadarHeader::set_clientname(const char* value, size_t size) {
  
  clientname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarHeader.clientname)
}
inline ::std::string* RadarHeader::mutable_clientname() {
  
  // @@protoc_insertion_point(field_mutable:RadarHeader.clientname)
  return clientname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarHeader::release_clientname() {
  // @@protoc_insertion_point(field_release:RadarHeader.clientname)
  
  return clientname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarHeader::set_allocated_clientname(::std::string* clientname) {
  if (clientname != NULL) {
    
  } else {
    
  }
  clientname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientname);
  // @@protoc_insertion_point(field_set_allocated:RadarHeader.clientname)
}

// optional int32 arpaState = 13;
inline void RadarHeader::clear_arpastate() {
  arpastate_ = 0;
}
inline ::google::protobuf::int32 RadarHeader::arpastate() const {
  // @@protoc_insertion_point(field_get:RadarHeader.arpaState)
  return arpastate_;
}
inline void RadarHeader::set_arpastate(::google::protobuf::int32 value) {
  
  arpastate_ = value;
  // @@protoc_insertion_point(field_set:RadarHeader.arpaState)
}

inline const RadarHeader* RadarHeader::internal_default_instance() {
  return &RadarHeader_default_instance_.get();
}
// -------------------------------------------------------------------

// RadarRequst

// optional string mess = 1;
inline void RadarRequst::clear_mess() {
  mess_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarRequst::mess() const {
  // @@protoc_insertion_point(field_get:RadarRequst.mess)
  return mess_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarRequst::set_mess(const ::std::string& value) {
  
  mess_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarRequst.mess)
}
inline void RadarRequst::set_mess(const char* value) {
  
  mess_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarRequst.mess)
}
inline void RadarRequst::set_mess(const char* value, size_t size) {
  
  mess_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarRequst.mess)
}
inline ::std::string* RadarRequst::mutable_mess() {
  
  // @@protoc_insertion_point(field_mutable:RadarRequst.mess)
  return mess_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarRequst::release_mess() {
  // @@protoc_insertion_point(field_release:RadarRequst.mess)
  
  return mess_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarRequst::set_allocated_mess(::std::string* mess) {
  if (mess != NULL) {
    
  } else {
    
  }
  mess_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mess);
  // @@protoc_insertion_point(field_set_allocated:RadarRequst.mess)
}

// optional string name = 2;
inline void RadarRequst::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarRequst::name() const {
  // @@protoc_insertion_point(field_get:RadarRequst.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarRequst::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarRequst.name)
}
inline void RadarRequst::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarRequst.name)
}
inline void RadarRequst::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarRequst.name)
}
inline ::std::string* RadarRequst::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:RadarRequst.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarRequst::release_name() {
  // @@protoc_insertion_point(field_release:RadarRequst.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarRequst::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RadarRequst.name)
}

inline const RadarRequst* RadarRequst::internal_default_instance() {
  return &RadarRequst_default_instance_.get();
}
// -------------------------------------------------------------------

// RadarAISStatePack

// optional int32 number = 1;
inline void RadarAISStatePack::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 RadarAISStatePack::number() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.number)
  return number_;
}
inline void RadarAISStatePack::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:RadarAISStatePack.number)
}

// optional int32 reserved = 2;
inline void RadarAISStatePack::clear_reserved() {
  reserved_ = 0;
}
inline ::google::protobuf::int32 RadarAISStatePack::reserved() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.reserved)
  return reserved_;
}
inline void RadarAISStatePack::set_reserved(::google::protobuf::int32 value) {
  
  reserved_ = value;
  // @@protoc_insertion_point(field_set:RadarAISStatePack.reserved)
}

// optional int32 mms_id = 3;
inline void RadarAISStatePack::clear_mms_id() {
  mms_id_ = 0;
}
inline ::google::protobuf::int32 RadarAISStatePack::mms_id() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.mms_id)
  return mms_id_;
}
inline void RadarAISStatePack::set_mms_id(::google::protobuf::int32 value) {
  
  mms_id_ = value;
  // @@protoc_insertion_point(field_set:RadarAISStatePack.mms_id)
}

// optional int32 imo = 4;
inline void RadarAISStatePack::clear_imo() {
  imo_ = 0;
}
inline ::google::protobuf::int32 RadarAISStatePack::imo() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.imo)
  return imo_;
}
inline void RadarAISStatePack::set_imo(::google::protobuf::int32 value) {
  
  imo_ = value;
  // @@protoc_insertion_point(field_set:RadarAISStatePack.imo)
}

// optional string callsign = 5;
inline void RadarAISStatePack::clear_callsign() {
  callsign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarAISStatePack::callsign() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.callsign)
  return callsign_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarAISStatePack::set_callsign(const ::std::string& value) {
  
  callsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarAISStatePack.callsign)
}
inline void RadarAISStatePack::set_callsign(const char* value) {
  
  callsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarAISStatePack.callsign)
}
inline void RadarAISStatePack::set_callsign(const char* value, size_t size) {
  
  callsign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarAISStatePack.callsign)
}
inline ::std::string* RadarAISStatePack::mutable_callsign() {
  
  // @@protoc_insertion_point(field_mutable:RadarAISStatePack.callsign)
  return callsign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarAISStatePack::release_callsign() {
  // @@protoc_insertion_point(field_release:RadarAISStatePack.callsign)
  
  return callsign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarAISStatePack::set_allocated_callsign(::std::string* callsign) {
  if (callsign != NULL) {
    
  } else {
    
  }
  callsign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callsign);
  // @@protoc_insertion_point(field_set_allocated:RadarAISStatePack.callsign)
}

// optional string name = 6;
inline void RadarAISStatePack::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarAISStatePack::name() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarAISStatePack::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarAISStatePack.name)
}
inline void RadarAISStatePack::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarAISStatePack.name)
}
inline void RadarAISStatePack::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarAISStatePack.name)
}
inline ::std::string* RadarAISStatePack::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:RadarAISStatePack.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarAISStatePack::release_name() {
  // @@protoc_insertion_point(field_release:RadarAISStatePack.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarAISStatePack::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:RadarAISStatePack.name)
}

// optional string destination = 7;
inline void RadarAISStatePack::clear_destination() {
  destination_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RadarAISStatePack::destination() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.destination)
  return destination_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarAISStatePack::set_destination(const ::std::string& value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RadarAISStatePack.destination)
}
inline void RadarAISStatePack::set_destination(const char* value) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RadarAISStatePack.destination)
}
inline void RadarAISStatePack::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RadarAISStatePack.destination)
}
inline ::std::string* RadarAISStatePack::mutable_destination() {
  
  // @@protoc_insertion_point(field_mutable:RadarAISStatePack.destination)
  return destination_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarAISStatePack::release_destination() {
  // @@protoc_insertion_point(field_release:RadarAISStatePack.destination)
  
  return destination_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarAISStatePack::set_allocated_destination(::std::string* destination) {
  if (destination != NULL) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:RadarAISStatePack.destination)
}

// optional int32 cargo = 8;
inline void RadarAISStatePack::clear_cargo() {
  cargo_ = 0;
}
inline ::google::protobuf::int32 RadarAISStatePack::cargo() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.cargo)
  return cargo_;
}
inline void RadarAISStatePack::set_cargo(::google::protobuf::int32 value) {
  
  cargo_ = value;
  // @@protoc_insertion_point(field_set:RadarAISStatePack.cargo)
}

// optional int32 dimensions = 9;
inline void RadarAISStatePack::clear_dimensions() {
  dimensions_ = 0;
}
inline ::google::protobuf::int32 RadarAISStatePack::dimensions() const {
  // @@protoc_insertion_point(field_get:RadarAISStatePack.dimensions)
  return dimensions_;
}
inline void RadarAISStatePack::set_dimensions(::google::protobuf::int32 value) {
  
  dimensions_ = value;
  // @@protoc_insertion_point(field_set:RadarAISStatePack.dimensions)
}

inline const RadarAISStatePack* RadarAISStatePack::internal_default_instance() {
  return &RadarAISStatePack_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RadarImagePack_2eproto__INCLUDED
