// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgCellularShip.proto

#ifndef PROTOBUF_hgCellularShip_2eproto__INCLUDED
#define PROTOBUF_hgCellularShip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgCellularShip_2eproto();
void protobuf_InitDefaults_hgCellularShip_2eproto();
void protobuf_AssignDesc_hgCellularShip_2eproto();
void protobuf_ShutdownFile_hgCellularShip_2eproto();

class hgCellularShip;

enum CellType {
  NormalShip = 0,
  BarrierShip = 1,
  ThroughShip = 2,
  VirtualShip = 3,
  CellType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CellType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CellType_IsValid(int value);
const CellType CellType_MIN = NormalShip;
const CellType CellType_MAX = VirtualShip;
const int CellType_ARRAYSIZE = CellType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CellType_descriptor();
inline const ::std::string& CellType_Name(CellType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CellType_descriptor(), value);
}
inline bool CellType_Parse(
    const ::std::string& name, CellType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CellType>(
    CellType_descriptor(), name, value);
}
// ===================================================================

class hgCellularShip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgCellularShip) */ {
 public:
  hgCellularShip();
  virtual ~hgCellularShip();

  hgCellularShip(const hgCellularShip& from);

  inline hgCellularShip& operator=(const hgCellularShip& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgCellularShip& default_instance();

  static const hgCellularShip* internal_default_instance();

  void Swap(hgCellularShip* other);

  // implements Message ----------------------------------------------

  inline hgCellularShip* New() const { return New(NULL); }

  hgCellularShip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgCellularShip& from);
  void MergeFrom(const hgCellularShip& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgCellularShip* other);
  void UnsafeMergeFrom(const hgCellularShip& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MMSI = 1;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 1;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional int32 Length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional int32 Width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional string ShipType = 4;
  void clear_shiptype();
  static const int kShipTypeFieldNumber = 4;
  const ::std::string& shiptype() const;
  void set_shiptype(const ::std::string& value);
  void set_shiptype(const char* value);
  void set_shiptype(const char* value, size_t size);
  ::std::string* mutable_shiptype();
  ::std::string* release_shiptype();
  void set_allocated_shiptype(::std::string* shiptype);

  // optional int32 SOG = 5;
  void clear_sog();
  static const int kSOGFieldNumber = 5;
  ::google::protobuf::int32 sog() const;
  void set_sog(::google::protobuf::int32 value);

  // optional double HDG = 6;
  void clear_hdg();
  static const int kHDGFieldNumber = 6;
  double hdg() const;
  void set_hdg(double value);

  // optional string GoodsType = 7;
  void clear_goodstype();
  static const int kGoodsTypeFieldNumber = 7;
  const ::std::string& goodstype() const;
  void set_goodstype(const ::std::string& value);
  void set_goodstype(const char* value);
  void set_goodstype(const char* value, size_t size);
  ::std::string* mutable_goodstype();
  ::std::string* release_goodstype();
  void set_allocated_goodstype(::std::string* goodstype);

  // optional int32 CellularCount = 8;
  void clear_cellularcount();
  static const int kCellularCountFieldNumber = 8;
  ::google::protobuf::int32 cellularcount() const;
  void set_cellularcount(::google::protobuf::int32 value);

  // optional int32 FirstLine = 9;
  void clear_firstline();
  static const int kFirstLineFieldNumber = 9;
  ::google::protobuf::int32 firstline() const;
  void set_firstline(::google::protobuf::int32 value);

  // optional int32 FirstRow = 10;
  void clear_firstrow();
  static const int kFirstRowFieldNumber = 10;
  ::google::protobuf::int32 firstrow() const;
  void set_firstrow(::google::protobuf::int32 value);

  // optional int32 LastLine = 11;
  void clear_lastline();
  static const int kLastLineFieldNumber = 11;
  ::google::protobuf::int32 lastline() const;
  void set_lastline(::google::protobuf::int32 value);

  // optional int32 LastRow = 12;
  void clear_lastrow();
  static const int kLastRowFieldNumber = 12;
  ::google::protobuf::int32 lastrow() const;
  void set_lastrow(::google::protobuf::int32 value);

  // optional int32 OvertakingNum = 13;
  void clear_overtakingnum();
  static const int kOvertakingNumFieldNumber = 13;
  ::google::protobuf::int32 overtakingnum() const;
  void set_overtakingnum(::google::protobuf::int32 value);

  // optional int32 AcrossNum = 14;
  void clear_acrossnum();
  static const int kAcrossNumFieldNumber = 14;
  ::google::protobuf::int32 acrossnum() const;
  void set_acrossnum(::google::protobuf::int32 value);

  // optional int32 HeadonNum = 15;
  void clear_headonnum();
  static const int kHeadonNumFieldNumber = 15;
  ::google::protobuf::int32 headonnum() const;
  void set_headonnum(::google::protobuf::int32 value);

  // optional int32 IntersectNum = 16;
  void clear_intersectnum();
  static const int kIntersectNumFieldNumber = 16;
  ::google::protobuf::int32 intersectnum() const;
  void set_intersectnum(::google::protobuf::int32 value);

  // optional int32 ObstructNum = 17;
  void clear_obstructnum();
  static const int kObstructNumFieldNumber = 17;
  ::google::protobuf::int32 obstructnum() const;
  void set_obstructnum(::google::protobuf::int32 value);

  // optional int32 StartTime = 18;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 18;
  ::google::protobuf::int32 starttime() const;
  void set_starttime(::google::protobuf::int32 value);

  // optional int32 EndTime = 19;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 19;
  ::google::protobuf::int32 endtime() const;
  void set_endtime(::google::protobuf::int32 value);

  // optional double Danger = 20;
  void clear_danger();
  static const int kDangerFieldNumber = 20;
  double danger() const;
  void set_danger(double value);

  // optional double AvSOG = 21;
  void clear_avsog();
  static const int kAvSOGFieldNumber = 21;
  double avsog() const;
  void set_avsog(double value);

  // optional double Lat = 22;
  void clear_lat();
  static const int kLatFieldNumber = 22;
  double lat() const;
  void set_lat(double value);

  // optional double Lon = 23;
  void clear_lon();
  static const int kLonFieldNumber = 23;
  double lon() const;
  void set_lon(double value);

  // optional .CellType SendType = 24;
  void clear_sendtype();
  static const int kSendTypeFieldNumber = 24;
  ::CellType sendtype() const;
  void set_sendtype(::CellType value);

  // optional bool In = 25;
  void clear_in();
  static const int kInFieldNumber = 25;
  bool in() const;
  void set_in(bool value);

  // optional double Tonnage = 26;
  void clear_tonnage();
  static const int kTonnageFieldNumber = 26;
  double tonnage() const;
  void set_tonnage(double value);

  // @@protoc_insertion_point(class_scope:hgCellularShip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  ::google::protobuf::internal::ArenaStringPtr shiptype_;
  ::google::protobuf::internal::ArenaStringPtr goodstype_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 width_;
  double hdg_;
  ::google::protobuf::int32 sog_;
  ::google::protobuf::int32 cellularcount_;
  ::google::protobuf::int32 firstline_;
  ::google::protobuf::int32 firstrow_;
  ::google::protobuf::int32 lastline_;
  ::google::protobuf::int32 lastrow_;
  ::google::protobuf::int32 overtakingnum_;
  ::google::protobuf::int32 acrossnum_;
  ::google::protobuf::int32 headonnum_;
  ::google::protobuf::int32 intersectnum_;
  ::google::protobuf::int32 obstructnum_;
  ::google::protobuf::int32 starttime_;
  double danger_;
  double avsog_;
  ::google::protobuf::int32 endtime_;
  int sendtype_;
  double lat_;
  double lon_;
  double tonnage_;
  bool in_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgCellularShip_2eproto_impl();
  friend void  protobuf_AddDesc_hgCellularShip_2eproto_impl();
  friend void protobuf_AssignDesc_hgCellularShip_2eproto();
  friend void protobuf_ShutdownFile_hgCellularShip_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgCellularShip> hgCellularShip_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCellularShip

// optional string MMSI = 1;
inline void hgCellularShip::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCellularShip::mmsi() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCellularShip::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCellularShip.MMSI)
}
inline void hgCellularShip::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCellularShip.MMSI)
}
inline void hgCellularShip::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCellularShip.MMSI)
}
inline ::std::string* hgCellularShip::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCellularShip.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCellularShip::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgCellularShip.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCellularShip::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCellularShip.MMSI)
}

// optional int32 Length = 2;
inline void hgCellularShip::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::length() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Length)
  return length_;
}
inline void hgCellularShip::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Length)
}

// optional int32 Width = 3;
inline void hgCellularShip::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::width() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Width)
  return width_;
}
inline void hgCellularShip::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Width)
}

// optional string ShipType = 4;
inline void hgCellularShip::clear_shiptype() {
  shiptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCellularShip::shiptype() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.ShipType)
  return shiptype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCellularShip::set_shiptype(const ::std::string& value) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCellularShip.ShipType)
}
inline void hgCellularShip::set_shiptype(const char* value) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCellularShip.ShipType)
}
inline void hgCellularShip::set_shiptype(const char* value, size_t size) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCellularShip.ShipType)
}
inline ::std::string* hgCellularShip::mutable_shiptype() {
  
  // @@protoc_insertion_point(field_mutable:hgCellularShip.ShipType)
  return shiptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCellularShip::release_shiptype() {
  // @@protoc_insertion_point(field_release:hgCellularShip.ShipType)
  
  return shiptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCellularShip::set_allocated_shiptype(::std::string* shiptype) {
  if (shiptype != NULL) {
    
  } else {
    
  }
  shiptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shiptype);
  // @@protoc_insertion_point(field_set_allocated:hgCellularShip.ShipType)
}

// optional int32 SOG = 5;
inline void hgCellularShip::clear_sog() {
  sog_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::sog() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.SOG)
  return sog_;
}
inline void hgCellularShip::set_sog(::google::protobuf::int32 value) {
  
  sog_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.SOG)
}

// optional double HDG = 6;
inline void hgCellularShip::clear_hdg() {
  hdg_ = 0;
}
inline double hgCellularShip::hdg() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.HDG)
  return hdg_;
}
inline void hgCellularShip::set_hdg(double value) {
  
  hdg_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.HDG)
}

// optional string GoodsType = 7;
inline void hgCellularShip::clear_goodstype() {
  goodstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgCellularShip::goodstype() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.GoodsType)
  return goodstype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCellularShip::set_goodstype(const ::std::string& value) {
  
  goodstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCellularShip.GoodsType)
}
inline void hgCellularShip::set_goodstype(const char* value) {
  
  goodstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCellularShip.GoodsType)
}
inline void hgCellularShip::set_goodstype(const char* value, size_t size) {
  
  goodstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCellularShip.GoodsType)
}
inline ::std::string* hgCellularShip::mutable_goodstype() {
  
  // @@protoc_insertion_point(field_mutable:hgCellularShip.GoodsType)
  return goodstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgCellularShip::release_goodstype() {
  // @@protoc_insertion_point(field_release:hgCellularShip.GoodsType)
  
  return goodstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgCellularShip::set_allocated_goodstype(::std::string* goodstype) {
  if (goodstype != NULL) {
    
  } else {
    
  }
  goodstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goodstype);
  // @@protoc_insertion_point(field_set_allocated:hgCellularShip.GoodsType)
}

// optional int32 CellularCount = 8;
inline void hgCellularShip::clear_cellularcount() {
  cellularcount_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::cellularcount() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.CellularCount)
  return cellularcount_;
}
inline void hgCellularShip::set_cellularcount(::google::protobuf::int32 value) {
  
  cellularcount_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.CellularCount)
}

// optional int32 FirstLine = 9;
inline void hgCellularShip::clear_firstline() {
  firstline_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::firstline() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.FirstLine)
  return firstline_;
}
inline void hgCellularShip::set_firstline(::google::protobuf::int32 value) {
  
  firstline_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.FirstLine)
}

// optional int32 FirstRow = 10;
inline void hgCellularShip::clear_firstrow() {
  firstrow_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::firstrow() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.FirstRow)
  return firstrow_;
}
inline void hgCellularShip::set_firstrow(::google::protobuf::int32 value) {
  
  firstrow_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.FirstRow)
}

// optional int32 LastLine = 11;
inline void hgCellularShip::clear_lastline() {
  lastline_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::lastline() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.LastLine)
  return lastline_;
}
inline void hgCellularShip::set_lastline(::google::protobuf::int32 value) {
  
  lastline_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.LastLine)
}

// optional int32 LastRow = 12;
inline void hgCellularShip::clear_lastrow() {
  lastrow_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::lastrow() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.LastRow)
  return lastrow_;
}
inline void hgCellularShip::set_lastrow(::google::protobuf::int32 value) {
  
  lastrow_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.LastRow)
}

// optional int32 OvertakingNum = 13;
inline void hgCellularShip::clear_overtakingnum() {
  overtakingnum_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::overtakingnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.OvertakingNum)
  return overtakingnum_;
}
inline void hgCellularShip::set_overtakingnum(::google::protobuf::int32 value) {
  
  overtakingnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.OvertakingNum)
}

// optional int32 AcrossNum = 14;
inline void hgCellularShip::clear_acrossnum() {
  acrossnum_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::acrossnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.AcrossNum)
  return acrossnum_;
}
inline void hgCellularShip::set_acrossnum(::google::protobuf::int32 value) {
  
  acrossnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.AcrossNum)
}

// optional int32 HeadonNum = 15;
inline void hgCellularShip::clear_headonnum() {
  headonnum_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::headonnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.HeadonNum)
  return headonnum_;
}
inline void hgCellularShip::set_headonnum(::google::protobuf::int32 value) {
  
  headonnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.HeadonNum)
}

// optional int32 IntersectNum = 16;
inline void hgCellularShip::clear_intersectnum() {
  intersectnum_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::intersectnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.IntersectNum)
  return intersectnum_;
}
inline void hgCellularShip::set_intersectnum(::google::protobuf::int32 value) {
  
  intersectnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.IntersectNum)
}

// optional int32 ObstructNum = 17;
inline void hgCellularShip::clear_obstructnum() {
  obstructnum_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::obstructnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.ObstructNum)
  return obstructnum_;
}
inline void hgCellularShip::set_obstructnum(::google::protobuf::int32 value) {
  
  obstructnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.ObstructNum)
}

// optional int32 StartTime = 18;
inline void hgCellularShip::clear_starttime() {
  starttime_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::starttime() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.StartTime)
  return starttime_;
}
inline void hgCellularShip::set_starttime(::google::protobuf::int32 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.StartTime)
}

// optional int32 EndTime = 19;
inline void hgCellularShip::clear_endtime() {
  endtime_ = 0;
}
inline ::google::protobuf::int32 hgCellularShip::endtime() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.EndTime)
  return endtime_;
}
inline void hgCellularShip::set_endtime(::google::protobuf::int32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.EndTime)
}

// optional double Danger = 20;
inline void hgCellularShip::clear_danger() {
  danger_ = 0;
}
inline double hgCellularShip::danger() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Danger)
  return danger_;
}
inline void hgCellularShip::set_danger(double value) {
  
  danger_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Danger)
}

// optional double AvSOG = 21;
inline void hgCellularShip::clear_avsog() {
  avsog_ = 0;
}
inline double hgCellularShip::avsog() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.AvSOG)
  return avsog_;
}
inline void hgCellularShip::set_avsog(double value) {
  
  avsog_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.AvSOG)
}

// optional double Lat = 22;
inline void hgCellularShip::clear_lat() {
  lat_ = 0;
}
inline double hgCellularShip::lat() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Lat)
  return lat_;
}
inline void hgCellularShip::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Lat)
}

// optional double Lon = 23;
inline void hgCellularShip::clear_lon() {
  lon_ = 0;
}
inline double hgCellularShip::lon() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Lon)
  return lon_;
}
inline void hgCellularShip::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Lon)
}

// optional .CellType SendType = 24;
inline void hgCellularShip::clear_sendtype() {
  sendtype_ = 0;
}
inline ::CellType hgCellularShip::sendtype() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.SendType)
  return static_cast< ::CellType >(sendtype_);
}
inline void hgCellularShip::set_sendtype(::CellType value) {
  
  sendtype_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.SendType)
}

// optional bool In = 25;
inline void hgCellularShip::clear_in() {
  in_ = false;
}
inline bool hgCellularShip::in() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.In)
  return in_;
}
inline void hgCellularShip::set_in(bool value) {
  
  in_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.In)
}

// optional double Tonnage = 26;
inline void hgCellularShip::clear_tonnage() {
  tonnage_ = 0;
}
inline double hgCellularShip::tonnage() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Tonnage)
  return tonnage_;
}
inline void hgCellularShip::set_tonnage(double value) {
  
  tonnage_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Tonnage)
}

inline const hgCellularShip* hgCellularShip::internal_default_instance() {
  return &hgCellularShip_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CellType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CellType>() {
  return ::CellType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgCellularShip_2eproto__INCLUDED
