// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fixedobject.proto

#ifndef PROTOBUF_fixedobject_2eproto__INCLUDED
#define PROTOBUF_fixedobject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_fixedobject_2eproto();
void protobuf_InitDefaults_fixedobject_2eproto();
void protobuf_AssignDesc_fixedobject_2eproto();
void protobuf_ShutdownFile_fixedobject_2eproto();

class FixedObjectRepsone;
class FixedObjectRequest;

// ===================================================================

class FixedObjectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FixedObjectRequest) */ {
 public:
  FixedObjectRequest();
  virtual ~FixedObjectRequest();

  FixedObjectRequest(const FixedObjectRequest& from);

  inline FixedObjectRequest& operator=(const FixedObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedObjectRequest& default_instance();

  static const FixedObjectRequest* internal_default_instance();

  void Swap(FixedObjectRequest* other);

  // implements Message ----------------------------------------------

  inline FixedObjectRequest* New() const { return New(NULL); }

  FixedObjectRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedObjectRequest& from);
  void MergeFrom(const FixedObjectRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FixedObjectRequest* other);
  void UnsafeMergeFrom(const FixedObjectRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double lat = 4;
  void clear_lat();
  static const int kLatFieldNumber = 4;
  double lat() const;
  void set_lat(double value);

  // optional double lon = 5;
  void clear_lon();
  static const int kLonFieldNumber = 5;
  double lon() const;
  void set_lon(double value);

  // optional string remarks = 6;
  void clear_remarks();
  static const int kRemarksFieldNumber = 6;
  const ::std::string& remarks() const;
  void set_remarks(const ::std::string& value);
  void set_remarks(const char* value);
  void set_remarks(const char* value, size_t size);
  ::std::string* mutable_remarks();
  ::std::string* release_remarks();
  void set_allocated_remarks(::std::string* remarks);

  // optional string iconURL = 7;
  void clear_iconurl();
  static const int kIconURLFieldNumber = 7;
  const ::std::string& iconurl() const;
  void set_iconurl(const ::std::string& value);
  void set_iconurl(const char* value);
  void set_iconurl(const char* value, size_t size);
  ::std::string* mutable_iconurl();
  ::std::string* release_iconurl();
  void set_allocated_iconurl(::std::string* iconurl);

  // optional string drawman = 8;
  void clear_drawman();
  static const int kDrawmanFieldNumber = 8;
  const ::std::string& drawman() const;
  void set_drawman(const ::std::string& value);
  void set_drawman(const char* value);
  void set_drawman(const char* value, size_t size);
  ::std::string* mutable_drawman();
  ::std::string* release_drawman();
  void set_allocated_drawman(::std::string* drawman);

  // optional bool isshare = 9;
  void clear_isshare();
  static const int kIsshareFieldNumber = 9;
  bool isshare() const;
  void set_isshare(bool value);

  // @@protoc_insertion_point(class_scope:FixedObjectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr remarks_;
  ::google::protobuf::internal::ArenaStringPtr iconurl_;
  ::google::protobuf::internal::ArenaStringPtr drawman_;
  double lat_;
  double lon_;
  ::google::protobuf::int32 type_;
  bool isshare_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_fixedobject_2eproto_impl();
  friend void  protobuf_AddDesc_fixedobject_2eproto_impl();
  friend void protobuf_AssignDesc_fixedobject_2eproto();
  friend void protobuf_ShutdownFile_fixedobject_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FixedObjectRequest> FixedObjectRequest_default_instance_;

// -------------------------------------------------------------------

class FixedObjectRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FixedObjectRepsone) */ {
 public:
  FixedObjectRepsone();
  virtual ~FixedObjectRepsone();

  FixedObjectRepsone(const FixedObjectRepsone& from);

  inline FixedObjectRepsone& operator=(const FixedObjectRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedObjectRepsone& default_instance();

  static const FixedObjectRepsone* internal_default_instance();

  void Swap(FixedObjectRepsone* other);

  // implements Message ----------------------------------------------

  inline FixedObjectRepsone* New() const { return New(NULL); }

  FixedObjectRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FixedObjectRepsone& from);
  void MergeFrom(const FixedObjectRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FixedObjectRepsone* other);
  void UnsafeMergeFrom(const FixedObjectRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // repeated .FixedObjectRequest fixedobjs = 3;
  int fixedobjs_size() const;
  void clear_fixedobjs();
  static const int kFixedobjsFieldNumber = 3;
  const ::FixedObjectRequest& fixedobjs(int index) const;
  ::FixedObjectRequest* mutable_fixedobjs(int index);
  ::FixedObjectRequest* add_fixedobjs();
  ::google::protobuf::RepeatedPtrField< ::FixedObjectRequest >*
      mutable_fixedobjs();
  const ::google::protobuf::RepeatedPtrField< ::FixedObjectRequest >&
      fixedobjs() const;

  // @@protoc_insertion_point(class_scope:FixedObjectRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::FixedObjectRequest > fixedobjs_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_fixedobject_2eproto_impl();
  friend void  protobuf_AddDesc_fixedobject_2eproto_impl();
  friend void protobuf_AssignDesc_fixedobject_2eproto();
  friend void protobuf_ShutdownFile_fixedobject_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<FixedObjectRepsone> FixedObjectRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedObjectRequest

// optional int32 type = 1;
inline void FixedObjectRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 FixedObjectRequest::type() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.type)
  return type_;
}
inline void FixedObjectRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.type)
}

// optional string ID = 2;
inline void FixedObjectRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FixedObjectRequest::id() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.ID)
}
inline void FixedObjectRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.ID)
}
inline void FixedObjectRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.ID)
}
inline ::std::string* FixedObjectRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FixedObjectRequest::release_id() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.ID)
}

// optional string name = 3;
inline void FixedObjectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FixedObjectRequest::name() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.name)
}
inline void FixedObjectRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.name)
}
inline void FixedObjectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.name)
}
inline ::std::string* FixedObjectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FixedObjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.name)
}

// optional double lat = 4;
inline void FixedObjectRequest::clear_lat() {
  lat_ = 0;
}
inline double FixedObjectRequest::lat() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.lat)
  return lat_;
}
inline void FixedObjectRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.lat)
}

// optional double lon = 5;
inline void FixedObjectRequest::clear_lon() {
  lon_ = 0;
}
inline double FixedObjectRequest::lon() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.lon)
  return lon_;
}
inline void FixedObjectRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.lon)
}

// optional string remarks = 6;
inline void FixedObjectRequest::clear_remarks() {
  remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FixedObjectRequest::remarks() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.remarks)
  return remarks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_remarks(const ::std::string& value) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.remarks)
}
inline void FixedObjectRequest::set_remarks(const char* value) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.remarks)
}
inline void FixedObjectRequest::set_remarks(const char* value, size_t size) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.remarks)
}
inline ::std::string* FixedObjectRequest::mutable_remarks() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.remarks)
  return remarks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FixedObjectRequest::release_remarks() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.remarks)
  
  return remarks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_allocated_remarks(::std::string* remarks) {
  if (remarks != NULL) {
    
  } else {
    
  }
  remarks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remarks);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.remarks)
}

// optional string iconURL = 7;
inline void FixedObjectRequest::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FixedObjectRequest::iconurl() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.iconURL)
  return iconurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_iconurl(const ::std::string& value) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.iconURL)
}
inline void FixedObjectRequest::set_iconurl(const char* value) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.iconURL)
}
inline void FixedObjectRequest::set_iconurl(const char* value, size_t size) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.iconURL)
}
inline ::std::string* FixedObjectRequest::mutable_iconurl() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.iconURL)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FixedObjectRequest::release_iconurl() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.iconURL)
  
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    
  } else {
    
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.iconURL)
}

// optional string drawman = 8;
inline void FixedObjectRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FixedObjectRequest::drawman() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.drawman)
}
inline void FixedObjectRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.drawman)
}
inline void FixedObjectRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.drawman)
}
inline ::std::string* FixedObjectRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FixedObjectRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.drawman)
}

// optional bool isshare = 9;
inline void FixedObjectRequest::clear_isshare() {
  isshare_ = false;
}
inline bool FixedObjectRequest::isshare() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.isshare)
  return isshare_;
}
inline void FixedObjectRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.isshare)
}

inline const FixedObjectRequest* FixedObjectRequest::internal_default_instance() {
  return &FixedObjectRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// FixedObjectRepsone

// optional int32 type = 1;
inline void FixedObjectRepsone::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 FixedObjectRepsone::type() const {
  // @@protoc_insertion_point(field_get:FixedObjectRepsone.type)
  return type_;
}
inline void FixedObjectRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRepsone.type)
}

// optional string result = 2;
inline void FixedObjectRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FixedObjectRepsone::result() const {
  // @@protoc_insertion_point(field_get:FixedObjectRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRepsone.result)
}
inline void FixedObjectRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRepsone.result)
}
inline void FixedObjectRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRepsone.result)
}
inline ::std::string* FixedObjectRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FixedObjectRepsone::release_result() {
  // @@protoc_insertion_point(field_release:FixedObjectRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FixedObjectRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRepsone.result)
}

// repeated .FixedObjectRequest fixedobjs = 3;
inline int FixedObjectRepsone::fixedobjs_size() const {
  return fixedobjs_.size();
}
inline void FixedObjectRepsone::clear_fixedobjs() {
  fixedobjs_.Clear();
}
inline const ::FixedObjectRequest& FixedObjectRepsone::fixedobjs(int index) const {
  // @@protoc_insertion_point(field_get:FixedObjectRepsone.fixedobjs)
  return fixedobjs_.Get(index);
}
inline ::FixedObjectRequest* FixedObjectRepsone::mutable_fixedobjs(int index) {
  // @@protoc_insertion_point(field_mutable:FixedObjectRepsone.fixedobjs)
  return fixedobjs_.Mutable(index);
}
inline ::FixedObjectRequest* FixedObjectRepsone::add_fixedobjs() {
  // @@protoc_insertion_point(field_add:FixedObjectRepsone.fixedobjs)
  return fixedobjs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::FixedObjectRequest >*
FixedObjectRepsone::mutable_fixedobjs() {
  // @@protoc_insertion_point(field_mutable_list:FixedObjectRepsone.fixedobjs)
  return &fixedobjs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::FixedObjectRequest >&
FixedObjectRepsone::fixedobjs() const {
  // @@protoc_insertion_point(field_list:FixedObjectRepsone.fixedobjs)
  return fixedobjs_;
}

inline const FixedObjectRepsone* FixedObjectRepsone::internal_default_instance() {
  return &FixedObjectRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fixedobject_2eproto__INCLUDED
