// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgAuthorized.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgAuthorized.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgAuthorized_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgAuthorized_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgAuthorizedRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgAuthorizedRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgAuthorized_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgAuthorized_2eproto() {
  protobuf_AddDesc_hgAuthorized_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgAuthorized.proto");
  GOOGLE_CHECK(file != NULL);
  hgAuthorized_descriptor_ = file->message_type(0);
  static const int hgAuthorized_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgAuthorized, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgAuthorized, authorized_),
  };
  hgAuthorized_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgAuthorized_descriptor_,
      hgAuthorized::internal_default_instance(),
      hgAuthorized_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgAuthorized),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgAuthorized, _internal_metadata_));
  hgAuthorizedRepsone_descriptor_ = file->message_type(1);
  static const int hgAuthorizedRepsone_offsets_[1] = {
  };
  hgAuthorizedRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgAuthorizedRepsone_descriptor_,
      hgAuthorizedRepsone::internal_default_instance(),
      hgAuthorizedRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgAuthorizedRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgAuthorizedRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgAuthorized_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgAuthorized_descriptor_, hgAuthorized::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgAuthorizedRepsone_descriptor_, hgAuthorizedRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgAuthorized_2eproto() {
  hgAuthorized_default_instance_.Shutdown();
  delete hgAuthorized_reflection_;
  hgAuthorizedRepsone_default_instance_.Shutdown();
  delete hgAuthorizedRepsone_reflection_;
}

void protobuf_InitDefaults_hgAuthorized_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgAuthorized_default_instance_.DefaultConstruct();
  hgAuthorizedRepsone_default_instance_.DefaultConstruct();
  hgAuthorized_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgAuthorizedRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgAuthorized_2eproto_once_);
void protobuf_InitDefaults_hgAuthorized_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgAuthorized_2eproto_once_,
                 &protobuf_InitDefaults_hgAuthorized_2eproto_impl);
}
void protobuf_AddDesc_hgAuthorized_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgAuthorized_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022hgAuthorized.proto\"0\n\014hgAuthorized\022\014\n\004"
    "MMSI\030\001 \001(\t\022\022\n\nAuthorized\030\002 \001(\010\"\025\n\023hgAuth"
    "orizedRepsoneb\006proto3", 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgAuthorized.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgAuthorized_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgAuthorized_2eproto_once_);
void protobuf_AddDesc_hgAuthorized_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgAuthorized_2eproto_once_,
                 &protobuf_AddDesc_hgAuthorized_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgAuthorized_2eproto {
  StaticDescriptorInitializer_hgAuthorized_2eproto() {
    protobuf_AddDesc_hgAuthorized_2eproto();
  }
} static_descriptor_initializer_hgAuthorized_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgAuthorized::kMMSIFieldNumber;
const int hgAuthorized::kAuthorizedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgAuthorized::hgAuthorized()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgAuthorized_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgAuthorized)
}

void hgAuthorized::InitAsDefaultInstance() {
}

hgAuthorized::hgAuthorized(const hgAuthorized& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgAuthorized)
}

void hgAuthorized::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorized_ = false;
  _cached_size_ = 0;
}

hgAuthorized::~hgAuthorized() {
  // @@protoc_insertion_point(destructor:hgAuthorized)
  SharedDtor();
}

void hgAuthorized::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgAuthorized::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgAuthorized::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgAuthorized_descriptor_;
}

const hgAuthorized& hgAuthorized::default_instance() {
  protobuf_InitDefaults_hgAuthorized_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgAuthorized> hgAuthorized_default_instance_;

hgAuthorized* hgAuthorized::New(::google::protobuf::Arena* arena) const {
  hgAuthorized* n = new hgAuthorized;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgAuthorized::Clear() {
// @@protoc_insertion_point(message_clear_start:hgAuthorized)
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authorized_ = false;
}

bool hgAuthorized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgAuthorized)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgAuthorized.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Authorized;
        break;
      }

      // optional bool Authorized = 2;
      case 2: {
        if (tag == 16) {
         parse_Authorized:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authorized_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgAuthorized)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgAuthorized)
  return false;
#undef DO_
}

void hgAuthorized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgAuthorized)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgAuthorized.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool Authorized = 2;
  if (this->authorized() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->authorized(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgAuthorized)
}

::google::protobuf::uint8* hgAuthorized::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgAuthorized)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgAuthorized.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool Authorized = 2;
  if (this->authorized() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->authorized(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgAuthorized)
  return target;
}

size_t hgAuthorized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgAuthorized)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool Authorized = 2;
  if (this->authorized() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgAuthorized::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgAuthorized)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgAuthorized* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgAuthorized>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgAuthorized)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgAuthorized)
    UnsafeMergeFrom(*source);
  }
}

void hgAuthorized::MergeFrom(const hgAuthorized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgAuthorized)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgAuthorized::UnsafeMergeFrom(const hgAuthorized& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.authorized() != 0) {
    set_authorized(from.authorized());
  }
}

void hgAuthorized::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgAuthorized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgAuthorized::CopyFrom(const hgAuthorized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgAuthorized)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgAuthorized::IsInitialized() const {

  return true;
}

void hgAuthorized::Swap(hgAuthorized* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgAuthorized::InternalSwap(hgAuthorized* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(authorized_, other->authorized_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgAuthorized::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgAuthorized_descriptor_;
  metadata.reflection = hgAuthorized_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgAuthorized

// optional string MMSI = 1;
void hgAuthorized::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgAuthorized::mmsi() const {
  // @@protoc_insertion_point(field_get:hgAuthorized.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgAuthorized::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAuthorized.MMSI)
}
void hgAuthorized::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAuthorized.MMSI)
}
void hgAuthorized::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAuthorized.MMSI)
}
::std::string* hgAuthorized::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgAuthorized.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgAuthorized::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgAuthorized.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgAuthorized::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgAuthorized.MMSI)
}

// optional bool Authorized = 2;
void hgAuthorized::clear_authorized() {
  authorized_ = false;
}
bool hgAuthorized::authorized() const {
  // @@protoc_insertion_point(field_get:hgAuthorized.Authorized)
  return authorized_;
}
void hgAuthorized::set_authorized(bool value) {
  
  authorized_ = value;
  // @@protoc_insertion_point(field_set:hgAuthorized.Authorized)
}

inline const hgAuthorized* hgAuthorized::internal_default_instance() {
  return &hgAuthorized_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgAuthorizedRepsone::hgAuthorizedRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgAuthorized_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgAuthorizedRepsone)
}

void hgAuthorizedRepsone::InitAsDefaultInstance() {
}

hgAuthorizedRepsone::hgAuthorizedRepsone(const hgAuthorizedRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgAuthorizedRepsone)
}

void hgAuthorizedRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgAuthorizedRepsone::~hgAuthorizedRepsone() {
  // @@protoc_insertion_point(destructor:hgAuthorizedRepsone)
  SharedDtor();
}

void hgAuthorizedRepsone::SharedDtor() {
}

void hgAuthorizedRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgAuthorizedRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgAuthorizedRepsone_descriptor_;
}

const hgAuthorizedRepsone& hgAuthorizedRepsone::default_instance() {
  protobuf_InitDefaults_hgAuthorized_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgAuthorizedRepsone> hgAuthorizedRepsone_default_instance_;

hgAuthorizedRepsone* hgAuthorizedRepsone::New(::google::protobuf::Arena* arena) const {
  hgAuthorizedRepsone* n = new hgAuthorizedRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgAuthorizedRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgAuthorizedRepsone)
}

bool hgAuthorizedRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgAuthorizedRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgAuthorizedRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgAuthorizedRepsone)
  return false;
#undef DO_
}

void hgAuthorizedRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgAuthorizedRepsone)
  // @@protoc_insertion_point(serialize_end:hgAuthorizedRepsone)
}

::google::protobuf::uint8* hgAuthorizedRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgAuthorizedRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgAuthorizedRepsone)
  return target;
}

size_t hgAuthorizedRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgAuthorizedRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgAuthorizedRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgAuthorizedRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgAuthorizedRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgAuthorizedRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgAuthorizedRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgAuthorizedRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgAuthorizedRepsone::MergeFrom(const hgAuthorizedRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgAuthorizedRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgAuthorizedRepsone::UnsafeMergeFrom(const hgAuthorizedRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgAuthorizedRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgAuthorizedRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgAuthorizedRepsone::CopyFrom(const hgAuthorizedRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgAuthorizedRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgAuthorizedRepsone::IsInitialized() const {

  return true;
}

void hgAuthorizedRepsone::Swap(hgAuthorizedRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgAuthorizedRepsone::InternalSwap(hgAuthorizedRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgAuthorizedRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgAuthorizedRepsone_descriptor_;
  metadata.reflection = hgAuthorizedRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgAuthorizedRepsone

inline const hgAuthorizedRepsone* hgAuthorizedRepsone::internal_default_instance() {
  return &hgAuthorizedRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
