// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgGPSData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgGPSData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgGPSData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgGPSData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* hgGPSDataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgGPSData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgGPSData_2eproto() {
  protobuf_AddDesc_hgGPSData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgGPSData.proto");
  GOOGLE_CHECK(file != NULL);
  hgGPSData_descriptor_ = file->message_type(0);
  static const int hgGPSData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, hdg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, mmsi_),
  };
  hgGPSData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgGPSData_descriptor_,
      hgGPSData::internal_default_instance(),
      hgGPSData_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgGPSData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgGPSData, _internal_metadata_));
  hgGPSDataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgGPSData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgGPSData_descriptor_, hgGPSData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgGPSData_2eproto() {
  hgGPSData_default_instance_.Shutdown();
  delete hgGPSData_reflection_;
}

void protobuf_InitDefaults_hgGPSData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgGPSData_default_instance_.DefaultConstruct();
  hgGPSData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgGPSData_2eproto_once_);
void protobuf_InitDefaults_hgGPSData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgGPSData_2eproto_once_,
                 &protobuf_InitDefaults_hgGPSData_2eproto_impl);
}
void protobuf_AddDesc_hgGPSData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgGPSData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017hgGPSData.proto\"\232\001\n\thgGPSData\022\034\n\004type\030"
    "\001 \001(\0162\016.hgGPSDataType\022\014\n\004time\030\002 \001(\003\022\013\n\003l"
    "at\030\003 \001(\001\022\013\n\003lon\030\004 \001(\001\022\r\n\005state\030\005 \001(\010\022\r\n\005"
    "speed\030\006 \001(\001\022\016\n\006course\030\007 \001(\001\022\013\n\003hdg\030\010 \001(\001"
    "\022\014\n\004mmsi\030\t \001(\t*\?\n\rhgGPSDataType\022\n\n\006GPSRM"
    "C\020\000\022\n\n\006GPSGGA\020\001\022\n\n\006GPSHDT\020\002\022\n\n\006GPSHDM\020\003b"
    "\006proto3", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgGPSData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgGPSData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgGPSData_2eproto_once_);
void protobuf_AddDesc_hgGPSData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgGPSData_2eproto_once_,
                 &protobuf_AddDesc_hgGPSData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgGPSData_2eproto {
  StaticDescriptorInitializer_hgGPSData_2eproto() {
    protobuf_AddDesc_hgGPSData_2eproto();
  }
} static_descriptor_initializer_hgGPSData_2eproto_;
const ::google::protobuf::EnumDescriptor* hgGPSDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgGPSDataType_descriptor_;
}
bool hgGPSDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgGPSData::kTypeFieldNumber;
const int hgGPSData::kTimeFieldNumber;
const int hgGPSData::kLatFieldNumber;
const int hgGPSData::kLonFieldNumber;
const int hgGPSData::kStateFieldNumber;
const int hgGPSData::kSpeedFieldNumber;
const int hgGPSData::kCourseFieldNumber;
const int hgGPSData::kHdgFieldNumber;
const int hgGPSData::kMmsiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgGPSData::hgGPSData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgGPSData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgGPSData)
}

void hgGPSData::InitAsDefaultInstance() {
}

hgGPSData::hgGPSData(const hgGPSData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgGPSData)
}

void hgGPSData::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&hdg_) -
    reinterpret_cast<char*>(&time_) + sizeof(hdg_));
  _cached_size_ = 0;
}

hgGPSData::~hgGPSData() {
  // @@protoc_insertion_point(destructor:hgGPSData)
  SharedDtor();
}

void hgGPSData::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgGPSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgGPSData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgGPSData_descriptor_;
}

const hgGPSData& hgGPSData::default_instance() {
  protobuf_InitDefaults_hgGPSData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgGPSData> hgGPSData_default_instance_;

hgGPSData* hgGPSData::New(::google::protobuf::Arena* arena) const {
  hgGPSData* n = new hgGPSData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgGPSData::Clear() {
// @@protoc_insertion_point(message_clear_start:hgGPSData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgGPSData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgGPSData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, hdg_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgGPSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgGPSData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hgGPSDataType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::hgGPSDataType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lat;
        break;
      }

      // optional double lat = 3;
      case 3: {
        if (tag == 25) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lon;
        break;
      }

      // optional double lon = 4;
      case 4: {
        if (tag == 33) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional bool state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_speed;
        break;
      }

      // optional double speed = 6;
      case 6: {
        if (tag == 49) {
         parse_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_course;
        break;
      }

      // optional double course = 7;
      case 7: {
        if (tag == 57) {
         parse_course:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &course_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_hdg;
        break;
      }

      // optional double hdg = 8;
      case 8: {
        if (tag == 65) {
         parse_hdg:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdg_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mmsi;
        break;
      }

      // optional string mmsi = 9;
      case 9: {
        if (tag == 74) {
         parse_mmsi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgGPSData.mmsi"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgGPSData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgGPSData)
  return false;
#undef DO_
}

void hgGPSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgGPSData)
  // optional .hgGPSDataType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // optional double lat = 3;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // optional double lon = 4;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lon(), output);
  }

  // optional bool state = 5;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->state(), output);
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // optional double course = 7;
  if (this->course() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->course(), output);
  }

  // optional double hdg = 8;
  if (this->hdg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->hdg(), output);
  }

  // optional string mmsi = 9;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgGPSData.mmsi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->mmsi(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgGPSData)
}

::google::protobuf::uint8* hgGPSData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgGPSData)
  // optional .hgGPSDataType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // optional double lat = 3;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // optional double lon = 4;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lon(), target);
  }

  // optional bool state = 5;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->state(), target);
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // optional double course = 7;
  if (this->course() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->course(), target);
  }

  // optional double hdg = 8;
  if (this->hdg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->hdg(), target);
  }

  // optional string mmsi = 9;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgGPSData.mmsi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->mmsi(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgGPSData)
  return target;
}

size_t hgGPSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgGPSData)
  size_t total_size = 0;

  // optional .hgGPSDataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // optional double lat = 3;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 4;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // optional bool state = 5;
  if (this->state() != 0) {
    total_size += 1 + 1;
  }

  // optional double speed = 6;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double course = 7;
  if (this->course() != 0) {
    total_size += 1 + 8;
  }

  // optional double hdg = 8;
  if (this->hdg() != 0) {
    total_size += 1 + 8;
  }

  // optional string mmsi = 9;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgGPSData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgGPSData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgGPSData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgGPSData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgGPSData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgGPSData)
    UnsafeMergeFrom(*source);
  }
}

void hgGPSData::MergeFrom(const hgGPSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgGPSData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgGPSData::UnsafeMergeFrom(const hgGPSData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.course() != 0) {
    set_course(from.course());
  }
  if (from.hdg() != 0) {
    set_hdg(from.hdg());
  }
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
}

void hgGPSData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgGPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgGPSData::CopyFrom(const hgGPSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgGPSData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgGPSData::IsInitialized() const {

  return true;
}

void hgGPSData::Swap(hgGPSData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgGPSData::InternalSwap(hgGPSData* other) {
  std::swap(type_, other->type_);
  std::swap(time_, other->time_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(state_, other->state_);
  std::swap(speed_, other->speed_);
  std::swap(course_, other->course_);
  std::swap(hdg_, other->hdg_);
  mmsi_.Swap(&other->mmsi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgGPSData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgGPSData_descriptor_;
  metadata.reflection = hgGPSData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgGPSData

// optional .hgGPSDataType type = 1;
void hgGPSData::clear_type() {
  type_ = 0;
}
::hgGPSDataType hgGPSData::type() const {
  // @@protoc_insertion_point(field_get:hgGPSData.type)
  return static_cast< ::hgGPSDataType >(type_);
}
void hgGPSData::set_type(::hgGPSDataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.type)
}

// optional int64 time = 2;
void hgGPSData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 hgGPSData::time() const {
  // @@protoc_insertion_point(field_get:hgGPSData.time)
  return time_;
}
void hgGPSData::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.time)
}

// optional double lat = 3;
void hgGPSData::clear_lat() {
  lat_ = 0;
}
double hgGPSData::lat() const {
  // @@protoc_insertion_point(field_get:hgGPSData.lat)
  return lat_;
}
void hgGPSData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.lat)
}

// optional double lon = 4;
void hgGPSData::clear_lon() {
  lon_ = 0;
}
double hgGPSData::lon() const {
  // @@protoc_insertion_point(field_get:hgGPSData.lon)
  return lon_;
}
void hgGPSData::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.lon)
}

// optional bool state = 5;
void hgGPSData::clear_state() {
  state_ = false;
}
bool hgGPSData::state() const {
  // @@protoc_insertion_point(field_get:hgGPSData.state)
  return state_;
}
void hgGPSData::set_state(bool value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.state)
}

// optional double speed = 6;
void hgGPSData::clear_speed() {
  speed_ = 0;
}
double hgGPSData::speed() const {
  // @@protoc_insertion_point(field_get:hgGPSData.speed)
  return speed_;
}
void hgGPSData::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.speed)
}

// optional double course = 7;
void hgGPSData::clear_course() {
  course_ = 0;
}
double hgGPSData::course() const {
  // @@protoc_insertion_point(field_get:hgGPSData.course)
  return course_;
}
void hgGPSData::set_course(double value) {
  
  course_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.course)
}

// optional double hdg = 8;
void hgGPSData::clear_hdg() {
  hdg_ = 0;
}
double hgGPSData::hdg() const {
  // @@protoc_insertion_point(field_get:hgGPSData.hdg)
  return hdg_;
}
void hgGPSData::set_hdg(double value) {
  
  hdg_ = value;
  // @@protoc_insertion_point(field_set:hgGPSData.hdg)
}

// optional string mmsi = 9;
void hgGPSData::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgGPSData::mmsi() const {
  // @@protoc_insertion_point(field_get:hgGPSData.mmsi)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgGPSData::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgGPSData.mmsi)
}
void hgGPSData::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgGPSData.mmsi)
}
void hgGPSData::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgGPSData.mmsi)
}
::std::string* hgGPSData::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgGPSData.mmsi)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgGPSData::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgGPSData.mmsi)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgGPSData::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgGPSData.mmsi)
}

inline const hgGPSData* hgGPSData::internal_default_instance() {
  return &hgGPSData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
