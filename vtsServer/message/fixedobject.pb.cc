// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fixedobject.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fixedobject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FixedObjectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedObjectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FixedObjectRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FixedObjectRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fixedobject_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_fixedobject_2eproto() {
  protobuf_AddDesc_fixedobject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fixedobject.proto");
  GOOGLE_CHECK(file != NULL);
  FixedObjectRequest_descriptor_ = file->message_type(0);
  static const int FixedObjectRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, remarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, iconurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, drawman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, isshare_),
  };
  FixedObjectRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FixedObjectRequest_descriptor_,
      FixedObjectRequest::internal_default_instance(),
      FixedObjectRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(FixedObjectRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRequest, _internal_metadata_));
  FixedObjectRepsone_descriptor_ = file->message_type(1);
  static const int FixedObjectRepsone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRepsone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRepsone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRepsone, fixedobjs_),
  };
  FixedObjectRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FixedObjectRepsone_descriptor_,
      FixedObjectRepsone::internal_default_instance(),
      FixedObjectRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(FixedObjectRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedObjectRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fixedobject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FixedObjectRequest_descriptor_, FixedObjectRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FixedObjectRepsone_descriptor_, FixedObjectRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fixedobject_2eproto() {
  FixedObjectRequest_default_instance_.Shutdown();
  delete FixedObjectRequest_reflection_;
  FixedObjectRepsone_default_instance_.Shutdown();
  delete FixedObjectRepsone_reflection_;
}

void protobuf_InitDefaults_fixedobject_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  FixedObjectRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  FixedObjectRepsone_default_instance_.DefaultConstruct();
  FixedObjectRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  FixedObjectRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_fixedobject_2eproto_once_);
void protobuf_InitDefaults_fixedobject_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_fixedobject_2eproto_once_,
                 &protobuf_InitDefaults_fixedobject_2eproto_impl);
}
void protobuf_AddDesc_fixedobject_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_fixedobject_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021fixedobject.proto\"\232\001\n\022FixedObjectReque"
    "st\022\014\n\004type\030\001 \001(\005\022\n\n\002ID\030\002 \001(\t\022\014\n\004name\030\003 \001"
    "(\t\022\013\n\003lat\030\004 \001(\001\022\013\n\003lon\030\005 \001(\001\022\017\n\007remarks\030"
    "\006 \001(\t\022\017\n\007iconURL\030\007 \001(\t\022\017\n\007drawman\030\010 \001(\t\022"
    "\017\n\007isshare\030\t \001(\010\"Z\n\022FixedObjectRepsone\022\014"
    "\n\004type\030\001 \001(\005\022\016\n\006result\030\002 \001(\t\022&\n\tfixedobj"
    "s\030\003 \003(\0132\023.FixedObjectRequestb\006proto3", 276);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fixedobject.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fixedobject_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_fixedobject_2eproto_once_);
void protobuf_AddDesc_fixedobject_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_fixedobject_2eproto_once_,
                 &protobuf_AddDesc_fixedobject_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fixedobject_2eproto {
  StaticDescriptorInitializer_fixedobject_2eproto() {
    protobuf_AddDesc_fixedobject_2eproto();
  }
} static_descriptor_initializer_fixedobject_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedObjectRequest::kTypeFieldNumber;
const int FixedObjectRequest::kIDFieldNumber;
const int FixedObjectRequest::kNameFieldNumber;
const int FixedObjectRequest::kLatFieldNumber;
const int FixedObjectRequest::kLonFieldNumber;
const int FixedObjectRequest::kRemarksFieldNumber;
const int FixedObjectRequest::kIconURLFieldNumber;
const int FixedObjectRequest::kDrawmanFieldNumber;
const int FixedObjectRequest::kIsshareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedObjectRequest::FixedObjectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_fixedobject_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FixedObjectRequest)
}

void FixedObjectRequest::InitAsDefaultInstance() {
}

FixedObjectRequest::FixedObjectRequest(const FixedObjectRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FixedObjectRequest)
}

void FixedObjectRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&isshare_) -
    reinterpret_cast<char*>(&lat_) + sizeof(isshare_));
  _cached_size_ = 0;
}

FixedObjectRequest::~FixedObjectRequest() {
  // @@protoc_insertion_point(destructor:FixedObjectRequest)
  SharedDtor();
}

void FixedObjectRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FixedObjectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedObjectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedObjectRequest_descriptor_;
}

const FixedObjectRequest& FixedObjectRequest::default_instance() {
  protobuf_InitDefaults_fixedobject_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FixedObjectRequest> FixedObjectRequest_default_instance_;

FixedObjectRequest* FixedObjectRequest::New(::google::protobuf::Arena* arena) const {
  FixedObjectRequest* n = new FixedObjectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedObjectRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FixedObjectRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FixedObjectRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, type_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isshare_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool FixedObjectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FixedObjectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (tag == 18) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FixedObjectRequest.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FixedObjectRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lat;
        break;
      }

      // optional double lat = 4;
      case 4: {
        if (tag == 33) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lon;
        break;
      }

      // optional double lon = 5;
      case 5: {
        if (tag == 41) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remarks;
        break;
      }

      // optional string remarks = 6;
      case 6: {
        if (tag == 50) {
         parse_remarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remarks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remarks().data(), this->remarks().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FixedObjectRequest.remarks"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_iconURL;
        break;
      }

      // optional string iconURL = 7;
      case 7: {
        if (tag == 58) {
         parse_iconURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FixedObjectRequest.iconURL"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_drawman;
        break;
      }

      // optional string drawman = 8;
      case 8: {
        if (tag == 66) {
         parse_drawman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawman()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drawman().data(), this->drawman().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FixedObjectRequest.drawman"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isshare;
        break;
      }

      // optional bool isshare = 9;
      case 9: {
        if (tag == 72) {
         parse_isshare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FixedObjectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FixedObjectRequest)
  return false;
#undef DO_
}

void FixedObjectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FixedObjectRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // optional string remarks = 6;
  if (this->remarks().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remarks().data(), this->remarks().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.remarks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->remarks(), output);
  }

  // optional string iconURL = 7;
  if (this->iconurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.iconURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->iconurl(), output);
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.drawman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->drawman(), output);
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isshare(), output);
  }

  // @@protoc_insertion_point(serialize_end:FixedObjectRequest)
}

::google::protobuf::uint8* FixedObjectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FixedObjectRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // optional string remarks = 6;
  if (this->remarks().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remarks().data(), this->remarks().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.remarks");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->remarks(), target);
  }

  // optional string iconURL = 7;
  if (this->iconurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.iconURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->iconurl(), target);
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRequest.drawman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->drawman(), target);
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isshare(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FixedObjectRequest)
  return target;
}

size_t FixedObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedObjectRequest)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // optional string remarks = 6;
  if (this->remarks().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remarks());
  }

  // optional string iconURL = 7;
  if (this->iconurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iconurl());
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drawman());
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedObjectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedObjectRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FixedObjectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedObjectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedObjectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedObjectRequest)
    UnsafeMergeFrom(*source);
  }
}

void FixedObjectRequest::MergeFrom(const FixedObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedObjectRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FixedObjectRequest::UnsafeMergeFrom(const FixedObjectRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.remarks().size() > 0) {

    remarks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remarks_);
  }
  if (from.iconurl().size() > 0) {

    iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
  }
  if (from.drawman().size() > 0) {

    drawman_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drawman_);
  }
  if (from.isshare() != 0) {
    set_isshare(from.isshare());
  }
}

void FixedObjectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedObjectRequest::CopyFrom(const FixedObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedObjectRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FixedObjectRequest::IsInitialized() const {

  return true;
}

void FixedObjectRequest::Swap(FixedObjectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedObjectRequest::InternalSwap(FixedObjectRequest* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  remarks_.Swap(&other->remarks_);
  iconurl_.Swap(&other->iconurl_);
  drawman_.Swap(&other->drawman_);
  std::swap(isshare_, other->isshare_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedObjectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedObjectRequest_descriptor_;
  metadata.reflection = FixedObjectRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedObjectRequest

// optional int32 type = 1;
void FixedObjectRequest::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 FixedObjectRequest::type() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.type)
  return type_;
}
void FixedObjectRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.type)
}

// optional string ID = 2;
void FixedObjectRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FixedObjectRequest::id() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.ID)
}
void FixedObjectRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.ID)
}
void FixedObjectRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.ID)
}
::std::string* FixedObjectRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FixedObjectRequest::release_id() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.ID)
}

// optional string name = 3;
void FixedObjectRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FixedObjectRequest::name() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.name)
}
void FixedObjectRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.name)
}
void FixedObjectRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.name)
}
::std::string* FixedObjectRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FixedObjectRequest::release_name() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.name)
}

// optional double lat = 4;
void FixedObjectRequest::clear_lat() {
  lat_ = 0;
}
double FixedObjectRequest::lat() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.lat)
  return lat_;
}
void FixedObjectRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.lat)
}

// optional double lon = 5;
void FixedObjectRequest::clear_lon() {
  lon_ = 0;
}
double FixedObjectRequest::lon() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.lon)
  return lon_;
}
void FixedObjectRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.lon)
}

// optional string remarks = 6;
void FixedObjectRequest::clear_remarks() {
  remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FixedObjectRequest::remarks() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.remarks)
  return remarks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_remarks(const ::std::string& value) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.remarks)
}
void FixedObjectRequest::set_remarks(const char* value) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.remarks)
}
void FixedObjectRequest::set_remarks(const char* value, size_t size) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.remarks)
}
::std::string* FixedObjectRequest::mutable_remarks() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.remarks)
  return remarks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FixedObjectRequest::release_remarks() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.remarks)
  
  return remarks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_allocated_remarks(::std::string* remarks) {
  if (remarks != NULL) {
    
  } else {
    
  }
  remarks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remarks);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.remarks)
}

// optional string iconURL = 7;
void FixedObjectRequest::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FixedObjectRequest::iconurl() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.iconURL)
  return iconurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_iconurl(const ::std::string& value) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.iconURL)
}
void FixedObjectRequest::set_iconurl(const char* value) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.iconURL)
}
void FixedObjectRequest::set_iconurl(const char* value, size_t size) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.iconURL)
}
::std::string* FixedObjectRequest::mutable_iconurl() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.iconURL)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FixedObjectRequest::release_iconurl() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.iconURL)
  
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    
  } else {
    
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.iconURL)
}

// optional string drawman = 8;
void FixedObjectRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FixedObjectRequest::drawman() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRequest.drawman)
}
void FixedObjectRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRequest.drawman)
}
void FixedObjectRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRequest.drawman)
}
::std::string* FixedObjectRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FixedObjectRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:FixedObjectRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRequest.drawman)
}

// optional bool isshare = 9;
void FixedObjectRequest::clear_isshare() {
  isshare_ = false;
}
bool FixedObjectRequest::isshare() const {
  // @@protoc_insertion_point(field_get:FixedObjectRequest.isshare)
  return isshare_;
}
void FixedObjectRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRequest.isshare)
}

inline const FixedObjectRequest* FixedObjectRequest::internal_default_instance() {
  return &FixedObjectRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedObjectRepsone::kTypeFieldNumber;
const int FixedObjectRepsone::kResultFieldNumber;
const int FixedObjectRepsone::kFixedobjsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedObjectRepsone::FixedObjectRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_fixedobject_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FixedObjectRepsone)
}

void FixedObjectRepsone::InitAsDefaultInstance() {
}

FixedObjectRepsone::FixedObjectRepsone(const FixedObjectRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FixedObjectRepsone)
}

void FixedObjectRepsone::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

FixedObjectRepsone::~FixedObjectRepsone() {
  // @@protoc_insertion_point(destructor:FixedObjectRepsone)
  SharedDtor();
}

void FixedObjectRepsone::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FixedObjectRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedObjectRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FixedObjectRepsone_descriptor_;
}

const FixedObjectRepsone& FixedObjectRepsone::default_instance() {
  protobuf_InitDefaults_fixedobject_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FixedObjectRepsone> FixedObjectRepsone_default_instance_;

FixedObjectRepsone* FixedObjectRepsone::New(::google::protobuf::Arena* arena) const {
  FixedObjectRepsone* n = new FixedObjectRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedObjectRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:FixedObjectRepsone)
  type_ = 0;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fixedobjs_.Clear();
}

bool FixedObjectRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FixedObjectRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FixedObjectRepsone.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fixedobjs;
        break;
      }

      // repeated .FixedObjectRequest fixedobjs = 3;
      case 3: {
        if (tag == 26) {
         parse_fixedobjs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fixedobjs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fixedobjs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fixedobjs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FixedObjectRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FixedObjectRepsone)
  return false;
#undef DO_
}

void FixedObjectRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FixedObjectRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRepsone.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // repeated .FixedObjectRequest fixedobjs = 3;
  for (unsigned int i = 0, n = this->fixedobjs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fixedobjs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:FixedObjectRepsone)
}

::google::protobuf::uint8* FixedObjectRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FixedObjectRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FixedObjectRepsone.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // repeated .FixedObjectRequest fixedobjs = 3;
  for (unsigned int i = 0, n = this->fixedobjs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fixedobjs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FixedObjectRepsone)
  return target;
}

size_t FixedObjectRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FixedObjectRepsone)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // repeated .FixedObjectRequest fixedobjs = 3;
  {
    unsigned int count = this->fixedobjs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedobjs(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedObjectRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FixedObjectRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FixedObjectRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedObjectRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FixedObjectRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FixedObjectRepsone)
    UnsafeMergeFrom(*source);
  }
}

void FixedObjectRepsone::MergeFrom(const FixedObjectRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FixedObjectRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FixedObjectRepsone::UnsafeMergeFrom(const FixedObjectRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  fixedobjs_.MergeFrom(from.fixedobjs_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void FixedObjectRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FixedObjectRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedObjectRepsone::CopyFrom(const FixedObjectRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FixedObjectRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FixedObjectRepsone::IsInitialized() const {

  return true;
}

void FixedObjectRepsone::Swap(FixedObjectRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedObjectRepsone::InternalSwap(FixedObjectRepsone* other) {
  std::swap(type_, other->type_);
  result_.Swap(&other->result_);
  fixedobjs_.UnsafeArenaSwap(&other->fixedobjs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedObjectRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FixedObjectRepsone_descriptor_;
  metadata.reflection = FixedObjectRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedObjectRepsone

// optional int32 type = 1;
void FixedObjectRepsone::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 FixedObjectRepsone::type() const {
  // @@protoc_insertion_point(field_get:FixedObjectRepsone.type)
  return type_;
}
void FixedObjectRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FixedObjectRepsone.type)
}

// optional string result = 2;
void FixedObjectRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FixedObjectRepsone::result() const {
  // @@protoc_insertion_point(field_get:FixedObjectRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FixedObjectRepsone.result)
}
void FixedObjectRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FixedObjectRepsone.result)
}
void FixedObjectRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FixedObjectRepsone.result)
}
::std::string* FixedObjectRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:FixedObjectRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FixedObjectRepsone::release_result() {
  // @@protoc_insertion_point(field_release:FixedObjectRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FixedObjectRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:FixedObjectRepsone.result)
}

// repeated .FixedObjectRequest fixedobjs = 3;
int FixedObjectRepsone::fixedobjs_size() const {
  return fixedobjs_.size();
}
void FixedObjectRepsone::clear_fixedobjs() {
  fixedobjs_.Clear();
}
const ::FixedObjectRequest& FixedObjectRepsone::fixedobjs(int index) const {
  // @@protoc_insertion_point(field_get:FixedObjectRepsone.fixedobjs)
  return fixedobjs_.Get(index);
}
::FixedObjectRequest* FixedObjectRepsone::mutable_fixedobjs(int index) {
  // @@protoc_insertion_point(field_mutable:FixedObjectRepsone.fixedobjs)
  return fixedobjs_.Mutable(index);
}
::FixedObjectRequest* FixedObjectRepsone::add_fixedobjs() {
  // @@protoc_insertion_point(field_add:FixedObjectRepsone.fixedobjs)
  return fixedobjs_.Add();
}
::google::protobuf::RepeatedPtrField< ::FixedObjectRequest >*
FixedObjectRepsone::mutable_fixedobjs() {
  // @@protoc_insertion_point(field_mutable_list:FixedObjectRepsone.fixedobjs)
  return &fixedobjs_;
}
const ::google::protobuf::RepeatedPtrField< ::FixedObjectRequest >&
FixedObjectRepsone::fixedobjs() const {
  // @@protoc_insertion_point(field_list:FixedObjectRepsone.fixedobjs)
  return fixedobjs_;
}

inline const FixedObjectRepsone* FixedObjectRepsone::internal_default_instance() {
  return &FixedObjectRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
