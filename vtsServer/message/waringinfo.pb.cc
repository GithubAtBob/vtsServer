// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waringinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "waringinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WaringInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaringInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_waringinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_waringinfo_2eproto() {
  protobuf_AddDesc_waringinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "waringinfo.proto");
  GOOGLE_CHECK(file != NULL);
  WaringInfo_descriptor_ = file->message_type(0);
  static const int WaringInfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, enter_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, enter_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, enter_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, leave_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, leave_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, leave_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, inside_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, inside_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, inside_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, outside_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, outside_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, outside_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, high_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, high_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, low_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, low_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, pro_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, pro_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, pro_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, anc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, add_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, add_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, add_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, col_cpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, col_tcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, col_dcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, col_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, con_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, con_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, gro_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, gro_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, app_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, cou_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, cou_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, fog_begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, fog_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, fog_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, fog_mmsi_),
  };
  WaringInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WaringInfo_descriptor_,
      WaringInfo::internal_default_instance(),
      WaringInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(WaringInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaringInfo, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_waringinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WaringInfo_descriptor_, WaringInfo::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_waringinfo_2eproto() {
  WaringInfo_default_instance_.Shutdown();
  delete WaringInfo_reflection_;
}

void protobuf_InitDefaults_waringinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  WaringInfo_default_instance_.DefaultConstruct();
  WaringInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_waringinfo_2eproto_once_);
void protobuf_InitDefaults_waringinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_waringinfo_2eproto_once_,
                 &protobuf_InitDefaults_waringinfo_2eproto_impl);
}
void protobuf_AddDesc_waringinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_waringinfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020waringinfo.proto\"\232\006\n\nWaringInfo\022\022\n\nent"
    "er_time\030\001 \001(\005\022\023\n\013enter_speed\030\002 \001(\001\022\032\n\022en"
    "ter_acceleration\030\003 \001(\001\022\022\n\nleave_time\030\004 \001"
    "(\005\022\023\n\013leave_speed\030\005 \001(\001\022\032\n\022leave_acceler"
    "ation\030\006 \001(\001\022\023\n\013inside_time\030\007 \001(\005\022\024\n\014insi"
    "de_speed\030\010 \001(\001\022\033\n\023inside_acceleration\030\t "
    "\001(\001\022\024\n\014outside_time\030\n \001(\005\022\025\n\routside_spe"
    "ed\030\013 \001(\001\022\034\n\024outside_acceleration\030\014 \001(\001\022\025"
    "\n\rhigh_duration\030\r \001(\005\022\022\n\nhigh_speed\030\016 \001("
    "\001\022\024\n\014low_duration\030\017 \001(\005\022\021\n\tlow_speed\030\020 \001"
    "(\001\022\024\n\014pro_duration\030\021 \001(\005\022\017\n\007pro_lat\030\022 \001("
    "\001\022\017\n\007pro_lon\030\023 \001(\001\022\020\n\010anc_type\030\024 \003(\t\022\017\n\007"
    "add_max\030\025 \001(\001\022\017\n\007add_min\030\026 \001(\001\022\024\n\014add_du"
    "ration\030\027 \001(\001\022\017\n\007col_cpa\030\030 \001(\001\022\020\n\010col_tcp"
    "a\030\031 \001(\001\022\020\n\010col_dcpa\030\032 \001(\001\022\020\n\010col_dist\030\033 "
    "\001(\001\022\020\n\010con_time\030\034 \001(\005\022\021\n\tcon_total\030\035 \001(\005"
    "\022\021\n\tgro_depth\030\036 \001(\001\022\020\n\010gro_time\030\037 \001(\005\022\020\n"
    "\010app_time\030  \001(\005\022\022\n\ncou_change\030! \001(\005\022\020\n\010c"
    "ou_time\030\" \001(\005\022\026\n\016fog_begin_time\030# \001(\003\022\024\n"
    "\014fog_end_time\030$ \001(\003\022\020\n\010fog_time\030% \001(\005\022\020\n"
    "\010fog_MMSI\030& \003(\tb\006proto3", 823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "waringinfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_waringinfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_waringinfo_2eproto_once_);
void protobuf_AddDesc_waringinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_waringinfo_2eproto_once_,
                 &protobuf_AddDesc_waringinfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_waringinfo_2eproto {
  StaticDescriptorInitializer_waringinfo_2eproto() {
    protobuf_AddDesc_waringinfo_2eproto();
  }
} static_descriptor_initializer_waringinfo_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WaringInfo::kEnterTimeFieldNumber;
const int WaringInfo::kEnterSpeedFieldNumber;
const int WaringInfo::kEnterAccelerationFieldNumber;
const int WaringInfo::kLeaveTimeFieldNumber;
const int WaringInfo::kLeaveSpeedFieldNumber;
const int WaringInfo::kLeaveAccelerationFieldNumber;
const int WaringInfo::kInsideTimeFieldNumber;
const int WaringInfo::kInsideSpeedFieldNumber;
const int WaringInfo::kInsideAccelerationFieldNumber;
const int WaringInfo::kOutsideTimeFieldNumber;
const int WaringInfo::kOutsideSpeedFieldNumber;
const int WaringInfo::kOutsideAccelerationFieldNumber;
const int WaringInfo::kHighDurationFieldNumber;
const int WaringInfo::kHighSpeedFieldNumber;
const int WaringInfo::kLowDurationFieldNumber;
const int WaringInfo::kLowSpeedFieldNumber;
const int WaringInfo::kProDurationFieldNumber;
const int WaringInfo::kProLatFieldNumber;
const int WaringInfo::kProLonFieldNumber;
const int WaringInfo::kAncTypeFieldNumber;
const int WaringInfo::kAddMaxFieldNumber;
const int WaringInfo::kAddMinFieldNumber;
const int WaringInfo::kAddDurationFieldNumber;
const int WaringInfo::kColCpaFieldNumber;
const int WaringInfo::kColTcpaFieldNumber;
const int WaringInfo::kColDcpaFieldNumber;
const int WaringInfo::kColDistFieldNumber;
const int WaringInfo::kConTimeFieldNumber;
const int WaringInfo::kConTotalFieldNumber;
const int WaringInfo::kGroDepthFieldNumber;
const int WaringInfo::kGroTimeFieldNumber;
const int WaringInfo::kAppTimeFieldNumber;
const int WaringInfo::kCouChangeFieldNumber;
const int WaringInfo::kCouTimeFieldNumber;
const int WaringInfo::kFogBeginTimeFieldNumber;
const int WaringInfo::kFogEndTimeFieldNumber;
const int WaringInfo::kFogTimeFieldNumber;
const int WaringInfo::kFogMMSIFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WaringInfo::WaringInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_waringinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:WaringInfo)
}

void WaringInfo::InitAsDefaultInstance() {
}

WaringInfo::WaringInfo(const WaringInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:WaringInfo)
}

void WaringInfo::SharedCtor() {
  ::memset(&enter_speed_, 0, reinterpret_cast<char*>(&fog_end_time_) -
    reinterpret_cast<char*>(&enter_speed_) + sizeof(fog_end_time_));
  _cached_size_ = 0;
}

WaringInfo::~WaringInfo() {
  // @@protoc_insertion_point(destructor:WaringInfo)
  SharedDtor();
}

void WaringInfo::SharedDtor() {
}

void WaringInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaringInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaringInfo_descriptor_;
}

const WaringInfo& WaringInfo::default_instance() {
  protobuf_InitDefaults_waringinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<WaringInfo> WaringInfo_default_instance_;

WaringInfo* WaringInfo::New(::google::protobuf::Arena* arena) const {
  WaringInfo* n = new WaringInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WaringInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:WaringInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WaringInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WaringInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enter_speed_, inside_time_);
  ZR_(outside_time_, low_speed_);
  ZR_(pro_lat_, pro_duration_);
  ZR_(add_duration_, col_cpa_);
  ZR_(col_tcpa_, app_time_);
  con_time_ = 0;
  ZR_(cou_change_, fog_end_time_);

#undef ZR_HELPER_
#undef ZR_

  anc_type_.Clear();
  fog_mmsi_.Clear();
}

bool WaringInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WaringInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enter_time = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_enter_speed;
        break;
      }

      // optional double enter_speed = 2;
      case 2: {
        if (tag == 17) {
         parse_enter_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &enter_speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_enter_acceleration;
        break;
      }

      // optional double enter_acceleration = 3;
      case 3: {
        if (tag == 25) {
         parse_enter_acceleration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &enter_acceleration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_leave_time;
        break;
      }

      // optional int32 leave_time = 4;
      case 4: {
        if (tag == 32) {
         parse_leave_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_leave_speed;
        break;
      }

      // optional double leave_speed = 5;
      case 5: {
        if (tag == 41) {
         parse_leave_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leave_speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_leave_acceleration;
        break;
      }

      // optional double leave_acceleration = 6;
      case 6: {
        if (tag == 49) {
         parse_leave_acceleration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leave_acceleration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_inside_time;
        break;
      }

      // optional int32 inside_time = 7;
      case 7: {
        if (tag == 56) {
         parse_inside_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inside_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_inside_speed;
        break;
      }

      // optional double inside_speed = 8;
      case 8: {
        if (tag == 65) {
         parse_inside_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inside_speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_inside_acceleration;
        break;
      }

      // optional double inside_acceleration = 9;
      case 9: {
        if (tag == 73) {
         parse_inside_acceleration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inside_acceleration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_outside_time;
        break;
      }

      // optional int32 outside_time = 10;
      case 10: {
        if (tag == 80) {
         parse_outside_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outside_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_outside_speed;
        break;
      }

      // optional double outside_speed = 11;
      case 11: {
        if (tag == 89) {
         parse_outside_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &outside_speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_outside_acceleration;
        break;
      }

      // optional double outside_acceleration = 12;
      case 12: {
        if (tag == 97) {
         parse_outside_acceleration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &outside_acceleration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_high_duration;
        break;
      }

      // optional int32 high_duration = 13;
      case 13: {
        if (tag == 104) {
         parse_high_duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_high_speed;
        break;
      }

      // optional double high_speed = 14;
      case 14: {
        if (tag == 113) {
         parse_high_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_low_duration;
        break;
      }

      // optional int32 low_duration = 15;
      case 15: {
        if (tag == 120) {
         parse_low_duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_low_speed;
        break;
      }

      // optional double low_speed = 16;
      case 16: {
        if (tag == 129) {
         parse_low_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_pro_duration;
        break;
      }

      // optional int32 pro_duration = 17;
      case 17: {
        if (tag == 136) {
         parse_pro_duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_pro_lat;
        break;
      }

      // optional double pro_lat = 18;
      case 18: {
        if (tag == 145) {
         parse_pro_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pro_lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_pro_lon;
        break;
      }

      // optional double pro_lon = 19;
      case 19: {
        if (tag == 153) {
         parse_pro_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pro_lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_anc_type;
        break;
      }

      // repeated string anc_type = 20;
      case 20: {
        if (tag == 162) {
         parse_anc_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_anc_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->anc_type(this->anc_type_size() - 1).data(),
            this->anc_type(this->anc_type_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WaringInfo.anc_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_anc_type;
        if (input->ExpectTag(169)) goto parse_add_max;
        break;
      }

      // optional double add_max = 21;
      case 21: {
        if (tag == 169) {
         parse_add_max:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &add_max_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_add_min;
        break;
      }

      // optional double add_min = 22;
      case 22: {
        if (tag == 177) {
         parse_add_min:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &add_min_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_add_duration;
        break;
      }

      // optional double add_duration = 23;
      case 23: {
        if (tag == 185) {
         parse_add_duration:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &add_duration_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_col_cpa;
        break;
      }

      // optional double col_cpa = 24;
      case 24: {
        if (tag == 193) {
         parse_col_cpa:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &col_cpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_col_tcpa;
        break;
      }

      // optional double col_tcpa = 25;
      case 25: {
        if (tag == 201) {
         parse_col_tcpa:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &col_tcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_col_dcpa;
        break;
      }

      // optional double col_dcpa = 26;
      case 26: {
        if (tag == 209) {
         parse_col_dcpa:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &col_dcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_col_dist;
        break;
      }

      // optional double col_dist = 27;
      case 27: {
        if (tag == 217) {
         parse_col_dist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &col_dist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_con_time;
        break;
      }

      // optional int32 con_time = 28;
      case 28: {
        if (tag == 224) {
         parse_con_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_con_total;
        break;
      }

      // optional int32 con_total = 29;
      case 29: {
        if (tag == 232) {
         parse_con_total:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_total_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_gro_depth;
        break;
      }

      // optional double gro_depth = 30;
      case 30: {
        if (tag == 241) {
         parse_gro_depth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gro_depth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_gro_time;
        break;
      }

      // optional int32 gro_time = 31;
      case 31: {
        if (tag == 248) {
         parse_gro_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gro_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_app_time;
        break;
      }

      // optional int32 app_time = 32;
      case 32: {
        if (tag == 256) {
         parse_app_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_cou_change;
        break;
      }

      // optional int32 cou_change = 33;
      case 33: {
        if (tag == 264) {
         parse_cou_change:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cou_change_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_cou_time;
        break;
      }

      // optional int32 cou_time = 34;
      case 34: {
        if (tag == 272) {
         parse_cou_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cou_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_fog_begin_time;
        break;
      }

      // optional int64 fog_begin_time = 35;
      case 35: {
        if (tag == 280) {
         parse_fog_begin_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fog_begin_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_fog_end_time;
        break;
      }

      // optional int64 fog_end_time = 36;
      case 36: {
        if (tag == 288) {
         parse_fog_end_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fog_end_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_fog_time;
        break;
      }

      // optional int32 fog_time = 37;
      case 37: {
        if (tag == 296) {
         parse_fog_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fog_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_fog_MMSI;
        break;
      }

      // repeated string fog_MMSI = 38;
      case 38: {
        if (tag == 306) {
         parse_fog_MMSI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fog_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fog_mmsi(this->fog_mmsi_size() - 1).data(),
            this->fog_mmsi(this->fog_mmsi_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WaringInfo.fog_MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_fog_MMSI;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WaringInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WaringInfo)
  return false;
#undef DO_
}

void WaringInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WaringInfo)
  // optional int32 enter_time = 1;
  if (this->enter_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enter_time(), output);
  }

  // optional double enter_speed = 2;
  if (this->enter_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->enter_speed(), output);
  }

  // optional double enter_acceleration = 3;
  if (this->enter_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->enter_acceleration(), output);
  }

  // optional int32 leave_time = 4;
  if (this->leave_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->leave_time(), output);
  }

  // optional double leave_speed = 5;
  if (this->leave_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->leave_speed(), output);
  }

  // optional double leave_acceleration = 6;
  if (this->leave_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->leave_acceleration(), output);
  }

  // optional int32 inside_time = 7;
  if (this->inside_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->inside_time(), output);
  }

  // optional double inside_speed = 8;
  if (this->inside_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->inside_speed(), output);
  }

  // optional double inside_acceleration = 9;
  if (this->inside_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->inside_acceleration(), output);
  }

  // optional int32 outside_time = 10;
  if (this->outside_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->outside_time(), output);
  }

  // optional double outside_speed = 11;
  if (this->outside_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->outside_speed(), output);
  }

  // optional double outside_acceleration = 12;
  if (this->outside_acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->outside_acceleration(), output);
  }

  // optional int32 high_duration = 13;
  if (this->high_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->high_duration(), output);
  }

  // optional double high_speed = 14;
  if (this->high_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->high_speed(), output);
  }

  // optional int32 low_duration = 15;
  if (this->low_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->low_duration(), output);
  }

  // optional double low_speed = 16;
  if (this->low_speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->low_speed(), output);
  }

  // optional int32 pro_duration = 17;
  if (this->pro_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->pro_duration(), output);
  }

  // optional double pro_lat = 18;
  if (this->pro_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->pro_lat(), output);
  }

  // optional double pro_lon = 19;
  if (this->pro_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->pro_lon(), output);
  }

  // repeated string anc_type = 20;
  for (int i = 0; i < this->anc_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anc_type(i).data(), this->anc_type(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WaringInfo.anc_type");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->anc_type(i), output);
  }

  // optional double add_max = 21;
  if (this->add_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->add_max(), output);
  }

  // optional double add_min = 22;
  if (this->add_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->add_min(), output);
  }

  // optional double add_duration = 23;
  if (this->add_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->add_duration(), output);
  }

  // optional double col_cpa = 24;
  if (this->col_cpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->col_cpa(), output);
  }

  // optional double col_tcpa = 25;
  if (this->col_tcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->col_tcpa(), output);
  }

  // optional double col_dcpa = 26;
  if (this->col_dcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->col_dcpa(), output);
  }

  // optional double col_dist = 27;
  if (this->col_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->col_dist(), output);
  }

  // optional int32 con_time = 28;
  if (this->con_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->con_time(), output);
  }

  // optional int32 con_total = 29;
  if (this->con_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->con_total(), output);
  }

  // optional double gro_depth = 30;
  if (this->gro_depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->gro_depth(), output);
  }

  // optional int32 gro_time = 31;
  if (this->gro_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->gro_time(), output);
  }

  // optional int32 app_time = 32;
  if (this->app_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->app_time(), output);
  }

  // optional int32 cou_change = 33;
  if (this->cou_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->cou_change(), output);
  }

  // optional int32 cou_time = 34;
  if (this->cou_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->cou_time(), output);
  }

  // optional int64 fog_begin_time = 35;
  if (this->fog_begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(35, this->fog_begin_time(), output);
  }

  // optional int64 fog_end_time = 36;
  if (this->fog_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->fog_end_time(), output);
  }

  // optional int32 fog_time = 37;
  if (this->fog_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->fog_time(), output);
  }

  // repeated string fog_MMSI = 38;
  for (int i = 0; i < this->fog_mmsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fog_mmsi(i).data(), this->fog_mmsi(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WaringInfo.fog_MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->fog_mmsi(i), output);
  }

  // @@protoc_insertion_point(serialize_end:WaringInfo)
}

::google::protobuf::uint8* WaringInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WaringInfo)
  // optional int32 enter_time = 1;
  if (this->enter_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enter_time(), target);
  }

  // optional double enter_speed = 2;
  if (this->enter_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->enter_speed(), target);
  }

  // optional double enter_acceleration = 3;
  if (this->enter_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->enter_acceleration(), target);
  }

  // optional int32 leave_time = 4;
  if (this->leave_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->leave_time(), target);
  }

  // optional double leave_speed = 5;
  if (this->leave_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->leave_speed(), target);
  }

  // optional double leave_acceleration = 6;
  if (this->leave_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->leave_acceleration(), target);
  }

  // optional int32 inside_time = 7;
  if (this->inside_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->inside_time(), target);
  }

  // optional double inside_speed = 8;
  if (this->inside_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->inside_speed(), target);
  }

  // optional double inside_acceleration = 9;
  if (this->inside_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->inside_acceleration(), target);
  }

  // optional int32 outside_time = 10;
  if (this->outside_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->outside_time(), target);
  }

  // optional double outside_speed = 11;
  if (this->outside_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->outside_speed(), target);
  }

  // optional double outside_acceleration = 12;
  if (this->outside_acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->outside_acceleration(), target);
  }

  // optional int32 high_duration = 13;
  if (this->high_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->high_duration(), target);
  }

  // optional double high_speed = 14;
  if (this->high_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->high_speed(), target);
  }

  // optional int32 low_duration = 15;
  if (this->low_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->low_duration(), target);
  }

  // optional double low_speed = 16;
  if (this->low_speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->low_speed(), target);
  }

  // optional int32 pro_duration = 17;
  if (this->pro_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->pro_duration(), target);
  }

  // optional double pro_lat = 18;
  if (this->pro_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->pro_lat(), target);
  }

  // optional double pro_lon = 19;
  if (this->pro_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->pro_lon(), target);
  }

  // repeated string anc_type = 20;
  for (int i = 0; i < this->anc_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->anc_type(i).data(), this->anc_type(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WaringInfo.anc_type");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->anc_type(i), target);
  }

  // optional double add_max = 21;
  if (this->add_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->add_max(), target);
  }

  // optional double add_min = 22;
  if (this->add_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->add_min(), target);
  }

  // optional double add_duration = 23;
  if (this->add_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->add_duration(), target);
  }

  // optional double col_cpa = 24;
  if (this->col_cpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->col_cpa(), target);
  }

  // optional double col_tcpa = 25;
  if (this->col_tcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->col_tcpa(), target);
  }

  // optional double col_dcpa = 26;
  if (this->col_dcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->col_dcpa(), target);
  }

  // optional double col_dist = 27;
  if (this->col_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->col_dist(), target);
  }

  // optional int32 con_time = 28;
  if (this->con_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->con_time(), target);
  }

  // optional int32 con_total = 29;
  if (this->con_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->con_total(), target);
  }

  // optional double gro_depth = 30;
  if (this->gro_depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->gro_depth(), target);
  }

  // optional int32 gro_time = 31;
  if (this->gro_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->gro_time(), target);
  }

  // optional int32 app_time = 32;
  if (this->app_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->app_time(), target);
  }

  // optional int32 cou_change = 33;
  if (this->cou_change() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->cou_change(), target);
  }

  // optional int32 cou_time = 34;
  if (this->cou_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->cou_time(), target);
  }

  // optional int64 fog_begin_time = 35;
  if (this->fog_begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(35, this->fog_begin_time(), target);
  }

  // optional int64 fog_end_time = 36;
  if (this->fog_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->fog_end_time(), target);
  }

  // optional int32 fog_time = 37;
  if (this->fog_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->fog_time(), target);
  }

  // repeated string fog_MMSI = 38;
  for (int i = 0; i < this->fog_mmsi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fog_mmsi(i).data(), this->fog_mmsi(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WaringInfo.fog_MMSI");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(38, this->fog_mmsi(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:WaringInfo)
  return target;
}

size_t WaringInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WaringInfo)
  size_t total_size = 0;

  // optional int32 enter_time = 1;
  if (this->enter_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enter_time());
  }

  // optional double enter_speed = 2;
  if (this->enter_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double enter_acceleration = 3;
  if (this->enter_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 leave_time = 4;
  if (this->leave_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leave_time());
  }

  // optional double leave_speed = 5;
  if (this->leave_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double leave_acceleration = 6;
  if (this->leave_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 inside_time = 7;
  if (this->inside_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inside_time());
  }

  // optional double inside_speed = 8;
  if (this->inside_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double inside_acceleration = 9;
  if (this->inside_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 outside_time = 10;
  if (this->outside_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->outside_time());
  }

  // optional double outside_speed = 11;
  if (this->outside_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional double outside_acceleration = 12;
  if (this->outside_acceleration() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 high_duration = 13;
  if (this->high_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->high_duration());
  }

  // optional double high_speed = 14;
  if (this->high_speed() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 low_duration = 15;
  if (this->low_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->low_duration());
  }

  // optional double low_speed = 16;
  if (this->low_speed() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 pro_duration = 17;
  if (this->pro_duration() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pro_duration());
  }

  // optional double pro_lat = 18;
  if (this->pro_lat() != 0) {
    total_size += 2 + 8;
  }

  // optional double pro_lon = 19;
  if (this->pro_lon() != 0) {
    total_size += 2 + 8;
  }

  // optional double add_max = 21;
  if (this->add_max() != 0) {
    total_size += 2 + 8;
  }

  // optional double add_min = 22;
  if (this->add_min() != 0) {
    total_size += 2 + 8;
  }

  // optional double add_duration = 23;
  if (this->add_duration() != 0) {
    total_size += 2 + 8;
  }

  // optional double col_cpa = 24;
  if (this->col_cpa() != 0) {
    total_size += 2 + 8;
  }

  // optional double col_tcpa = 25;
  if (this->col_tcpa() != 0) {
    total_size += 2 + 8;
  }

  // optional double col_dcpa = 26;
  if (this->col_dcpa() != 0) {
    total_size += 2 + 8;
  }

  // optional double col_dist = 27;
  if (this->col_dist() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 con_time = 28;
  if (this->con_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->con_time());
  }

  // optional int32 con_total = 29;
  if (this->con_total() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->con_total());
  }

  // optional double gro_depth = 30;
  if (this->gro_depth() != 0) {
    total_size += 2 + 8;
  }

  // optional int32 gro_time = 31;
  if (this->gro_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gro_time());
  }

  // optional int32 app_time = 32;
  if (this->app_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->app_time());
  }

  // optional int32 cou_change = 33;
  if (this->cou_change() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cou_change());
  }

  // optional int32 cou_time = 34;
  if (this->cou_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cou_time());
  }

  // optional int64 fog_begin_time = 35;
  if (this->fog_begin_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fog_begin_time());
  }

  // optional int64 fog_end_time = 36;
  if (this->fog_end_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->fog_end_time());
  }

  // optional int32 fog_time = 37;
  if (this->fog_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fog_time());
  }

  // repeated string anc_type = 20;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->anc_type_size());
  for (int i = 0; i < this->anc_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->anc_type(i));
  }

  // repeated string fog_MMSI = 38;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->fog_mmsi_size());
  for (int i = 0; i < this->fog_mmsi_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fog_mmsi(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaringInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WaringInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WaringInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WaringInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WaringInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WaringInfo)
    UnsafeMergeFrom(*source);
  }
}

void WaringInfo::MergeFrom(const WaringInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WaringInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void WaringInfo::UnsafeMergeFrom(const WaringInfo& from) {
  GOOGLE_DCHECK(&from != this);
  anc_type_.UnsafeMergeFrom(from.anc_type_);
  fog_mmsi_.UnsafeMergeFrom(from.fog_mmsi_);
  if (from.enter_time() != 0) {
    set_enter_time(from.enter_time());
  }
  if (from.enter_speed() != 0) {
    set_enter_speed(from.enter_speed());
  }
  if (from.enter_acceleration() != 0) {
    set_enter_acceleration(from.enter_acceleration());
  }
  if (from.leave_time() != 0) {
    set_leave_time(from.leave_time());
  }
  if (from.leave_speed() != 0) {
    set_leave_speed(from.leave_speed());
  }
  if (from.leave_acceleration() != 0) {
    set_leave_acceleration(from.leave_acceleration());
  }
  if (from.inside_time() != 0) {
    set_inside_time(from.inside_time());
  }
  if (from.inside_speed() != 0) {
    set_inside_speed(from.inside_speed());
  }
  if (from.inside_acceleration() != 0) {
    set_inside_acceleration(from.inside_acceleration());
  }
  if (from.outside_time() != 0) {
    set_outside_time(from.outside_time());
  }
  if (from.outside_speed() != 0) {
    set_outside_speed(from.outside_speed());
  }
  if (from.outside_acceleration() != 0) {
    set_outside_acceleration(from.outside_acceleration());
  }
  if (from.high_duration() != 0) {
    set_high_duration(from.high_duration());
  }
  if (from.high_speed() != 0) {
    set_high_speed(from.high_speed());
  }
  if (from.low_duration() != 0) {
    set_low_duration(from.low_duration());
  }
  if (from.low_speed() != 0) {
    set_low_speed(from.low_speed());
  }
  if (from.pro_duration() != 0) {
    set_pro_duration(from.pro_duration());
  }
  if (from.pro_lat() != 0) {
    set_pro_lat(from.pro_lat());
  }
  if (from.pro_lon() != 0) {
    set_pro_lon(from.pro_lon());
  }
  if (from.add_max() != 0) {
    set_add_max(from.add_max());
  }
  if (from.add_min() != 0) {
    set_add_min(from.add_min());
  }
  if (from.add_duration() != 0) {
    set_add_duration(from.add_duration());
  }
  if (from.col_cpa() != 0) {
    set_col_cpa(from.col_cpa());
  }
  if (from.col_tcpa() != 0) {
    set_col_tcpa(from.col_tcpa());
  }
  if (from.col_dcpa() != 0) {
    set_col_dcpa(from.col_dcpa());
  }
  if (from.col_dist() != 0) {
    set_col_dist(from.col_dist());
  }
  if (from.con_time() != 0) {
    set_con_time(from.con_time());
  }
  if (from.con_total() != 0) {
    set_con_total(from.con_total());
  }
  if (from.gro_depth() != 0) {
    set_gro_depth(from.gro_depth());
  }
  if (from.gro_time() != 0) {
    set_gro_time(from.gro_time());
  }
  if (from.app_time() != 0) {
    set_app_time(from.app_time());
  }
  if (from.cou_change() != 0) {
    set_cou_change(from.cou_change());
  }
  if (from.cou_time() != 0) {
    set_cou_time(from.cou_time());
  }
  if (from.fog_begin_time() != 0) {
    set_fog_begin_time(from.fog_begin_time());
  }
  if (from.fog_end_time() != 0) {
    set_fog_end_time(from.fog_end_time());
  }
  if (from.fog_time() != 0) {
    set_fog_time(from.fog_time());
  }
}

void WaringInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WaringInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaringInfo::CopyFrom(const WaringInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WaringInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool WaringInfo::IsInitialized() const {

  return true;
}

void WaringInfo::Swap(WaringInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WaringInfo::InternalSwap(WaringInfo* other) {
  std::swap(enter_time_, other->enter_time_);
  std::swap(enter_speed_, other->enter_speed_);
  std::swap(enter_acceleration_, other->enter_acceleration_);
  std::swap(leave_time_, other->leave_time_);
  std::swap(leave_speed_, other->leave_speed_);
  std::swap(leave_acceleration_, other->leave_acceleration_);
  std::swap(inside_time_, other->inside_time_);
  std::swap(inside_speed_, other->inside_speed_);
  std::swap(inside_acceleration_, other->inside_acceleration_);
  std::swap(outside_time_, other->outside_time_);
  std::swap(outside_speed_, other->outside_speed_);
  std::swap(outside_acceleration_, other->outside_acceleration_);
  std::swap(high_duration_, other->high_duration_);
  std::swap(high_speed_, other->high_speed_);
  std::swap(low_duration_, other->low_duration_);
  std::swap(low_speed_, other->low_speed_);
  std::swap(pro_duration_, other->pro_duration_);
  std::swap(pro_lat_, other->pro_lat_);
  std::swap(pro_lon_, other->pro_lon_);
  anc_type_.UnsafeArenaSwap(&other->anc_type_);
  std::swap(add_max_, other->add_max_);
  std::swap(add_min_, other->add_min_);
  std::swap(add_duration_, other->add_duration_);
  std::swap(col_cpa_, other->col_cpa_);
  std::swap(col_tcpa_, other->col_tcpa_);
  std::swap(col_dcpa_, other->col_dcpa_);
  std::swap(col_dist_, other->col_dist_);
  std::swap(con_time_, other->con_time_);
  std::swap(con_total_, other->con_total_);
  std::swap(gro_depth_, other->gro_depth_);
  std::swap(gro_time_, other->gro_time_);
  std::swap(app_time_, other->app_time_);
  std::swap(cou_change_, other->cou_change_);
  std::swap(cou_time_, other->cou_time_);
  std::swap(fog_begin_time_, other->fog_begin_time_);
  std::swap(fog_end_time_, other->fog_end_time_);
  std::swap(fog_time_, other->fog_time_);
  fog_mmsi_.UnsafeArenaSwap(&other->fog_mmsi_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WaringInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaringInfo_descriptor_;
  metadata.reflection = WaringInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WaringInfo

// optional int32 enter_time = 1;
void WaringInfo::clear_enter_time() {
  enter_time_ = 0;
}
::google::protobuf::int32 WaringInfo::enter_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.enter_time)
  return enter_time_;
}
void WaringInfo::set_enter_time(::google::protobuf::int32 value) {
  
  enter_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.enter_time)
}

// optional double enter_speed = 2;
void WaringInfo::clear_enter_speed() {
  enter_speed_ = 0;
}
double WaringInfo::enter_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.enter_speed)
  return enter_speed_;
}
void WaringInfo::set_enter_speed(double value) {
  
  enter_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.enter_speed)
}

// optional double enter_acceleration = 3;
void WaringInfo::clear_enter_acceleration() {
  enter_acceleration_ = 0;
}
double WaringInfo::enter_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.enter_acceleration)
  return enter_acceleration_;
}
void WaringInfo::set_enter_acceleration(double value) {
  
  enter_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.enter_acceleration)
}

// optional int32 leave_time = 4;
void WaringInfo::clear_leave_time() {
  leave_time_ = 0;
}
::google::protobuf::int32 WaringInfo::leave_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.leave_time)
  return leave_time_;
}
void WaringInfo::set_leave_time(::google::protobuf::int32 value) {
  
  leave_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.leave_time)
}

// optional double leave_speed = 5;
void WaringInfo::clear_leave_speed() {
  leave_speed_ = 0;
}
double WaringInfo::leave_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.leave_speed)
  return leave_speed_;
}
void WaringInfo::set_leave_speed(double value) {
  
  leave_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.leave_speed)
}

// optional double leave_acceleration = 6;
void WaringInfo::clear_leave_acceleration() {
  leave_acceleration_ = 0;
}
double WaringInfo::leave_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.leave_acceleration)
  return leave_acceleration_;
}
void WaringInfo::set_leave_acceleration(double value) {
  
  leave_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.leave_acceleration)
}

// optional int32 inside_time = 7;
void WaringInfo::clear_inside_time() {
  inside_time_ = 0;
}
::google::protobuf::int32 WaringInfo::inside_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.inside_time)
  return inside_time_;
}
void WaringInfo::set_inside_time(::google::protobuf::int32 value) {
  
  inside_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.inside_time)
}

// optional double inside_speed = 8;
void WaringInfo::clear_inside_speed() {
  inside_speed_ = 0;
}
double WaringInfo::inside_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.inside_speed)
  return inside_speed_;
}
void WaringInfo::set_inside_speed(double value) {
  
  inside_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.inside_speed)
}

// optional double inside_acceleration = 9;
void WaringInfo::clear_inside_acceleration() {
  inside_acceleration_ = 0;
}
double WaringInfo::inside_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.inside_acceleration)
  return inside_acceleration_;
}
void WaringInfo::set_inside_acceleration(double value) {
  
  inside_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.inside_acceleration)
}

// optional int32 outside_time = 10;
void WaringInfo::clear_outside_time() {
  outside_time_ = 0;
}
::google::protobuf::int32 WaringInfo::outside_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.outside_time)
  return outside_time_;
}
void WaringInfo::set_outside_time(::google::protobuf::int32 value) {
  
  outside_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.outside_time)
}

// optional double outside_speed = 11;
void WaringInfo::clear_outside_speed() {
  outside_speed_ = 0;
}
double WaringInfo::outside_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.outside_speed)
  return outside_speed_;
}
void WaringInfo::set_outside_speed(double value) {
  
  outside_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.outside_speed)
}

// optional double outside_acceleration = 12;
void WaringInfo::clear_outside_acceleration() {
  outside_acceleration_ = 0;
}
double WaringInfo::outside_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.outside_acceleration)
  return outside_acceleration_;
}
void WaringInfo::set_outside_acceleration(double value) {
  
  outside_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.outside_acceleration)
}

// optional int32 high_duration = 13;
void WaringInfo::clear_high_duration() {
  high_duration_ = 0;
}
::google::protobuf::int32 WaringInfo::high_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.high_duration)
  return high_duration_;
}
void WaringInfo::set_high_duration(::google::protobuf::int32 value) {
  
  high_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.high_duration)
}

// optional double high_speed = 14;
void WaringInfo::clear_high_speed() {
  high_speed_ = 0;
}
double WaringInfo::high_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.high_speed)
  return high_speed_;
}
void WaringInfo::set_high_speed(double value) {
  
  high_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.high_speed)
}

// optional int32 low_duration = 15;
void WaringInfo::clear_low_duration() {
  low_duration_ = 0;
}
::google::protobuf::int32 WaringInfo::low_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.low_duration)
  return low_duration_;
}
void WaringInfo::set_low_duration(::google::protobuf::int32 value) {
  
  low_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.low_duration)
}

// optional double low_speed = 16;
void WaringInfo::clear_low_speed() {
  low_speed_ = 0;
}
double WaringInfo::low_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.low_speed)
  return low_speed_;
}
void WaringInfo::set_low_speed(double value) {
  
  low_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.low_speed)
}

// optional int32 pro_duration = 17;
void WaringInfo::clear_pro_duration() {
  pro_duration_ = 0;
}
::google::protobuf::int32 WaringInfo::pro_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.pro_duration)
  return pro_duration_;
}
void WaringInfo::set_pro_duration(::google::protobuf::int32 value) {
  
  pro_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.pro_duration)
}

// optional double pro_lat = 18;
void WaringInfo::clear_pro_lat() {
  pro_lat_ = 0;
}
double WaringInfo::pro_lat() const {
  // @@protoc_insertion_point(field_get:WaringInfo.pro_lat)
  return pro_lat_;
}
void WaringInfo::set_pro_lat(double value) {
  
  pro_lat_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.pro_lat)
}

// optional double pro_lon = 19;
void WaringInfo::clear_pro_lon() {
  pro_lon_ = 0;
}
double WaringInfo::pro_lon() const {
  // @@protoc_insertion_point(field_get:WaringInfo.pro_lon)
  return pro_lon_;
}
void WaringInfo::set_pro_lon(double value) {
  
  pro_lon_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.pro_lon)
}

// repeated string anc_type = 20;
int WaringInfo::anc_type_size() const {
  return anc_type_.size();
}
void WaringInfo::clear_anc_type() {
  anc_type_.Clear();
}
const ::std::string& WaringInfo::anc_type(int index) const {
  // @@protoc_insertion_point(field_get:WaringInfo.anc_type)
  return anc_type_.Get(index);
}
::std::string* WaringInfo::mutable_anc_type(int index) {
  // @@protoc_insertion_point(field_mutable:WaringInfo.anc_type)
  return anc_type_.Mutable(index);
}
void WaringInfo::set_anc_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WaringInfo.anc_type)
  anc_type_.Mutable(index)->assign(value);
}
void WaringInfo::set_anc_type(int index, const char* value) {
  anc_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WaringInfo.anc_type)
}
void WaringInfo::set_anc_type(int index, const char* value, size_t size) {
  anc_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WaringInfo.anc_type)
}
::std::string* WaringInfo::add_anc_type() {
  // @@protoc_insertion_point(field_add_mutable:WaringInfo.anc_type)
  return anc_type_.Add();
}
void WaringInfo::add_anc_type(const ::std::string& value) {
  anc_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WaringInfo.anc_type)
}
void WaringInfo::add_anc_type(const char* value) {
  anc_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WaringInfo.anc_type)
}
void WaringInfo::add_anc_type(const char* value, size_t size) {
  anc_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WaringInfo.anc_type)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
WaringInfo::anc_type() const {
  // @@protoc_insertion_point(field_list:WaringInfo.anc_type)
  return anc_type_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
WaringInfo::mutable_anc_type() {
  // @@protoc_insertion_point(field_mutable_list:WaringInfo.anc_type)
  return &anc_type_;
}

// optional double add_max = 21;
void WaringInfo::clear_add_max() {
  add_max_ = 0;
}
double WaringInfo::add_max() const {
  // @@protoc_insertion_point(field_get:WaringInfo.add_max)
  return add_max_;
}
void WaringInfo::set_add_max(double value) {
  
  add_max_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.add_max)
}

// optional double add_min = 22;
void WaringInfo::clear_add_min() {
  add_min_ = 0;
}
double WaringInfo::add_min() const {
  // @@protoc_insertion_point(field_get:WaringInfo.add_min)
  return add_min_;
}
void WaringInfo::set_add_min(double value) {
  
  add_min_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.add_min)
}

// optional double add_duration = 23;
void WaringInfo::clear_add_duration() {
  add_duration_ = 0;
}
double WaringInfo::add_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.add_duration)
  return add_duration_;
}
void WaringInfo::set_add_duration(double value) {
  
  add_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.add_duration)
}

// optional double col_cpa = 24;
void WaringInfo::clear_col_cpa() {
  col_cpa_ = 0;
}
double WaringInfo::col_cpa() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_cpa)
  return col_cpa_;
}
void WaringInfo::set_col_cpa(double value) {
  
  col_cpa_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_cpa)
}

// optional double col_tcpa = 25;
void WaringInfo::clear_col_tcpa() {
  col_tcpa_ = 0;
}
double WaringInfo::col_tcpa() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_tcpa)
  return col_tcpa_;
}
void WaringInfo::set_col_tcpa(double value) {
  
  col_tcpa_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_tcpa)
}

// optional double col_dcpa = 26;
void WaringInfo::clear_col_dcpa() {
  col_dcpa_ = 0;
}
double WaringInfo::col_dcpa() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_dcpa)
  return col_dcpa_;
}
void WaringInfo::set_col_dcpa(double value) {
  
  col_dcpa_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_dcpa)
}

// optional double col_dist = 27;
void WaringInfo::clear_col_dist() {
  col_dist_ = 0;
}
double WaringInfo::col_dist() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_dist)
  return col_dist_;
}
void WaringInfo::set_col_dist(double value) {
  
  col_dist_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_dist)
}

// optional int32 con_time = 28;
void WaringInfo::clear_con_time() {
  con_time_ = 0;
}
::google::protobuf::int32 WaringInfo::con_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.con_time)
  return con_time_;
}
void WaringInfo::set_con_time(::google::protobuf::int32 value) {
  
  con_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.con_time)
}

// optional int32 con_total = 29;
void WaringInfo::clear_con_total() {
  con_total_ = 0;
}
::google::protobuf::int32 WaringInfo::con_total() const {
  // @@protoc_insertion_point(field_get:WaringInfo.con_total)
  return con_total_;
}
void WaringInfo::set_con_total(::google::protobuf::int32 value) {
  
  con_total_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.con_total)
}

// optional double gro_depth = 30;
void WaringInfo::clear_gro_depth() {
  gro_depth_ = 0;
}
double WaringInfo::gro_depth() const {
  // @@protoc_insertion_point(field_get:WaringInfo.gro_depth)
  return gro_depth_;
}
void WaringInfo::set_gro_depth(double value) {
  
  gro_depth_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.gro_depth)
}

// optional int32 gro_time = 31;
void WaringInfo::clear_gro_time() {
  gro_time_ = 0;
}
::google::protobuf::int32 WaringInfo::gro_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.gro_time)
  return gro_time_;
}
void WaringInfo::set_gro_time(::google::protobuf::int32 value) {
  
  gro_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.gro_time)
}

// optional int32 app_time = 32;
void WaringInfo::clear_app_time() {
  app_time_ = 0;
}
::google::protobuf::int32 WaringInfo::app_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.app_time)
  return app_time_;
}
void WaringInfo::set_app_time(::google::protobuf::int32 value) {
  
  app_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.app_time)
}

// optional int32 cou_change = 33;
void WaringInfo::clear_cou_change() {
  cou_change_ = 0;
}
::google::protobuf::int32 WaringInfo::cou_change() const {
  // @@protoc_insertion_point(field_get:WaringInfo.cou_change)
  return cou_change_;
}
void WaringInfo::set_cou_change(::google::protobuf::int32 value) {
  
  cou_change_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.cou_change)
}

// optional int32 cou_time = 34;
void WaringInfo::clear_cou_time() {
  cou_time_ = 0;
}
::google::protobuf::int32 WaringInfo::cou_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.cou_time)
  return cou_time_;
}
void WaringInfo::set_cou_time(::google::protobuf::int32 value) {
  
  cou_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.cou_time)
}

// optional int64 fog_begin_time = 35;
void WaringInfo::clear_fog_begin_time() {
  fog_begin_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WaringInfo::fog_begin_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_begin_time)
  return fog_begin_time_;
}
void WaringInfo::set_fog_begin_time(::google::protobuf::int64 value) {
  
  fog_begin_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.fog_begin_time)
}

// optional int64 fog_end_time = 36;
void WaringInfo::clear_fog_end_time() {
  fog_end_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 WaringInfo::fog_end_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_end_time)
  return fog_end_time_;
}
void WaringInfo::set_fog_end_time(::google::protobuf::int64 value) {
  
  fog_end_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.fog_end_time)
}

// optional int32 fog_time = 37;
void WaringInfo::clear_fog_time() {
  fog_time_ = 0;
}
::google::protobuf::int32 WaringInfo::fog_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_time)
  return fog_time_;
}
void WaringInfo::set_fog_time(::google::protobuf::int32 value) {
  
  fog_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.fog_time)
}

// repeated string fog_MMSI = 38;
int WaringInfo::fog_mmsi_size() const {
  return fog_mmsi_.size();
}
void WaringInfo::clear_fog_mmsi() {
  fog_mmsi_.Clear();
}
const ::std::string& WaringInfo::fog_mmsi(int index) const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_MMSI)
  return fog_mmsi_.Get(index);
}
::std::string* WaringInfo::mutable_fog_mmsi(int index) {
  // @@protoc_insertion_point(field_mutable:WaringInfo.fog_MMSI)
  return fog_mmsi_.Mutable(index);
}
void WaringInfo::set_fog_mmsi(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WaringInfo.fog_MMSI)
  fog_mmsi_.Mutable(index)->assign(value);
}
void WaringInfo::set_fog_mmsi(int index, const char* value) {
  fog_mmsi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WaringInfo.fog_MMSI)
}
void WaringInfo::set_fog_mmsi(int index, const char* value, size_t size) {
  fog_mmsi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WaringInfo.fog_MMSI)
}
::std::string* WaringInfo::add_fog_mmsi() {
  // @@protoc_insertion_point(field_add_mutable:WaringInfo.fog_MMSI)
  return fog_mmsi_.Add();
}
void WaringInfo::add_fog_mmsi(const ::std::string& value) {
  fog_mmsi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WaringInfo.fog_MMSI)
}
void WaringInfo::add_fog_mmsi(const char* value) {
  fog_mmsi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WaringInfo.fog_MMSI)
}
void WaringInfo::add_fog_mmsi(const char* value, size_t size) {
  fog_mmsi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WaringInfo.fog_MMSI)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
WaringInfo::fog_mmsi() const {
  // @@protoc_insertion_point(field_list:WaringInfo.fog_MMSI)
  return fog_mmsi_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
WaringInfo::mutable_fog_mmsi() {
  // @@protoc_insertion_point(field_mutable_list:WaringInfo.fog_MMSI)
  return &fog_mmsi_;
}

inline const WaringInfo* WaringInfo::internal_default_instance() {
  return &WaringInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
