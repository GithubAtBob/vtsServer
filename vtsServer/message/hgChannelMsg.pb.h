// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgChannelMsg.proto

#ifndef PROTOBUF_hgChannelMsg_2eproto__INCLUDED
#define PROTOBUF_hgChannelMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgChannelMsg_2eproto();
void protobuf_InitDefaults_hgChannelMsg_2eproto();
void protobuf_AssignDesc_hgChannelMsg_2eproto();
void protobuf_ShutdownFile_hgChannelMsg_2eproto();

class hgChannelMsg;
class hgChannelPont;
class hgSimChannel;

// ===================================================================

class hgChannelPont : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgChannelPont) */ {
 public:
  hgChannelPont();
  virtual ~hgChannelPont();

  hgChannelPont(const hgChannelPont& from);

  inline hgChannelPont& operator=(const hgChannelPont& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgChannelPont& default_instance();

  static const hgChannelPont* internal_default_instance();

  void Swap(hgChannelPont* other);

  // implements Message ----------------------------------------------

  inline hgChannelPont* New() const { return New(NULL); }

  hgChannelPont* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgChannelPont& from);
  void MergeFrom(const hgChannelPont& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgChannelPont* other);
  void UnsafeMergeFrom(const hgChannelPont& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double Lat = 1;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // optional double Lon = 2;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:hgChannelPont)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double lat_;
  double lon_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgChannelMsg_2eproto_impl();
  friend void  protobuf_AddDesc_hgChannelMsg_2eproto_impl();
  friend void protobuf_AssignDesc_hgChannelMsg_2eproto();
  friend void protobuf_ShutdownFile_hgChannelMsg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgChannelPont> hgChannelPont_default_instance_;

// -------------------------------------------------------------------

class hgSimChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgSimChannel) */ {
 public:
  hgSimChannel();
  virtual ~hgSimChannel();

  hgSimChannel(const hgSimChannel& from);

  inline hgSimChannel& operator=(const hgSimChannel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgSimChannel& default_instance();

  static const hgSimChannel* internal_default_instance();

  void Swap(hgSimChannel* other);

  // implements Message ----------------------------------------------

  inline hgSimChannel* New() const { return New(NULL); }

  hgSimChannel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgSimChannel& from);
  void MergeFrom(const hgSimChannel& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgSimChannel* other);
  void UnsafeMergeFrom(const hgSimChannel& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double LeftBeginLat = 1;
  void clear_leftbeginlat();
  static const int kLeftBeginLatFieldNumber = 1;
  double leftbeginlat() const;
  void set_leftbeginlat(double value);

  // optional double LeftEndLat = 2;
  void clear_leftendlat();
  static const int kLeftEndLatFieldNumber = 2;
  double leftendlat() const;
  void set_leftendlat(double value);

  // optional double MidBeginLat = 3;
  void clear_midbeginlat();
  static const int kMidBeginLatFieldNumber = 3;
  double midbeginlat() const;
  void set_midbeginlat(double value);

  // optional double MidEndLat = 4;
  void clear_midendlat();
  static const int kMidEndLatFieldNumber = 4;
  double midendlat() const;
  void set_midendlat(double value);

  // optional double RightBeginLat = 5;
  void clear_rightbeginlat();
  static const int kRightBeginLatFieldNumber = 5;
  double rightbeginlat() const;
  void set_rightbeginlat(double value);

  // optional double RightEndLat = 6;
  void clear_rightendlat();
  static const int kRightEndLatFieldNumber = 6;
  double rightendlat() const;
  void set_rightendlat(double value);

  // optional double LeftBeginLon = 7;
  void clear_leftbeginlon();
  static const int kLeftBeginLonFieldNumber = 7;
  double leftbeginlon() const;
  void set_leftbeginlon(double value);

  // optional double LeftEndLon = 8;
  void clear_leftendlon();
  static const int kLeftEndLonFieldNumber = 8;
  double leftendlon() const;
  void set_leftendlon(double value);

  // optional double MidBeginLon = 9;
  void clear_midbeginlon();
  static const int kMidBeginLonFieldNumber = 9;
  double midbeginlon() const;
  void set_midbeginlon(double value);

  // optional double MidEndLon = 10;
  void clear_midendlon();
  static const int kMidEndLonFieldNumber = 10;
  double midendlon() const;
  void set_midendlon(double value);

  // optional double RightBeginLon = 11;
  void clear_rightbeginlon();
  static const int kRightBeginLonFieldNumber = 11;
  double rightbeginlon() const;
  void set_rightbeginlon(double value);

  // optional double RightEndLon = 12;
  void clear_rightendlon();
  static const int kRightEndLonFieldNumber = 12;
  double rightendlon() const;
  void set_rightendlon(double value);

  // optional double Length = 13;
  void clear_length();
  static const int kLengthFieldNumber = 13;
  double length() const;
  void set_length(double value);

  // optional double WidthBegin = 14;
  void clear_widthbegin();
  static const int kWidthBeginFieldNumber = 14;
  double widthbegin() const;
  void set_widthbegin(double value);

  // optional double WidthEnd = 15;
  void clear_widthend();
  static const int kWidthEndFieldNumber = 15;
  double widthend() const;
  void set_widthend(double value);

  // optional double AllLength = 16;
  void clear_alllength();
  static const int kAllLengthFieldNumber = 16;
  double alllength() const;
  void set_alllength(double value);

  // optional double Angle = 17;
  void clear_angle();
  static const int kAngleFieldNumber = 17;
  double angle() const;
  void set_angle(double value);

  // @@protoc_insertion_point(class_scope:hgSimChannel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double leftbeginlat_;
  double leftendlat_;
  double midbeginlat_;
  double midendlat_;
  double rightbeginlat_;
  double rightendlat_;
  double leftbeginlon_;
  double leftendlon_;
  double midbeginlon_;
  double midendlon_;
  double rightbeginlon_;
  double rightendlon_;
  double length_;
  double widthbegin_;
  double widthend_;
  double alllength_;
  double angle_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgChannelMsg_2eproto_impl();
  friend void  protobuf_AddDesc_hgChannelMsg_2eproto_impl();
  friend void protobuf_AssignDesc_hgChannelMsg_2eproto();
  friend void protobuf_ShutdownFile_hgChannelMsg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgSimChannel> hgSimChannel_default_instance_;

// -------------------------------------------------------------------

class hgChannelMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgChannelMsg) */ {
 public:
  hgChannelMsg();
  virtual ~hgChannelMsg();

  hgChannelMsg(const hgChannelMsg& from);

  inline hgChannelMsg& operator=(const hgChannelMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgChannelMsg& default_instance();

  static const hgChannelMsg* internal_default_instance();

  void Swap(hgChannelMsg* other);

  // implements Message ----------------------------------------------

  inline hgChannelMsg* New() const { return New(NULL); }

  hgChannelMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgChannelMsg& from);
  void MergeFrom(const hgChannelMsg& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgChannelMsg* other);
  void UnsafeMergeFrom(const hgChannelMsg& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hgSimChannel Channel = 1;
  int channel_size() const;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  const ::hgSimChannel& channel(int index) const;
  ::hgSimChannel* mutable_channel(int index);
  ::hgSimChannel* add_channel();
  ::google::protobuf::RepeatedPtrField< ::hgSimChannel >*
      mutable_channel();
  const ::google::protobuf::RepeatedPtrField< ::hgSimChannel >&
      channel() const;

  // @@protoc_insertion_point(class_scope:hgChannelMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::hgSimChannel > channel_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgChannelMsg_2eproto_impl();
  friend void  protobuf_AddDesc_hgChannelMsg_2eproto_impl();
  friend void protobuf_AssignDesc_hgChannelMsg_2eproto();
  friend void protobuf_ShutdownFile_hgChannelMsg_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgChannelMsg> hgChannelMsg_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgChannelPont

// optional double Lat = 1;
inline void hgChannelPont::clear_lat() {
  lat_ = 0;
}
inline double hgChannelPont::lat() const {
  // @@protoc_insertion_point(field_get:hgChannelPont.Lat)
  return lat_;
}
inline void hgChannelPont::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgChannelPont.Lat)
}

// optional double Lon = 2;
inline void hgChannelPont::clear_lon() {
  lon_ = 0;
}
inline double hgChannelPont::lon() const {
  // @@protoc_insertion_point(field_get:hgChannelPont.Lon)
  return lon_;
}
inline void hgChannelPont::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgChannelPont.Lon)
}

inline const hgChannelPont* hgChannelPont::internal_default_instance() {
  return &hgChannelPont_default_instance_.get();
}
// -------------------------------------------------------------------

// hgSimChannel

// optional double LeftBeginLat = 1;
inline void hgSimChannel::clear_leftbeginlat() {
  leftbeginlat_ = 0;
}
inline double hgSimChannel::leftbeginlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftBeginLat)
  return leftbeginlat_;
}
inline void hgSimChannel::set_leftbeginlat(double value) {
  
  leftbeginlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftBeginLat)
}

// optional double LeftEndLat = 2;
inline void hgSimChannel::clear_leftendlat() {
  leftendlat_ = 0;
}
inline double hgSimChannel::leftendlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftEndLat)
  return leftendlat_;
}
inline void hgSimChannel::set_leftendlat(double value) {
  
  leftendlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftEndLat)
}

// optional double MidBeginLat = 3;
inline void hgSimChannel::clear_midbeginlat() {
  midbeginlat_ = 0;
}
inline double hgSimChannel::midbeginlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidBeginLat)
  return midbeginlat_;
}
inline void hgSimChannel::set_midbeginlat(double value) {
  
  midbeginlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidBeginLat)
}

// optional double MidEndLat = 4;
inline void hgSimChannel::clear_midendlat() {
  midendlat_ = 0;
}
inline double hgSimChannel::midendlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidEndLat)
  return midendlat_;
}
inline void hgSimChannel::set_midendlat(double value) {
  
  midendlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidEndLat)
}

// optional double RightBeginLat = 5;
inline void hgSimChannel::clear_rightbeginlat() {
  rightbeginlat_ = 0;
}
inline double hgSimChannel::rightbeginlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightBeginLat)
  return rightbeginlat_;
}
inline void hgSimChannel::set_rightbeginlat(double value) {
  
  rightbeginlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightBeginLat)
}

// optional double RightEndLat = 6;
inline void hgSimChannel::clear_rightendlat() {
  rightendlat_ = 0;
}
inline double hgSimChannel::rightendlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightEndLat)
  return rightendlat_;
}
inline void hgSimChannel::set_rightendlat(double value) {
  
  rightendlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightEndLat)
}

// optional double LeftBeginLon = 7;
inline void hgSimChannel::clear_leftbeginlon() {
  leftbeginlon_ = 0;
}
inline double hgSimChannel::leftbeginlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftBeginLon)
  return leftbeginlon_;
}
inline void hgSimChannel::set_leftbeginlon(double value) {
  
  leftbeginlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftBeginLon)
}

// optional double LeftEndLon = 8;
inline void hgSimChannel::clear_leftendlon() {
  leftendlon_ = 0;
}
inline double hgSimChannel::leftendlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftEndLon)
  return leftendlon_;
}
inline void hgSimChannel::set_leftendlon(double value) {
  
  leftendlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftEndLon)
}

// optional double MidBeginLon = 9;
inline void hgSimChannel::clear_midbeginlon() {
  midbeginlon_ = 0;
}
inline double hgSimChannel::midbeginlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidBeginLon)
  return midbeginlon_;
}
inline void hgSimChannel::set_midbeginlon(double value) {
  
  midbeginlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidBeginLon)
}

// optional double MidEndLon = 10;
inline void hgSimChannel::clear_midendlon() {
  midendlon_ = 0;
}
inline double hgSimChannel::midendlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidEndLon)
  return midendlon_;
}
inline void hgSimChannel::set_midendlon(double value) {
  
  midendlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidEndLon)
}

// optional double RightBeginLon = 11;
inline void hgSimChannel::clear_rightbeginlon() {
  rightbeginlon_ = 0;
}
inline double hgSimChannel::rightbeginlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightBeginLon)
  return rightbeginlon_;
}
inline void hgSimChannel::set_rightbeginlon(double value) {
  
  rightbeginlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightBeginLon)
}

// optional double RightEndLon = 12;
inline void hgSimChannel::clear_rightendlon() {
  rightendlon_ = 0;
}
inline double hgSimChannel::rightendlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightEndLon)
  return rightendlon_;
}
inline void hgSimChannel::set_rightendlon(double value) {
  
  rightendlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightEndLon)
}

// optional double Length = 13;
inline void hgSimChannel::clear_length() {
  length_ = 0;
}
inline double hgSimChannel::length() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.Length)
  return length_;
}
inline void hgSimChannel::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.Length)
}

// optional double WidthBegin = 14;
inline void hgSimChannel::clear_widthbegin() {
  widthbegin_ = 0;
}
inline double hgSimChannel::widthbegin() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.WidthBegin)
  return widthbegin_;
}
inline void hgSimChannel::set_widthbegin(double value) {
  
  widthbegin_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.WidthBegin)
}

// optional double WidthEnd = 15;
inline void hgSimChannel::clear_widthend() {
  widthend_ = 0;
}
inline double hgSimChannel::widthend() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.WidthEnd)
  return widthend_;
}
inline void hgSimChannel::set_widthend(double value) {
  
  widthend_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.WidthEnd)
}

// optional double AllLength = 16;
inline void hgSimChannel::clear_alllength() {
  alllength_ = 0;
}
inline double hgSimChannel::alllength() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.AllLength)
  return alllength_;
}
inline void hgSimChannel::set_alllength(double value) {
  
  alllength_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.AllLength)
}

// optional double Angle = 17;
inline void hgSimChannel::clear_angle() {
  angle_ = 0;
}
inline double hgSimChannel::angle() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.Angle)
  return angle_;
}
inline void hgSimChannel::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.Angle)
}

inline const hgSimChannel* hgSimChannel::internal_default_instance() {
  return &hgSimChannel_default_instance_.get();
}
// -------------------------------------------------------------------

// hgChannelMsg

// repeated .hgSimChannel Channel = 1;
inline int hgChannelMsg::channel_size() const {
  return channel_.size();
}
inline void hgChannelMsg::clear_channel() {
  channel_.Clear();
}
inline const ::hgSimChannel& hgChannelMsg::channel(int index) const {
  // @@protoc_insertion_point(field_get:hgChannelMsg.Channel)
  return channel_.Get(index);
}
inline ::hgSimChannel* hgChannelMsg::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:hgChannelMsg.Channel)
  return channel_.Mutable(index);
}
inline ::hgSimChannel* hgChannelMsg::add_channel() {
  // @@protoc_insertion_point(field_add:hgChannelMsg.Channel)
  return channel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::hgSimChannel >*
hgChannelMsg::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:hgChannelMsg.Channel)
  return &channel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::hgSimChannel >&
hgChannelMsg::channel() const {
  // @@protoc_insertion_point(field_list:hgChannelMsg.Channel)
  return channel_;
}

inline const hgChannelMsg* hgChannelMsg::internal_default_instance() {
  return &hgChannelMsg_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgChannelMsg_2eproto__INCLUDED
