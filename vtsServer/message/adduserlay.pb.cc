// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adduserlay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "adduserlay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AddUserLay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddUserLay_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_adduserlay_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_adduserlay_2eproto() {
  protobuf_AddDesc_adduserlay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "adduserlay.proto");
  GOOGLE_CHECK(file != NULL);
  AddUserLay_descriptor_ = file->message_type(0);
  static const int AddUserLay_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserLay, drawman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserLay, pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserLay, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserLay, type_),
  };
  AddUserLay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddUserLay_descriptor_,
      AddUserLay::internal_default_instance(),
      AddUserLay_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddUserLay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserLay, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_adduserlay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddUserLay_descriptor_, AddUserLay::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_adduserlay_2eproto() {
  AddUserLay_default_instance_.Shutdown();
  delete AddUserLay_reflection_;
}

void protobuf_InitDefaults_adduserlay_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AddUserLay_default_instance_.DefaultConstruct();
  AddUserLay_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_adduserlay_2eproto_once_);
void protobuf_InitDefaults_adduserlay_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_adduserlay_2eproto_once_,
                 &protobuf_InitDefaults_adduserlay_2eproto_impl);
}
void protobuf_AddDesc_adduserlay_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_adduserlay_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020adduserlay.proto\"D\n\nAddUserLay\022\017\n\007draw"
    "man\030\001 \001(\t\022\013\n\003pic\030\002 \001(\t\022\n\n\002ID\030\003 \001(\t\022\014\n\004ty"
    "pe\030\004 \001(\tb\006proto3", 96);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "adduserlay.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_adduserlay_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_adduserlay_2eproto_once_);
void protobuf_AddDesc_adduserlay_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_adduserlay_2eproto_once_,
                 &protobuf_AddDesc_adduserlay_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_adduserlay_2eproto {
  StaticDescriptorInitializer_adduserlay_2eproto() {
    protobuf_AddDesc_adduserlay_2eproto();
  }
} static_descriptor_initializer_adduserlay_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddUserLay::kDrawmanFieldNumber;
const int AddUserLay::kPicFieldNumber;
const int AddUserLay::kIDFieldNumber;
const int AddUserLay::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddUserLay::AddUserLay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_adduserlay_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddUserLay)
}

void AddUserLay::InitAsDefaultInstance() {
}

AddUserLay::AddUserLay(const AddUserLay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AddUserLay)
}

void AddUserLay::SharedCtor() {
  drawman_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AddUserLay::~AddUserLay() {
  // @@protoc_insertion_point(destructor:AddUserLay)
  SharedDtor();
}

void AddUserLay::SharedDtor() {
  drawman_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddUserLay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddUserLay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddUserLay_descriptor_;
}

const AddUserLay& AddUserLay::default_instance() {
  protobuf_InitDefaults_adduserlay_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddUserLay> AddUserLay_default_instance_;

AddUserLay* AddUserLay::New(::google::protobuf::Arena* arena) const {
  AddUserLay* n = new AddUserLay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddUserLay::Clear() {
// @@protoc_insertion_point(message_clear_start:AddUserLay)
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddUserLay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddUserLay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string drawman = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawman()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drawman().data(), this->drawman().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AddUserLay.drawman"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pic;
        break;
      }

      // optional string pic = 2;
      case 2: {
        if (tag == 18) {
         parse_pic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pic().data(), this->pic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AddUserLay.pic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ID;
        break;
      }

      // optional string ID = 3;
      case 3: {
        if (tag == 26) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AddUserLay.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // optional string type = 4;
      case 4: {
        if (tag == 34) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AddUserLay.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddUserLay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddUserLay)
  return false;
#undef DO_
}

void AddUserLay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddUserLay)
  // optional string drawman = 1;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.drawman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->drawman(), output);
  }

  // optional string pic = 2;
  if (this->pic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.pic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pic(), output);
  }

  // optional string ID = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // optional string type = 4;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:AddUserLay)
}

::google::protobuf::uint8* AddUserLay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AddUserLay)
  // optional string drawman = 1;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.drawman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->drawman(), target);
  }

  // optional string pic = 2;
  if (this->pic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pic().data(), this->pic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.pic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pic(), target);
  }

  // optional string ID = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // optional string type = 4;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AddUserLay.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AddUserLay)
  return target;
}

size_t AddUserLay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddUserLay)
  size_t total_size = 0;

  // optional string drawman = 1;
  if (this->drawman().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drawman());
  }

  // optional string pic = 2;
  if (this->pic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pic());
  }

  // optional string ID = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string type = 4;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddUserLay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddUserLay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddUserLay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddUserLay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddUserLay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddUserLay)
    UnsafeMergeFrom(*source);
  }
}

void AddUserLay::MergeFrom(const AddUserLay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddUserLay)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddUserLay::UnsafeMergeFrom(const AddUserLay& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.drawman().size() > 0) {

    drawman_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drawman_);
  }
  if (from.pic().size() > 0) {

    pic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pic_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void AddUserLay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddUserLay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddUserLay::CopyFrom(const AddUserLay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddUserLay)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddUserLay::IsInitialized() const {

  return true;
}

void AddUserLay::Swap(AddUserLay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddUserLay::InternalSwap(AddUserLay* other) {
  drawman_.Swap(&other->drawman_);
  pic_.Swap(&other->pic_);
  id_.Swap(&other->id_);
  type_.Swap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddUserLay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddUserLay_descriptor_;
  metadata.reflection = AddUserLay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddUserLay

// optional string drawman = 1;
void AddUserLay::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddUserLay::drawman() const {
  // @@protoc_insertion_point(field_get:AddUserLay.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserLay.drawman)
}
void AddUserLay::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserLay.drawman)
}
void AddUserLay::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserLay.drawman)
}
::std::string* AddUserLay::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:AddUserLay.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddUserLay::release_drawman() {
  // @@protoc_insertion_point(field_release:AddUserLay.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:AddUserLay.drawman)
}

// optional string pic = 2;
void AddUserLay::clear_pic() {
  pic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddUserLay::pic() const {
  // @@protoc_insertion_point(field_get:AddUserLay.pic)
  return pic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_pic(const ::std::string& value) {
  
  pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserLay.pic)
}
void AddUserLay::set_pic(const char* value) {
  
  pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserLay.pic)
}
void AddUserLay::set_pic(const char* value, size_t size) {
  
  pic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserLay.pic)
}
::std::string* AddUserLay::mutable_pic() {
  
  // @@protoc_insertion_point(field_mutable:AddUserLay.pic)
  return pic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddUserLay::release_pic() {
  // @@protoc_insertion_point(field_release:AddUserLay.pic)
  
  return pic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_allocated_pic(::std::string* pic) {
  if (pic != NULL) {
    
  } else {
    
  }
  pic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pic);
  // @@protoc_insertion_point(field_set_allocated:AddUserLay.pic)
}

// optional string ID = 3;
void AddUserLay::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddUserLay::id() const {
  // @@protoc_insertion_point(field_get:AddUserLay.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserLay.ID)
}
void AddUserLay::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserLay.ID)
}
void AddUserLay::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserLay.ID)
}
::std::string* AddUserLay::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:AddUserLay.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddUserLay::release_id() {
  // @@protoc_insertion_point(field_release:AddUserLay.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AddUserLay.ID)
}

// optional string type = 4;
void AddUserLay::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddUserLay::type() const {
  // @@protoc_insertion_point(field_get:AddUserLay.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserLay.type)
}
void AddUserLay::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserLay.type)
}
void AddUserLay::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserLay.type)
}
::std::string* AddUserLay::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:AddUserLay.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddUserLay::release_type() {
  // @@protoc_insertion_point(field_release:AddUserLay.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddUserLay::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:AddUserLay.type)
}

inline const AddUserLay* AddUserLay::internal_default_instance() {
  return &AddUserLay_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
