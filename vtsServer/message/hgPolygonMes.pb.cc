// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgPolygonMes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgPolygonMes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgPolygonMes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgPolygonMes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgPolygonMes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgPolygonMes_2eproto() {
  protobuf_AddDesc_hgPolygonMes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgPolygonMes.proto");
  GOOGLE_CHECK(file != NULL);
  hgPolygonMes_descriptor_ = file->message_type(0);
  static const int hgPolygonMes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPolygonMes, point_),
  };
  hgPolygonMes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgPolygonMes_descriptor_,
      hgPolygonMes::internal_default_instance(),
      hgPolygonMes_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgPolygonMes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgPolygonMes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgPolygonMes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgPolygonMes_descriptor_, hgPolygonMes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgPolygonMes_2eproto() {
  hgPolygonMes_default_instance_.Shutdown();
  delete hgPolygonMes_reflection_;
}

void protobuf_InitDefaults_hgPolygonMes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_InitDefaults_PointMes_2eproto();
  hgPolygonMes_default_instance_.DefaultConstruct();
  hgPolygonMes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgPolygonMes_2eproto_once_);
void protobuf_InitDefaults_hgPolygonMes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgPolygonMes_2eproto_once_,
                 &protobuf_InitDefaults_hgPolygonMes_2eproto_impl);
}
void protobuf_AddDesc_hgPolygonMes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgPolygonMes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022hgPolygonMes.proto\032\016PointMes.proto\"(\n\014"
    "hgPolygonMes\022\030\n\005point\030\001 \003(\0132\t.PointMesb\006"
    "proto3", 86);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgPolygonMes.proto", &protobuf_RegisterTypes);
  ::protobuf_AddDesc_PointMes_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgPolygonMes_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgPolygonMes_2eproto_once_);
void protobuf_AddDesc_hgPolygonMes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgPolygonMes_2eproto_once_,
                 &protobuf_AddDesc_hgPolygonMes_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgPolygonMes_2eproto {
  StaticDescriptorInitializer_hgPolygonMes_2eproto() {
    protobuf_AddDesc_hgPolygonMes_2eproto();
  }
} static_descriptor_initializer_hgPolygonMes_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgPolygonMes::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgPolygonMes::hgPolygonMes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgPolygonMes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgPolygonMes)
}

void hgPolygonMes::InitAsDefaultInstance() {
}

hgPolygonMes::hgPolygonMes(const hgPolygonMes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgPolygonMes)
}

void hgPolygonMes::SharedCtor() {
  _cached_size_ = 0;
}

hgPolygonMes::~hgPolygonMes() {
  // @@protoc_insertion_point(destructor:hgPolygonMes)
  SharedDtor();
}

void hgPolygonMes::SharedDtor() {
}

void hgPolygonMes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgPolygonMes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgPolygonMes_descriptor_;
}

const hgPolygonMes& hgPolygonMes::default_instance() {
  protobuf_InitDefaults_hgPolygonMes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgPolygonMes> hgPolygonMes_default_instance_;

hgPolygonMes* hgPolygonMes::New(::google::protobuf::Arena* arena) const {
  hgPolygonMes* n = new hgPolygonMes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgPolygonMes::Clear() {
// @@protoc_insertion_point(message_clear_start:hgPolygonMes)
  point_.Clear();
}

bool hgPolygonMes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgPolygonMes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PointMes point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgPolygonMes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgPolygonMes)
  return false;
#undef DO_
}

void hgPolygonMes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgPolygonMes)
  // repeated .PointMes point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hgPolygonMes)
}

::google::protobuf::uint8* hgPolygonMes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgPolygonMes)
  // repeated .PointMes point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgPolygonMes)
  return target;
}

size_t hgPolygonMes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgPolygonMes)
  size_t total_size = 0;

  // repeated .PointMes point = 1;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgPolygonMes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgPolygonMes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgPolygonMes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgPolygonMes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgPolygonMes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgPolygonMes)
    UnsafeMergeFrom(*source);
  }
}

void hgPolygonMes::MergeFrom(const hgPolygonMes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgPolygonMes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgPolygonMes::UnsafeMergeFrom(const hgPolygonMes& from) {
  GOOGLE_DCHECK(&from != this);
  point_.MergeFrom(from.point_);
}

void hgPolygonMes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgPolygonMes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgPolygonMes::CopyFrom(const hgPolygonMes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgPolygonMes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgPolygonMes::IsInitialized() const {

  return true;
}

void hgPolygonMes::Swap(hgPolygonMes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgPolygonMes::InternalSwap(hgPolygonMes* other) {
  point_.UnsafeArenaSwap(&other->point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgPolygonMes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgPolygonMes_descriptor_;
  metadata.reflection = hgPolygonMes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgPolygonMes

// repeated .PointMes point = 1;
int hgPolygonMes::point_size() const {
  return point_.size();
}
void hgPolygonMes::clear_point() {
  point_.Clear();
}
const ::PointMes& hgPolygonMes::point(int index) const {
  // @@protoc_insertion_point(field_get:hgPolygonMes.point)
  return point_.Get(index);
}
::PointMes* hgPolygonMes::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:hgPolygonMes.point)
  return point_.Mutable(index);
}
::PointMes* hgPolygonMes::add_point() {
  // @@protoc_insertion_point(field_add:hgPolygonMes.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::PointMes >*
hgPolygonMes::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:hgPolygonMes.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::PointMes >&
hgPolygonMes::point() const {
  // @@protoc_insertion_point(field_list:hgPolygonMes.point)
  return point_;
}

inline const hgPolygonMes* hgPolygonMes::internal_default_instance() {
  return &hgPolygonMes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
