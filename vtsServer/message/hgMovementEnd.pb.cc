// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgMovementEnd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgMovementEnd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgMovementEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgMovementEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgMovementEndRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgMovementEndRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgMovementEnd_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgMovementEnd_2eproto() {
  protobuf_AddDesc_hgMovementEnd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgMovementEnd.proto");
  GOOGLE_CHECK(file != NULL);
  hgMovementEnd_descriptor_ = file->message_type(0);
  static const int hgMovementEnd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgMovementEnd, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgMovementEnd, movementend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgMovementEnd, time_),
  };
  hgMovementEnd_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgMovementEnd_descriptor_,
      hgMovementEnd::internal_default_instance(),
      hgMovementEnd_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgMovementEnd),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgMovementEnd, _internal_metadata_));
  hgMovementEndRepsone_descriptor_ = file->message_type(1);
  static const int hgMovementEndRepsone_offsets_[1] = {
  };
  hgMovementEndRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgMovementEndRepsone_descriptor_,
      hgMovementEndRepsone::internal_default_instance(),
      hgMovementEndRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgMovementEndRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgMovementEndRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgMovementEnd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgMovementEnd_descriptor_, hgMovementEnd::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgMovementEndRepsone_descriptor_, hgMovementEndRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgMovementEnd_2eproto() {
  hgMovementEnd_default_instance_.Shutdown();
  delete hgMovementEnd_reflection_;
  hgMovementEndRepsone_default_instance_.Shutdown();
  delete hgMovementEndRepsone_reflection_;
}

void protobuf_InitDefaults_hgMovementEnd_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgMovementEnd_default_instance_.DefaultConstruct();
  hgMovementEndRepsone_default_instance_.DefaultConstruct();
  hgMovementEnd_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgMovementEndRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgMovementEnd_2eproto_once_);
void protobuf_InitDefaults_hgMovementEnd_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgMovementEnd_2eproto_once_,
                 &protobuf_InitDefaults_hgMovementEnd_2eproto_impl);
}
void protobuf_AddDesc_hgMovementEnd_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgMovementEnd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023hgMovementEnd.proto\"@\n\rhgMovementEnd\022\014"
    "\n\004MMSI\030\001 \001(\t\022\023\n\013MovementEnd\030\002 \001(\010\022\014\n\004Tim"
    "e\030\003 \001(\003\"\026\n\024hgMovementEndRepsoneb\006proto3", 119);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgMovementEnd.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgMovementEnd_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgMovementEnd_2eproto_once_);
void protobuf_AddDesc_hgMovementEnd_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgMovementEnd_2eproto_once_,
                 &protobuf_AddDesc_hgMovementEnd_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgMovementEnd_2eproto {
  StaticDescriptorInitializer_hgMovementEnd_2eproto() {
    protobuf_AddDesc_hgMovementEnd_2eproto();
  }
} static_descriptor_initializer_hgMovementEnd_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgMovementEnd::kMMSIFieldNumber;
const int hgMovementEnd::kMovementEndFieldNumber;
const int hgMovementEnd::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgMovementEnd::hgMovementEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgMovementEnd_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgMovementEnd)
}

void hgMovementEnd::InitAsDefaultInstance() {
}

hgMovementEnd::hgMovementEnd(const hgMovementEnd& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgMovementEnd)
}

void hgMovementEnd::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&movementend_) -
    reinterpret_cast<char*>(&time_) + sizeof(movementend_));
  _cached_size_ = 0;
}

hgMovementEnd::~hgMovementEnd() {
  // @@protoc_insertion_point(destructor:hgMovementEnd)
  SharedDtor();
}

void hgMovementEnd::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgMovementEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgMovementEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgMovementEnd_descriptor_;
}

const hgMovementEnd& hgMovementEnd::default_instance() {
  protobuf_InitDefaults_hgMovementEnd_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgMovementEnd> hgMovementEnd_default_instance_;

hgMovementEnd* hgMovementEnd::New(::google::protobuf::Arena* arena) const {
  hgMovementEnd* n = new hgMovementEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgMovementEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:hgMovementEnd)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgMovementEnd, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgMovementEnd*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, movementend_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgMovementEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgMovementEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgMovementEnd.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MovementEnd;
        break;
      }

      // optional bool MovementEnd = 2;
      case 2: {
        if (tag == 16) {
         parse_MovementEnd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &movementend_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // optional int64 Time = 3;
      case 3: {
        if (tag == 24) {
         parse_Time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgMovementEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgMovementEnd)
  return false;
#undef DO_
}

void hgMovementEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgMovementEnd)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgMovementEnd.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool MovementEnd = 2;
  if (this->movementend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->movementend(), output);
  }

  // optional int64 Time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgMovementEnd)
}

::google::protobuf::uint8* hgMovementEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgMovementEnd)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgMovementEnd.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool MovementEnd = 2;
  if (this->movementend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->movementend(), target);
  }

  // optional int64 Time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgMovementEnd)
  return target;
}

size_t hgMovementEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgMovementEnd)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool MovementEnd = 2;
  if (this->movementend() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 Time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgMovementEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgMovementEnd)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgMovementEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgMovementEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgMovementEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgMovementEnd)
    UnsafeMergeFrom(*source);
  }
}

void hgMovementEnd::MergeFrom(const hgMovementEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgMovementEnd)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgMovementEnd::UnsafeMergeFrom(const hgMovementEnd& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.movementend() != 0) {
    set_movementend(from.movementend());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void hgMovementEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgMovementEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgMovementEnd::CopyFrom(const hgMovementEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgMovementEnd)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgMovementEnd::IsInitialized() const {

  return true;
}

void hgMovementEnd::Swap(hgMovementEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgMovementEnd::InternalSwap(hgMovementEnd* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(movementend_, other->movementend_);
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgMovementEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgMovementEnd_descriptor_;
  metadata.reflection = hgMovementEnd_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgMovementEnd

// optional string MMSI = 1;
void hgMovementEnd::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgMovementEnd::mmsi() const {
  // @@protoc_insertion_point(field_get:hgMovementEnd.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgMovementEnd::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgMovementEnd.MMSI)
}
void hgMovementEnd::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgMovementEnd.MMSI)
}
void hgMovementEnd::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgMovementEnd.MMSI)
}
::std::string* hgMovementEnd::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgMovementEnd.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgMovementEnd::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgMovementEnd.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgMovementEnd::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgMovementEnd.MMSI)
}

// optional bool MovementEnd = 2;
void hgMovementEnd::clear_movementend() {
  movementend_ = false;
}
bool hgMovementEnd::movementend() const {
  // @@protoc_insertion_point(field_get:hgMovementEnd.MovementEnd)
  return movementend_;
}
void hgMovementEnd::set_movementend(bool value) {
  
  movementend_ = value;
  // @@protoc_insertion_point(field_set:hgMovementEnd.MovementEnd)
}

// optional int64 Time = 3;
void hgMovementEnd::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 hgMovementEnd::time() const {
  // @@protoc_insertion_point(field_get:hgMovementEnd.Time)
  return time_;
}
void hgMovementEnd::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:hgMovementEnd.Time)
}

inline const hgMovementEnd* hgMovementEnd::internal_default_instance() {
  return &hgMovementEnd_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgMovementEndRepsone::hgMovementEndRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgMovementEnd_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgMovementEndRepsone)
}

void hgMovementEndRepsone::InitAsDefaultInstance() {
}

hgMovementEndRepsone::hgMovementEndRepsone(const hgMovementEndRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgMovementEndRepsone)
}

void hgMovementEndRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgMovementEndRepsone::~hgMovementEndRepsone() {
  // @@protoc_insertion_point(destructor:hgMovementEndRepsone)
  SharedDtor();
}

void hgMovementEndRepsone::SharedDtor() {
}

void hgMovementEndRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgMovementEndRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgMovementEndRepsone_descriptor_;
}

const hgMovementEndRepsone& hgMovementEndRepsone::default_instance() {
  protobuf_InitDefaults_hgMovementEnd_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgMovementEndRepsone> hgMovementEndRepsone_default_instance_;

hgMovementEndRepsone* hgMovementEndRepsone::New(::google::protobuf::Arena* arena) const {
  hgMovementEndRepsone* n = new hgMovementEndRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgMovementEndRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgMovementEndRepsone)
}

bool hgMovementEndRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgMovementEndRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgMovementEndRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgMovementEndRepsone)
  return false;
#undef DO_
}

void hgMovementEndRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgMovementEndRepsone)
  // @@protoc_insertion_point(serialize_end:hgMovementEndRepsone)
}

::google::protobuf::uint8* hgMovementEndRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgMovementEndRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgMovementEndRepsone)
  return target;
}

size_t hgMovementEndRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgMovementEndRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgMovementEndRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgMovementEndRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgMovementEndRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgMovementEndRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgMovementEndRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgMovementEndRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgMovementEndRepsone::MergeFrom(const hgMovementEndRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgMovementEndRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgMovementEndRepsone::UnsafeMergeFrom(const hgMovementEndRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgMovementEndRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgMovementEndRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgMovementEndRepsone::CopyFrom(const hgMovementEndRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgMovementEndRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgMovementEndRepsone::IsInitialized() const {

  return true;
}

void hgMovementEndRepsone::Swap(hgMovementEndRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgMovementEndRepsone::InternalSwap(hgMovementEndRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgMovementEndRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgMovementEndRepsone_descriptor_;
  metadata.reflection = hgMovementEndRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgMovementEndRepsone

inline const hgMovementEndRepsone* hgMovementEndRepsone::internal_default_instance() {
  return &hgMovementEndRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
