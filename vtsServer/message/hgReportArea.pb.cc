// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgReportArea.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgReportArea.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgAreaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgAreaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgReportArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgReportArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgReportAreaRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgReportAreaRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgReportArea_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgReportArea_2eproto() {
  protobuf_AddDesc_hgReportArea_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgReportArea.proto");
  GOOGLE_CHECK(file != NULL);
  hgAreaData_descriptor_ = file->message_type(0);
  static const int hgAreaData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgAreaData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgAreaData, type_),
  };
  hgAreaData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgAreaData_descriptor_,
      hgAreaData::internal_default_instance(),
      hgAreaData_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgAreaData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgAreaData, _internal_metadata_));
  hgReportArea_descriptor_ = file->message_type(1);
  static const int hgReportArea_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, reportarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, allchecked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, areadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, earlisttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, latesttime_),
  };
  hgReportArea_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgReportArea_descriptor_,
      hgReportArea::internal_default_instance(),
      hgReportArea_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgReportArea),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportArea, _internal_metadata_));
  hgReportAreaRepsone_descriptor_ = file->message_type(2);
  static const int hgReportAreaRepsone_offsets_[1] = {
  };
  hgReportAreaRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgReportAreaRepsone_descriptor_,
      hgReportAreaRepsone::internal_default_instance(),
      hgReportAreaRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgReportAreaRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgReportAreaRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgReportArea_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgAreaData_descriptor_, hgAreaData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgReportArea_descriptor_, hgReportArea::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgReportAreaRepsone_descriptor_, hgReportAreaRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgReportArea_2eproto() {
  hgAreaData_default_instance_.Shutdown();
  delete hgAreaData_reflection_;
  hgReportArea_default_instance_.Shutdown();
  delete hgReportArea_reflection_;
  hgReportAreaRepsone_default_instance_.Shutdown();
  delete hgReportAreaRepsone_reflection_;
}

void protobuf_InitDefaults_hgReportArea_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgAreaData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  hgReportArea_default_instance_.DefaultConstruct();
  hgReportAreaRepsone_default_instance_.DefaultConstruct();
  hgAreaData_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgReportArea_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgReportAreaRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgReportArea_2eproto_once_);
void protobuf_InitDefaults_hgReportArea_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgReportArea_2eproto_once_,
                 &protobuf_InitDefaults_hgReportArea_2eproto_impl);
}
void protobuf_AddDesc_hgReportArea_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgReportArea_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022hgReportArea.proto\"&\n\nhgAreaData\022\n\n\002ID"
    "\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\"\235\001\n\014hgReportArea\022\014\n"
    "\004MMSI\030\001 \001(\t\022\022\n\nReportArea\030\002 \001(\010\022\017\n\007Patte"
    "rn\030\003 \001(\010\022\022\n\nAllChecked\030\004 \001(\010\022\035\n\010AreaData"
    "\030\005 \003(\0132\013.hgAreaData\022\023\n\013EarlistTime\030\006 \001(\003"
    "\022\022\n\nLatestTime\030\007 \001(\003\"\025\n\023hgReportAreaReps"
    "oneb\006proto3", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgReportArea.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgReportArea_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgReportArea_2eproto_once_);
void protobuf_AddDesc_hgReportArea_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgReportArea_2eproto_once_,
                 &protobuf_AddDesc_hgReportArea_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgReportArea_2eproto {
  StaticDescriptorInitializer_hgReportArea_2eproto() {
    protobuf_AddDesc_hgReportArea_2eproto();
  }
} static_descriptor_initializer_hgReportArea_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgAreaData::kIDFieldNumber;
const int hgAreaData::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgAreaData::hgAreaData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgReportArea_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgAreaData)
}

void hgAreaData::InitAsDefaultInstance() {
}

hgAreaData::hgAreaData(const hgAreaData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgAreaData)
}

void hgAreaData::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

hgAreaData::~hgAreaData() {
  // @@protoc_insertion_point(destructor:hgAreaData)
  SharedDtor();
}

void hgAreaData::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgAreaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgAreaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgAreaData_descriptor_;
}

const hgAreaData& hgAreaData::default_instance() {
  protobuf_InitDefaults_hgReportArea_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgAreaData> hgAreaData_default_instance_;

hgAreaData* hgAreaData::New(::google::protobuf::Arena* arena) const {
  hgAreaData* n = new hgAreaData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgAreaData::Clear() {
// @@protoc_insertion_point(message_clear_start:hgAreaData)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool hgAreaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgAreaData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgAreaData.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgAreaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgAreaData)
  return false;
#undef DO_
}

void hgAreaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgAreaData)
  // optional string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgAreaData.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgAreaData)
}

::google::protobuf::uint8* hgAreaData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgAreaData)
  // optional string ID = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgAreaData.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgAreaData)
  return target;
}

size_t hgAreaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgAreaData)
  size_t total_size = 0;

  // optional string ID = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgAreaData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgAreaData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgAreaData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgAreaData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgAreaData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgAreaData)
    UnsafeMergeFrom(*source);
  }
}

void hgAreaData::MergeFrom(const hgAreaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgAreaData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgAreaData::UnsafeMergeFrom(const hgAreaData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void hgAreaData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgAreaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgAreaData::CopyFrom(const hgAreaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgAreaData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgAreaData::IsInitialized() const {

  return true;
}

void hgAreaData::Swap(hgAreaData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgAreaData::InternalSwap(hgAreaData* other) {
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgAreaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgAreaData_descriptor_;
  metadata.reflection = hgAreaData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgAreaData

// optional string ID = 1;
void hgAreaData::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgAreaData::id() const {
  // @@protoc_insertion_point(field_get:hgAreaData.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgAreaData::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAreaData.ID)
}
void hgAreaData::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAreaData.ID)
}
void hgAreaData::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAreaData.ID)
}
::std::string* hgAreaData::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:hgAreaData.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgAreaData::release_id() {
  // @@protoc_insertion_point(field_release:hgAreaData.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgAreaData::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hgAreaData.ID)
}

// optional int32 type = 2;
void hgAreaData::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 hgAreaData::type() const {
  // @@protoc_insertion_point(field_get:hgAreaData.type)
  return type_;
}
void hgAreaData::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:hgAreaData.type)
}

inline const hgAreaData* hgAreaData::internal_default_instance() {
  return &hgAreaData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgReportArea::kMMSIFieldNumber;
const int hgReportArea::kReportAreaFieldNumber;
const int hgReportArea::kPatternFieldNumber;
const int hgReportArea::kAllCheckedFieldNumber;
const int hgReportArea::kAreaDataFieldNumber;
const int hgReportArea::kEarlistTimeFieldNumber;
const int hgReportArea::kLatestTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgReportArea::hgReportArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgReportArea_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgReportArea)
}

void hgReportArea::InitAsDefaultInstance() {
}

hgReportArea::hgReportArea(const hgReportArea& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgReportArea)
}

void hgReportArea::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&earlisttime_, 0, reinterpret_cast<char*>(&allchecked_) -
    reinterpret_cast<char*>(&earlisttime_) + sizeof(allchecked_));
  _cached_size_ = 0;
}

hgReportArea::~hgReportArea() {
  // @@protoc_insertion_point(destructor:hgReportArea)
  SharedDtor();
}

void hgReportArea::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgReportArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgReportArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgReportArea_descriptor_;
}

const hgReportArea& hgReportArea::default_instance() {
  protobuf_InitDefaults_hgReportArea_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgReportArea> hgReportArea_default_instance_;

hgReportArea* hgReportArea::New(::google::protobuf::Arena* arena) const {
  hgReportArea* n = new hgReportArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgReportArea::Clear() {
// @@protoc_insertion_point(message_clear_start:hgReportArea)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgReportArea, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgReportArea*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(earlisttime_, allchecked_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  areadata_.Clear();
}

bool hgReportArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgReportArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgReportArea.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReportArea;
        break;
      }

      // optional bool ReportArea = 2;
      case 2: {
        if (tag == 16) {
         parse_ReportArea:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reportarea_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Pattern;
        break;
      }

      // optional bool Pattern = 3;
      case 3: {
        if (tag == 24) {
         parse_Pattern:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pattern_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AllChecked;
        break;
      }

      // optional bool AllChecked = 4;
      case 4: {
        if (tag == 32) {
         parse_AllChecked:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchecked_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AreaData;
        break;
      }

      // repeated .hgAreaData AreaData = 5;
      case 5: {
        if (tag == 42) {
         parse_AreaData:
          DO_(input->IncrementRecursionDepth());
         parse_loop_AreaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_areadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_AreaData;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_EarlistTime;
        break;
      }

      // optional int64 EarlistTime = 6;
      case 6: {
        if (tag == 48) {
         parse_EarlistTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &earlisttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LatestTime;
        break;
      }

      // optional int64 LatestTime = 7;
      case 7: {
        if (tag == 56) {
         parse_LatestTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latesttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgReportArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgReportArea)
  return false;
#undef DO_
}

void hgReportArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgReportArea)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgReportArea.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool ReportArea = 2;
  if (this->reportarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reportarea(), output);
  }

  // optional bool Pattern = 3;
  if (this->pattern() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pattern(), output);
  }

  // optional bool AllChecked = 4;
  if (this->allchecked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->allchecked(), output);
  }

  // repeated .hgAreaData AreaData = 5;
  for (unsigned int i = 0, n = this->areadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->areadata(i), output);
  }

  // optional int64 EarlistTime = 6;
  if (this->earlisttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->earlisttime(), output);
  }

  // optional int64 LatestTime = 7;
  if (this->latesttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->latesttime(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgReportArea)
}

::google::protobuf::uint8* hgReportArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgReportArea)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgReportArea.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool ReportArea = 2;
  if (this->reportarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reportarea(), target);
  }

  // optional bool Pattern = 3;
  if (this->pattern() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pattern(), target);
  }

  // optional bool AllChecked = 4;
  if (this->allchecked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->allchecked(), target);
  }

  // repeated .hgAreaData AreaData = 5;
  for (unsigned int i = 0, n = this->areadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->areadata(i), false, target);
  }

  // optional int64 EarlistTime = 6;
  if (this->earlisttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->earlisttime(), target);
  }

  // optional int64 LatestTime = 7;
  if (this->latesttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->latesttime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgReportArea)
  return target;
}

size_t hgReportArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgReportArea)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool ReportArea = 2;
  if (this->reportarea() != 0) {
    total_size += 1 + 1;
  }

  // optional bool Pattern = 3;
  if (this->pattern() != 0) {
    total_size += 1 + 1;
  }

  // optional bool AllChecked = 4;
  if (this->allchecked() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 EarlistTime = 6;
  if (this->earlisttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->earlisttime());
  }

  // optional int64 LatestTime = 7;
  if (this->latesttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->latesttime());
  }

  // repeated .hgAreaData AreaData = 5;
  {
    unsigned int count = this->areadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->areadata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgReportArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgReportArea)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgReportArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgReportArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgReportArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgReportArea)
    UnsafeMergeFrom(*source);
  }
}

void hgReportArea::MergeFrom(const hgReportArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgReportArea)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgReportArea::UnsafeMergeFrom(const hgReportArea& from) {
  GOOGLE_DCHECK(&from != this);
  areadata_.MergeFrom(from.areadata_);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.reportarea() != 0) {
    set_reportarea(from.reportarea());
  }
  if (from.pattern() != 0) {
    set_pattern(from.pattern());
  }
  if (from.allchecked() != 0) {
    set_allchecked(from.allchecked());
  }
  if (from.earlisttime() != 0) {
    set_earlisttime(from.earlisttime());
  }
  if (from.latesttime() != 0) {
    set_latesttime(from.latesttime());
  }
}

void hgReportArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgReportArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgReportArea::CopyFrom(const hgReportArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgReportArea)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgReportArea::IsInitialized() const {

  return true;
}

void hgReportArea::Swap(hgReportArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgReportArea::InternalSwap(hgReportArea* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(reportarea_, other->reportarea_);
  std::swap(pattern_, other->pattern_);
  std::swap(allchecked_, other->allchecked_);
  areadata_.UnsafeArenaSwap(&other->areadata_);
  std::swap(earlisttime_, other->earlisttime_);
  std::swap(latesttime_, other->latesttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgReportArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgReportArea_descriptor_;
  metadata.reflection = hgReportArea_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgReportArea

// optional string MMSI = 1;
void hgReportArea::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgReportArea::mmsi() const {
  // @@protoc_insertion_point(field_get:hgReportArea.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgReportArea::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgReportArea.MMSI)
}
void hgReportArea::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgReportArea.MMSI)
}
void hgReportArea::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgReportArea.MMSI)
}
::std::string* hgReportArea::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgReportArea.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgReportArea::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgReportArea.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgReportArea::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgReportArea.MMSI)
}

// optional bool ReportArea = 2;
void hgReportArea::clear_reportarea() {
  reportarea_ = false;
}
bool hgReportArea::reportarea() const {
  // @@protoc_insertion_point(field_get:hgReportArea.ReportArea)
  return reportarea_;
}
void hgReportArea::set_reportarea(bool value) {
  
  reportarea_ = value;
  // @@protoc_insertion_point(field_set:hgReportArea.ReportArea)
}

// optional bool Pattern = 3;
void hgReportArea::clear_pattern() {
  pattern_ = false;
}
bool hgReportArea::pattern() const {
  // @@protoc_insertion_point(field_get:hgReportArea.Pattern)
  return pattern_;
}
void hgReportArea::set_pattern(bool value) {
  
  pattern_ = value;
  // @@protoc_insertion_point(field_set:hgReportArea.Pattern)
}

// optional bool AllChecked = 4;
void hgReportArea::clear_allchecked() {
  allchecked_ = false;
}
bool hgReportArea::allchecked() const {
  // @@protoc_insertion_point(field_get:hgReportArea.AllChecked)
  return allchecked_;
}
void hgReportArea::set_allchecked(bool value) {
  
  allchecked_ = value;
  // @@protoc_insertion_point(field_set:hgReportArea.AllChecked)
}

// repeated .hgAreaData AreaData = 5;
int hgReportArea::areadata_size() const {
  return areadata_.size();
}
void hgReportArea::clear_areadata() {
  areadata_.Clear();
}
const ::hgAreaData& hgReportArea::areadata(int index) const {
  // @@protoc_insertion_point(field_get:hgReportArea.AreaData)
  return areadata_.Get(index);
}
::hgAreaData* hgReportArea::mutable_areadata(int index) {
  // @@protoc_insertion_point(field_mutable:hgReportArea.AreaData)
  return areadata_.Mutable(index);
}
::hgAreaData* hgReportArea::add_areadata() {
  // @@protoc_insertion_point(field_add:hgReportArea.AreaData)
  return areadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::hgAreaData >*
hgReportArea::mutable_areadata() {
  // @@protoc_insertion_point(field_mutable_list:hgReportArea.AreaData)
  return &areadata_;
}
const ::google::protobuf::RepeatedPtrField< ::hgAreaData >&
hgReportArea::areadata() const {
  // @@protoc_insertion_point(field_list:hgReportArea.AreaData)
  return areadata_;
}

// optional int64 EarlistTime = 6;
void hgReportArea::clear_earlisttime() {
  earlisttime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 hgReportArea::earlisttime() const {
  // @@protoc_insertion_point(field_get:hgReportArea.EarlistTime)
  return earlisttime_;
}
void hgReportArea::set_earlisttime(::google::protobuf::int64 value) {
  
  earlisttime_ = value;
  // @@protoc_insertion_point(field_set:hgReportArea.EarlistTime)
}

// optional int64 LatestTime = 7;
void hgReportArea::clear_latesttime() {
  latesttime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 hgReportArea::latesttime() const {
  // @@protoc_insertion_point(field_get:hgReportArea.LatestTime)
  return latesttime_;
}
void hgReportArea::set_latesttime(::google::protobuf::int64 value) {
  
  latesttime_ = value;
  // @@protoc_insertion_point(field_set:hgReportArea.LatestTime)
}

inline const hgReportArea* hgReportArea::internal_default_instance() {
  return &hgReportArea_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgReportAreaRepsone::hgReportAreaRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgReportArea_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgReportAreaRepsone)
}

void hgReportAreaRepsone::InitAsDefaultInstance() {
}

hgReportAreaRepsone::hgReportAreaRepsone(const hgReportAreaRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgReportAreaRepsone)
}

void hgReportAreaRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgReportAreaRepsone::~hgReportAreaRepsone() {
  // @@protoc_insertion_point(destructor:hgReportAreaRepsone)
  SharedDtor();
}

void hgReportAreaRepsone::SharedDtor() {
}

void hgReportAreaRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgReportAreaRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgReportAreaRepsone_descriptor_;
}

const hgReportAreaRepsone& hgReportAreaRepsone::default_instance() {
  protobuf_InitDefaults_hgReportArea_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgReportAreaRepsone> hgReportAreaRepsone_default_instance_;

hgReportAreaRepsone* hgReportAreaRepsone::New(::google::protobuf::Arena* arena) const {
  hgReportAreaRepsone* n = new hgReportAreaRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgReportAreaRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgReportAreaRepsone)
}

bool hgReportAreaRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgReportAreaRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgReportAreaRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgReportAreaRepsone)
  return false;
#undef DO_
}

void hgReportAreaRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgReportAreaRepsone)
  // @@protoc_insertion_point(serialize_end:hgReportAreaRepsone)
}

::google::protobuf::uint8* hgReportAreaRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgReportAreaRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgReportAreaRepsone)
  return target;
}

size_t hgReportAreaRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgReportAreaRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgReportAreaRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgReportAreaRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgReportAreaRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgReportAreaRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgReportAreaRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgReportAreaRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgReportAreaRepsone::MergeFrom(const hgReportAreaRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgReportAreaRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgReportAreaRepsone::UnsafeMergeFrom(const hgReportAreaRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgReportAreaRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgReportAreaRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgReportAreaRepsone::CopyFrom(const hgReportAreaRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgReportAreaRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgReportAreaRepsone::IsInitialized() const {

  return true;
}

void hgReportAreaRepsone::Swap(hgReportAreaRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgReportAreaRepsone::InternalSwap(hgReportAreaRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgReportAreaRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgReportAreaRepsone_descriptor_;
  metadata.reflection = hgReportAreaRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgReportAreaRepsone

inline const hgReportAreaRepsone* hgReportAreaRepsone::internal_default_instance() {
  return &hgReportAreaRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
