// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userhabit.proto

#ifndef PROTOBUF_userhabit_2eproto__INCLUDED
#define PROTOBUF_userhabit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_userhabit_2eproto();
void protobuf_InitDefaults_userhabit_2eproto();
void protobuf_AssignDesc_userhabit_2eproto();
void protobuf_ShutdownFile_userhabit_2eproto();

class ChartCard;
class DangerTargetCard;
class QuickData;
class SystemCard;
class TargetInfoCard;
class TargetInfoData;
class ViewCard;

enum CardMesType {
  CMTSend = 0,
  CMTRead = 1,
  CMTNone = 2,
  CardMesType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CardMesType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CardMesType_IsValid(int value);
const CardMesType CardMesType_MIN = CMTSend;
const CardMesType CardMesType_MAX = CMTNone;
const int CardMesType_ARRAYSIZE = CardMesType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CardMesType_descriptor();
inline const ::std::string& CardMesType_Name(CardMesType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CardMesType_descriptor(), value);
}
inline bool CardMesType_Parse(
    const ::std::string& name, CardMesType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CardMesType>(
    CardMesType_descriptor(), name, value);
}
enum PreRadioType {
  HalfHour = 0,
  OneHour = 1,
  ThreeHour = 2,
  PreRadioType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PreRadioType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PreRadioType_IsValid(int value);
const PreRadioType PreRadioType_MIN = HalfHour;
const PreRadioType PreRadioType_MAX = ThreeHour;
const int PreRadioType_ARRAYSIZE = PreRadioType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PreRadioType_descriptor();
inline const ::std::string& PreRadioType_Name(PreRadioType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PreRadioType_descriptor(), value);
}
inline bool PreRadioType_Parse(
    const ::std::string& name, PreRadioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreRadioType>(
    PreRadioType_descriptor(), name, value);
}
// ===================================================================

class QuickData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QuickData) */ {
 public:
  QuickData();
  virtual ~QuickData();

  QuickData(const QuickData& from);

  inline QuickData& operator=(const QuickData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuickData& default_instance();

  static const QuickData* internal_default_instance();

  void Swap(QuickData* other);

  // implements Message ----------------------------------------------

  inline QuickData* New() const { return New(NULL); }

  QuickData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuickData& from);
  void MergeFrom(const QuickData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuickData* other);
  void UnsafeMergeFrom(const QuickData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double lat = 2;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // optional double lon = 3;
  void clear_lon();
  static const int kLonFieldNumber = 3;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:QuickData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double lat_;
  double lon_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_userhabit_2eproto_impl();
  friend void  protobuf_AddDesc_userhabit_2eproto_impl();
  friend void protobuf_AssignDesc_userhabit_2eproto();
  friend void protobuf_ShutdownFile_userhabit_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QuickData> QuickData_default_instance_;

// -------------------------------------------------------------------

class TargetInfoData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TargetInfoData) */ {
 public:
  TargetInfoData();
  virtual ~TargetInfoData();

  TargetInfoData(const TargetInfoData& from);

  inline TargetInfoData& operator=(const TargetInfoData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetInfoData& default_instance();

  static const TargetInfoData* internal_default_instance();

  void Swap(TargetInfoData* other);

  // implements Message ----------------------------------------------

  inline TargetInfoData* New() const { return New(NULL); }

  TargetInfoData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetInfoData& from);
  void MergeFrom(const TargetInfoData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetInfoData* other);
  void UnsafeMergeFrom(const TargetInfoData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // optional bool checked = 2;
  void clear_checked();
  static const int kCheckedFieldNumber = 2;
  bool checked() const;
  void set_checked(bool value);

  // @@protoc_insertion_point(class_scope:TargetInfoData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 index_;
  bool checked_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_userhabit_2eproto_impl();
  friend void  protobuf_AddDesc_userhabit_2eproto_impl();
  friend void protobuf_AssignDesc_userhabit_2eproto();
  friend void protobuf_ShutdownFile_userhabit_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TargetInfoData> TargetInfoData_default_instance_;

// -------------------------------------------------------------------

class ViewCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ViewCard) */ {
 public:
  ViewCard();
  virtual ~ViewCard();

  ViewCard(const ViewCard& from);

  inline ViewCard& operator=(const ViewCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ViewCard& default_instance();

  static const ViewCard* internal_default_instance();

  void Swap(ViewCard* other);

  // implements Message ----------------------------------------------

  inline ViewCard* New() const { return New(NULL); }

  ViewCard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ViewCard& from);
  void MergeFrom(const ViewCard& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ViewCard* other);
  void UnsafeMergeFrom(const ViewCard& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional double lat = 2;
  void clear_lat();
  static const int kLatFieldNumber = 2;
  double lat() const;
  void set_lat(double value);

  // optional double lon = 3;
  void clear_lon();
  static const int kLonFieldNumber = 3;
  double lon() const;
  void set_lon(double value);

  // optional int32 range = 4;
  void clear_range();
  static const int kRangeFieldNumber = 4;
  ::google::protobuf::int32 range() const;
  void set_range(::google::protobuf::int32 value);

  // repeated .QuickData quick = 5;
  int quick_size() const;
  void clear_quick();
  static const int kQuickFieldNumber = 5;
  const ::QuickData& quick(int index) const;
  ::QuickData* mutable_quick(int index);
  ::QuickData* add_quick();
  ::google::protobuf::RepeatedPtrField< ::QuickData >*
      mutable_quick();
  const ::google::protobuf::RepeatedPtrField< ::QuickData >&
      quick() const;

  // optional .CardMesType type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::CardMesType type() const;
  void set_type(::CardMesType value);

  // @@protoc_insertion_point(class_scope:ViewCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::QuickData > quick_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  double lat_;
  double lon_;
  ::google::protobuf::int32 range_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_userhabit_2eproto_impl();
  friend void  protobuf_AddDesc_userhabit_2eproto_impl();
  friend void protobuf_AssignDesc_userhabit_2eproto();
  friend void protobuf_ShutdownFile_userhabit_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ViewCard> ViewCard_default_instance_;

// -------------------------------------------------------------------

class ChartCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChartCard) */ {
 public:
  ChartCard();
  virtual ~ChartCard();

  ChartCard(const ChartCard& from);

  inline ChartCard& operator=(const ChartCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartCard& default_instance();

  static const ChartCard* internal_default_instance();

  void Swap(ChartCard* other);

  // implements Message ----------------------------------------------

  inline ChartCard* New() const { return New(NULL); }

  ChartCard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartCard& from);
  void MergeFrom(const ChartCard& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChartCard* other);
  void UnsafeMergeFrom(const ChartCard& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 color = 2;
  void clear_color();
  static const int kColorFieldNumber = 2;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // optional int32 areastyle = 3;
  void clear_areastyle();
  static const int kAreastyleFieldNumber = 3;
  ::google::protobuf::int32 areastyle() const;
  void set_areastyle(::google::protobuf::int32 value);

  // optional int32 pointstyle = 4;
  void clear_pointstyle();
  static const int kPointstyleFieldNumber = 4;
  ::google::protobuf::int32 pointstyle() const;
  void set_pointstyle(::google::protobuf::int32 value);

  // optional double shallow = 5;
  void clear_shallow();
  static const int kShallowFieldNumber = 5;
  double shallow() const;
  void set_shallow(double value);

  // optional double safety = 6;
  void clear_safety();
  static const int kSafetyFieldNumber = 6;
  double safety() const;
  void set_safety(double value);

  // optional double depth = 7;
  void clear_depth();
  static const int kDepthFieldNumber = 7;
  double depth() const;
  void set_depth(double value);

  // optional double safetydepth = 8;
  void clear_safetydepth();
  static const int kSafetydepthFieldNumber = 8;
  double safetydepth() const;
  void set_safetydepth(double value);

  // optional int32 choicetype = 9;
  void clear_choicetype();
  static const int kChoicetypeFieldNumber = 9;
  ::google::protobuf::int32 choicetype() const;
  void set_choicetype(::google::protobuf::int32 value);

  // repeated int32 customdata = 10;
  int customdata_size() const;
  void clear_customdata();
  static const int kCustomdataFieldNumber = 10;
  ::google::protobuf::int32 customdata(int index) const;
  void set_customdata(int index, ::google::protobuf::int32 value);
  void add_customdata(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      customdata() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_customdata();

  // optional double safeset = 11;
  void clear_safeset();
  static const int kSafesetFieldNumber = 11;
  double safeset() const;
  void set_safeset(double value);

  // optional bool isFourshades = 12;
  void clear_isfourshades();
  static const int kIsFourshadesFieldNumber = 12;
  bool isfourshades() const;
  void set_isfourshades(bool value);

  // optional bool isUseSCAMIN = 13;
  void clear_isusescamin();
  static const int kIsUseSCAMINFieldNumber = 13;
  bool isusescamin() const;
  void set_isusescamin(bool value);

  // optional bool isMquality = 14;
  void clear_ismquality();
  static const int kIsMqualityFieldNumber = 14;
  bool ismquality() const;
  void set_ismquality(bool value);

  // optional bool isLocalLanguage = 15;
  void clear_islocallanguage();
  static const int kIsLocalLanguageFieldNumber = 15;
  bool islocallanguage() const;
  void set_islocallanguage(bool value);

  // optional .CardMesType type = 16;
  void clear_type();
  static const int kTypeFieldNumber = 16;
  ::CardMesType type() const;
  void set_type(::CardMesType value);

  // @@protoc_insertion_point(class_scope:ChartCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > customdata_;
  mutable int _customdata_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 areastyle_;
  double shallow_;
  double safety_;
  ::google::protobuf::int32 pointstyle_;
  ::google::protobuf::int32 choicetype_;
  double depth_;
  double safetydepth_;
  double safeset_;
  bool isfourshades_;
  bool isusescamin_;
  bool ismquality_;
  bool islocallanguage_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_userhabit_2eproto_impl();
  friend void  protobuf_AddDesc_userhabit_2eproto_impl();
  friend void protobuf_AssignDesc_userhabit_2eproto();
  friend void protobuf_ShutdownFile_userhabit_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChartCard> ChartCard_default_instance_;

// -------------------------------------------------------------------

class SystemCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SystemCard) */ {
 public:
  SystemCard();
  virtual ~SystemCard();

  SystemCard(const SystemCard& from);

  inline SystemCard& operator=(const SystemCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemCard& default_instance();

  static const SystemCard* internal_default_instance();

  void Swap(SystemCard* other);

  // implements Message ----------------------------------------------

  inline SystemCard* New() const { return New(NULL); }

  SystemCard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemCard& from);
  void MergeFrom(const SystemCard& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemCard* other);
  void UnsafeMergeFrom(const SystemCard& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional bool isGrid = 2;
  void clear_isgrid();
  static const int kIsGridFieldNumber = 2;
  bool isgrid() const;
  void set_isgrid(bool value);

  // optional bool isFlower = 3;
  void clear_isflower();
  static const int kIsFlowerFieldNumber = 3;
  bool isflower() const;
  void set_isflower(bool value);

  // optional bool isDimensional = 4;
  void clear_isdimensional();
  static const int kIsDimensionalFieldNumber = 4;
  bool isdimensional() const;
  void set_isdimensional(bool value);

  // optional bool isHOG = 5;
  void clear_ishog();
  static const int kIsHOGFieldNumber = 5;
  bool ishog() const;
  void set_ishog(bool value);

  // optional bool isTurnRate = 6;
  void clear_isturnrate();
  static const int kIsTurnRateFieldNumber = 6;
  bool isturnrate() const;
  void set_isturnrate(bool value);

  // optional int32 radiotype = 7;
  void clear_radiotype();
  static const int kRadiotypeFieldNumber = 7;
  ::google::protobuf::int32 radiotype() const;
  void set_radiotype(::google::protobuf::int32 value);

  // optional double voyage = 8;
  void clear_voyage();
  static const int kVoyageFieldNumber = 8;
  double voyage() const;
  void set_voyage(double value);

  // optional double time = 9;
  void clear_time();
  static const int kTimeFieldNumber = 9;
  double time() const;
  void set_time(double value);

  // optional int32 latlon = 10;
  void clear_latlon();
  static const int kLatlonFieldNumber = 10;
  ::google::protobuf::int32 latlon() const;
  void set_latlon(::google::protobuf::int32 value);

  // optional int32 speed = 11;
  void clear_speed();
  static const int kSpeedFieldNumber = 11;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // optional int32 dist = 12;
  void clear_dist();
  static const int kDistFieldNumber = 12;
  ::google::protobuf::int32 dist() const;
  void set_dist(::google::protobuf::int32 value);

  // optional int32 depth = 13;
  void clear_depth();
  static const int kDepthFieldNumber = 13;
  ::google::protobuf::int32 depth() const;
  void set_depth(::google::protobuf::int32 value);

  // repeated string displayset = 14;
  int displayset_size() const;
  void clear_displayset();
  static const int kDisplaysetFieldNumber = 14;
  const ::std::string& displayset(int index) const;
  ::std::string* mutable_displayset(int index);
  void set_displayset(int index, const ::std::string& value);
  void set_displayset(int index, const char* value);
  void set_displayset(int index, const char* value, size_t size);
  ::std::string* add_displayset();
  void add_displayset(const ::std::string& value);
  void add_displayset(const char* value);
  void add_displayset(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& displayset() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_displayset();

  // optional .CardMesType type = 15;
  void clear_type();
  static const int kTypeFieldNumber = 15;
  ::CardMesType type() const;
  void set_type(::CardMesType value);

  // @@protoc_insertion_point(class_scope:SystemCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> displayset_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  bool isgrid_;
  bool isflower_;
  bool isdimensional_;
  bool ishog_;
  bool isturnrate_;
  double voyage_;
  ::google::protobuf::int32 radiotype_;
  ::google::protobuf::int32 latlon_;
  double time_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 dist_;
  ::google::protobuf::int32 depth_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_userhabit_2eproto_impl();
  friend void  protobuf_AddDesc_userhabit_2eproto_impl();
  friend void protobuf_AssignDesc_userhabit_2eproto();
  friend void protobuf_ShutdownFile_userhabit_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SystemCard> SystemCard_default_instance_;

// -------------------------------------------------------------------

class DangerTargetCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DangerTargetCard) */ {
 public:
  DangerTargetCard();
  virtual ~DangerTargetCard();

  DangerTargetCard(const DangerTargetCard& from);

  inline DangerTargetCard& operator=(const DangerTargetCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DangerTargetCard& default_instance();

  static const DangerTargetCard* internal_default_instance();

  void Swap(DangerTargetCard* other);

  // implements Message ----------------------------------------------

  inline DangerTargetCard* New() const { return New(NULL); }

  DangerTargetCard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DangerTargetCard& from);
  void MergeFrom(const DangerTargetCard& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DangerTargetCard* other);
  void UnsafeMergeFrom(const DangerTargetCard& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 Target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  ::google::protobuf::int32 target() const;
  void set_target(::google::protobuf::int32 value);

  // optional double dist = 3;
  void clear_dist();
  static const int kDistFieldNumber = 3;
  double dist() const;
  void set_dist(double value);

  // optional double MaxCPA = 4;
  void clear_maxcpa();
  static const int kMaxCPAFieldNumber = 4;
  double maxcpa() const;
  void set_maxcpa(double value);

  // optional string MaxTCPA = 5;
  void clear_maxtcpa();
  static const int kMaxTCPAFieldNumber = 5;
  const ::std::string& maxtcpa() const;
  void set_maxtcpa(const ::std::string& value);
  void set_maxtcpa(const char* value);
  void set_maxtcpa(const char* value, size_t size);
  ::std::string* mutable_maxtcpa();
  ::std::string* release_maxtcpa();
  void set_allocated_maxtcpa(::std::string* maxtcpa);

  // optional int32 radiotype = 6;
  void clear_radiotype();
  static const int kRadiotypeFieldNumber = 6;
  ::google::protobuf::int32 radiotype() const;
  void set_radiotype(::google::protobuf::int32 value);

  // optional double MinSpeed = 7;
  void clear_minspeed();
  static const int kMinSpeedFieldNumber = 7;
  double minspeed() const;
  void set_minspeed(double value);

  // optional .CardMesType type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::CardMesType type() const;
  void set_type(::CardMesType value);

  // optional int32 pre_time = 9;
  void clear_pre_time();
  static const int kPreTimeFieldNumber = 9;
  ::google::protobuf::int32 pre_time() const;
  void set_pre_time(::google::protobuf::int32 value);

  // optional int64 pre_starTime = 10;
  void clear_pre_startime();
  static const int kPreStarTimeFieldNumber = 10;
  ::google::protobuf::int64 pre_startime() const;
  void set_pre_startime(::google::protobuf::int64 value);

  // optional int64 pre_endTime = 11;
  void clear_pre_endtime();
  static const int kPreEndTimeFieldNumber = 11;
  ::google::protobuf::int64 pre_endtime() const;
  void set_pre_endtime(::google::protobuf::int64 value);

  // optional .PreRadioType pre_check = 12;
  void clear_pre_check();
  static const int kPreCheckFieldNumber = 12;
  ::PreRadioType pre_check() const;
  void set_pre_check(::PreRadioType value);

  // @@protoc_insertion_point(class_scope:DangerTargetCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr maxtcpa_;
  double dist_;
  double maxcpa_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 radiotype_;
  double minspeed_;
  int type_;
  ::google::protobuf::int32 pre_time_;
  ::google::protobuf::int64 pre_startime_;
  ::google::protobuf::int64 pre_endtime_;
  int pre_check_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_userhabit_2eproto_impl();
  friend void  protobuf_AddDesc_userhabit_2eproto_impl();
  friend void protobuf_AssignDesc_userhabit_2eproto();
  friend void protobuf_ShutdownFile_userhabit_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DangerTargetCard> DangerTargetCard_default_instance_;

// -------------------------------------------------------------------

class TargetInfoCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TargetInfoCard) */ {
 public:
  TargetInfoCard();
  virtual ~TargetInfoCard();

  TargetInfoCard(const TargetInfoCard& from);

  inline TargetInfoCard& operator=(const TargetInfoCard& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetInfoCard& default_instance();

  static const TargetInfoCard* internal_default_instance();

  void Swap(TargetInfoCard* other);

  // implements Message ----------------------------------------------

  inline TargetInfoCard* New() const { return New(NULL); }

  TargetInfoCard* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetInfoCard& from);
  void MergeFrom(const TargetInfoCard& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetInfoCard* other);
  void UnsafeMergeFrom(const TargetInfoCard& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CardMesType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::CardMesType type() const;
  void set_type(::CardMesType value);

  // optional string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // repeated .TargetInfoData tardata = 3;
  int tardata_size() const;
  void clear_tardata();
  static const int kTardataFieldNumber = 3;
  const ::TargetInfoData& tardata(int index) const;
  ::TargetInfoData* mutable_tardata(int index);
  ::TargetInfoData* add_tardata();
  ::google::protobuf::RepeatedPtrField< ::TargetInfoData >*
      mutable_tardata();
  const ::google::protobuf::RepeatedPtrField< ::TargetInfoData >&
      tardata() const;

  // optional bool showHistor = 4;
  void clear_showhistor();
  static const int kShowHistorFieldNumber = 4;
  bool showhistor() const;
  void set_showhistor(bool value);

  // optional int32 trackgap = 5;
  void clear_trackgap();
  static const int kTrackgapFieldNumber = 5;
  ::google::protobuf::int32 trackgap() const;
  void set_trackgap(::google::protobuf::int32 value);

  // optional double trackgappoint = 6;
  void clear_trackgappoint();
  static const int kTrackgappointFieldNumber = 6;
  double trackgappoint() const;
  void set_trackgappoint(double value);

  // optional double trackspeed = 7;
  void clear_trackspeed();
  static const int kTrackspeedFieldNumber = 7;
  double trackspeed() const;
  void set_trackspeed(double value);

  // optional bool showship = 8;
  void clear_showship();
  static const int kShowshipFieldNumber = 8;
  bool showship() const;
  void set_showship(bool value);

  // optional bool showLigature = 9;
  void clear_showligature();
  static const int kShowLigatureFieldNumber = 9;
  bool showligature() const;
  void set_showligature(bool value);

  // optional bool count_time = 10;
  void clear_count_time();
  static const int kCountTimeFieldNumber = 10;
  bool count_time() const;
  void set_count_time(bool value);

  // optional int32 pointcount = 11;
  void clear_pointcount();
  static const int kPointcountFieldNumber = 11;
  ::google::protobuf::int32 pointcount() const;
  void set_pointcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TargetInfoCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TargetInfoData > tardata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  int type_;
  ::google::protobuf::int32 trackgap_;
  double trackgappoint_;
  double trackspeed_;
  bool showhistor_;
  bool showship_;
  bool showligature_;
  bool count_time_;
  ::google::protobuf::int32 pointcount_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_userhabit_2eproto_impl();
  friend void  protobuf_AddDesc_userhabit_2eproto_impl();
  friend void protobuf_AssignDesc_userhabit_2eproto();
  friend void protobuf_ShutdownFile_userhabit_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TargetInfoCard> TargetInfoCard_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QuickData

// optional string name = 1;
inline void QuickData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuickData::name() const {
  // @@protoc_insertion_point(field_get:QuickData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QuickData.name)
}
inline void QuickData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QuickData.name)
}
inline void QuickData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QuickData.name)
}
inline ::std::string* QuickData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:QuickData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuickData::release_name() {
  // @@protoc_insertion_point(field_release:QuickData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuickData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:QuickData.name)
}

// optional double lat = 2;
inline void QuickData::clear_lat() {
  lat_ = 0;
}
inline double QuickData::lat() const {
  // @@protoc_insertion_point(field_get:QuickData.lat)
  return lat_;
}
inline void QuickData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:QuickData.lat)
}

// optional double lon = 3;
inline void QuickData::clear_lon() {
  lon_ = 0;
}
inline double QuickData::lon() const {
  // @@protoc_insertion_point(field_get:QuickData.lon)
  return lon_;
}
inline void QuickData::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:QuickData.lon)
}

inline const QuickData* QuickData::internal_default_instance() {
  return &QuickData_default_instance_.get();
}
// -------------------------------------------------------------------

// TargetInfoData

// optional int32 Index = 1;
inline void TargetInfoData::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 TargetInfoData::index() const {
  // @@protoc_insertion_point(field_get:TargetInfoData.Index)
  return index_;
}
inline void TargetInfoData::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoData.Index)
}

// optional bool checked = 2;
inline void TargetInfoData::clear_checked() {
  checked_ = false;
}
inline bool TargetInfoData::checked() const {
  // @@protoc_insertion_point(field_get:TargetInfoData.checked)
  return checked_;
}
inline void TargetInfoData::set_checked(bool value) {
  
  checked_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoData.checked)
}

inline const TargetInfoData* TargetInfoData::internal_default_instance() {
  return &TargetInfoData_default_instance_.get();
}
// -------------------------------------------------------------------

// ViewCard

// optional string userid = 1;
inline void ViewCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ViewCard::userid() const {
  // @@protoc_insertion_point(field_get:ViewCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewCard.userid)
}
inline void ViewCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewCard.userid)
}
inline void ViewCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewCard.userid)
}
inline ::std::string* ViewCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:ViewCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ViewCard::release_userid() {
  // @@protoc_insertion_point(field_release:ViewCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ViewCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ViewCard.userid)
}

// optional double lat = 2;
inline void ViewCard::clear_lat() {
  lat_ = 0;
}
inline double ViewCard::lat() const {
  // @@protoc_insertion_point(field_get:ViewCard.lat)
  return lat_;
}
inline void ViewCard::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.lat)
}

// optional double lon = 3;
inline void ViewCard::clear_lon() {
  lon_ = 0;
}
inline double ViewCard::lon() const {
  // @@protoc_insertion_point(field_get:ViewCard.lon)
  return lon_;
}
inline void ViewCard::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.lon)
}

// optional int32 range = 4;
inline void ViewCard::clear_range() {
  range_ = 0;
}
inline ::google::protobuf::int32 ViewCard::range() const {
  // @@protoc_insertion_point(field_get:ViewCard.range)
  return range_;
}
inline void ViewCard::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.range)
}

// repeated .QuickData quick = 5;
inline int ViewCard::quick_size() const {
  return quick_.size();
}
inline void ViewCard::clear_quick() {
  quick_.Clear();
}
inline const ::QuickData& ViewCard::quick(int index) const {
  // @@protoc_insertion_point(field_get:ViewCard.quick)
  return quick_.Get(index);
}
inline ::QuickData* ViewCard::mutable_quick(int index) {
  // @@protoc_insertion_point(field_mutable:ViewCard.quick)
  return quick_.Mutable(index);
}
inline ::QuickData* ViewCard::add_quick() {
  // @@protoc_insertion_point(field_add:ViewCard.quick)
  return quick_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::QuickData >*
ViewCard::mutable_quick() {
  // @@protoc_insertion_point(field_mutable_list:ViewCard.quick)
  return &quick_;
}
inline const ::google::protobuf::RepeatedPtrField< ::QuickData >&
ViewCard::quick() const {
  // @@protoc_insertion_point(field_list:ViewCard.quick)
  return quick_;
}

// optional .CardMesType type = 6;
inline void ViewCard::clear_type() {
  type_ = 0;
}
inline ::CardMesType ViewCard::type() const {
  // @@protoc_insertion_point(field_get:ViewCard.type)
  return static_cast< ::CardMesType >(type_);
}
inline void ViewCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.type)
}

inline const ViewCard* ViewCard::internal_default_instance() {
  return &ViewCard_default_instance_.get();
}
// -------------------------------------------------------------------

// ChartCard

// optional string userid = 1;
inline void ChartCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChartCard::userid() const {
  // @@protoc_insertion_point(field_get:ChartCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChartCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChartCard.userid)
}
inline void ChartCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChartCard.userid)
}
inline void ChartCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChartCard.userid)
}
inline ::std::string* ChartCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:ChartCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChartCard::release_userid() {
  // @@protoc_insertion_point(field_release:ChartCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChartCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ChartCard.userid)
}

// optional int32 color = 2;
inline void ChartCard::clear_color() {
  color_ = 0;
}
inline ::google::protobuf::int32 ChartCard::color() const {
  // @@protoc_insertion_point(field_get:ChartCard.color)
  return color_;
}
inline void ChartCard::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.color)
}

// optional int32 areastyle = 3;
inline void ChartCard::clear_areastyle() {
  areastyle_ = 0;
}
inline ::google::protobuf::int32 ChartCard::areastyle() const {
  // @@protoc_insertion_point(field_get:ChartCard.areastyle)
  return areastyle_;
}
inline void ChartCard::set_areastyle(::google::protobuf::int32 value) {
  
  areastyle_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.areastyle)
}

// optional int32 pointstyle = 4;
inline void ChartCard::clear_pointstyle() {
  pointstyle_ = 0;
}
inline ::google::protobuf::int32 ChartCard::pointstyle() const {
  // @@protoc_insertion_point(field_get:ChartCard.pointstyle)
  return pointstyle_;
}
inline void ChartCard::set_pointstyle(::google::protobuf::int32 value) {
  
  pointstyle_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.pointstyle)
}

// optional double shallow = 5;
inline void ChartCard::clear_shallow() {
  shallow_ = 0;
}
inline double ChartCard::shallow() const {
  // @@protoc_insertion_point(field_get:ChartCard.shallow)
  return shallow_;
}
inline void ChartCard::set_shallow(double value) {
  
  shallow_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.shallow)
}

// optional double safety = 6;
inline void ChartCard::clear_safety() {
  safety_ = 0;
}
inline double ChartCard::safety() const {
  // @@protoc_insertion_point(field_get:ChartCard.safety)
  return safety_;
}
inline void ChartCard::set_safety(double value) {
  
  safety_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.safety)
}

// optional double depth = 7;
inline void ChartCard::clear_depth() {
  depth_ = 0;
}
inline double ChartCard::depth() const {
  // @@protoc_insertion_point(field_get:ChartCard.depth)
  return depth_;
}
inline void ChartCard::set_depth(double value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.depth)
}

// optional double safetydepth = 8;
inline void ChartCard::clear_safetydepth() {
  safetydepth_ = 0;
}
inline double ChartCard::safetydepth() const {
  // @@protoc_insertion_point(field_get:ChartCard.safetydepth)
  return safetydepth_;
}
inline void ChartCard::set_safetydepth(double value) {
  
  safetydepth_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.safetydepth)
}

// optional int32 choicetype = 9;
inline void ChartCard::clear_choicetype() {
  choicetype_ = 0;
}
inline ::google::protobuf::int32 ChartCard::choicetype() const {
  // @@protoc_insertion_point(field_get:ChartCard.choicetype)
  return choicetype_;
}
inline void ChartCard::set_choicetype(::google::protobuf::int32 value) {
  
  choicetype_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.choicetype)
}

// repeated int32 customdata = 10;
inline int ChartCard::customdata_size() const {
  return customdata_.size();
}
inline void ChartCard::clear_customdata() {
  customdata_.Clear();
}
inline ::google::protobuf::int32 ChartCard::customdata(int index) const {
  // @@protoc_insertion_point(field_get:ChartCard.customdata)
  return customdata_.Get(index);
}
inline void ChartCard::set_customdata(int index, ::google::protobuf::int32 value) {
  customdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChartCard.customdata)
}
inline void ChartCard::add_customdata(::google::protobuf::int32 value) {
  customdata_.Add(value);
  // @@protoc_insertion_point(field_add:ChartCard.customdata)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChartCard::customdata() const {
  // @@protoc_insertion_point(field_list:ChartCard.customdata)
  return customdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChartCard::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:ChartCard.customdata)
  return &customdata_;
}

// optional double safeset = 11;
inline void ChartCard::clear_safeset() {
  safeset_ = 0;
}
inline double ChartCard::safeset() const {
  // @@protoc_insertion_point(field_get:ChartCard.safeset)
  return safeset_;
}
inline void ChartCard::set_safeset(double value) {
  
  safeset_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.safeset)
}

// optional bool isFourshades = 12;
inline void ChartCard::clear_isfourshades() {
  isfourshades_ = false;
}
inline bool ChartCard::isfourshades() const {
  // @@protoc_insertion_point(field_get:ChartCard.isFourshades)
  return isfourshades_;
}
inline void ChartCard::set_isfourshades(bool value) {
  
  isfourshades_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isFourshades)
}

// optional bool isUseSCAMIN = 13;
inline void ChartCard::clear_isusescamin() {
  isusescamin_ = false;
}
inline bool ChartCard::isusescamin() const {
  // @@protoc_insertion_point(field_get:ChartCard.isUseSCAMIN)
  return isusescamin_;
}
inline void ChartCard::set_isusescamin(bool value) {
  
  isusescamin_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isUseSCAMIN)
}

// optional bool isMquality = 14;
inline void ChartCard::clear_ismquality() {
  ismquality_ = false;
}
inline bool ChartCard::ismquality() const {
  // @@protoc_insertion_point(field_get:ChartCard.isMquality)
  return ismquality_;
}
inline void ChartCard::set_ismquality(bool value) {
  
  ismquality_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isMquality)
}

// optional bool isLocalLanguage = 15;
inline void ChartCard::clear_islocallanguage() {
  islocallanguage_ = false;
}
inline bool ChartCard::islocallanguage() const {
  // @@protoc_insertion_point(field_get:ChartCard.isLocalLanguage)
  return islocallanguage_;
}
inline void ChartCard::set_islocallanguage(bool value) {
  
  islocallanguage_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isLocalLanguage)
}

// optional .CardMesType type = 16;
inline void ChartCard::clear_type() {
  type_ = 0;
}
inline ::CardMesType ChartCard::type() const {
  // @@protoc_insertion_point(field_get:ChartCard.type)
  return static_cast< ::CardMesType >(type_);
}
inline void ChartCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.type)
}

inline const ChartCard* ChartCard::internal_default_instance() {
  return &ChartCard_default_instance_.get();
}
// -------------------------------------------------------------------

// SystemCard

// optional string userid = 1;
inline void SystemCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SystemCard::userid() const {
  // @@protoc_insertion_point(field_get:SystemCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SystemCard.userid)
}
inline void SystemCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SystemCard.userid)
}
inline void SystemCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SystemCard.userid)
}
inline ::std::string* SystemCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:SystemCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SystemCard::release_userid() {
  // @@protoc_insertion_point(field_release:SystemCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SystemCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:SystemCard.userid)
}

// optional bool isGrid = 2;
inline void SystemCard::clear_isgrid() {
  isgrid_ = false;
}
inline bool SystemCard::isgrid() const {
  // @@protoc_insertion_point(field_get:SystemCard.isGrid)
  return isgrid_;
}
inline void SystemCard::set_isgrid(bool value) {
  
  isgrid_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isGrid)
}

// optional bool isFlower = 3;
inline void SystemCard::clear_isflower() {
  isflower_ = false;
}
inline bool SystemCard::isflower() const {
  // @@protoc_insertion_point(field_get:SystemCard.isFlower)
  return isflower_;
}
inline void SystemCard::set_isflower(bool value) {
  
  isflower_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isFlower)
}

// optional bool isDimensional = 4;
inline void SystemCard::clear_isdimensional() {
  isdimensional_ = false;
}
inline bool SystemCard::isdimensional() const {
  // @@protoc_insertion_point(field_get:SystemCard.isDimensional)
  return isdimensional_;
}
inline void SystemCard::set_isdimensional(bool value) {
  
  isdimensional_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isDimensional)
}

// optional bool isHOG = 5;
inline void SystemCard::clear_ishog() {
  ishog_ = false;
}
inline bool SystemCard::ishog() const {
  // @@protoc_insertion_point(field_get:SystemCard.isHOG)
  return ishog_;
}
inline void SystemCard::set_ishog(bool value) {
  
  ishog_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isHOG)
}

// optional bool isTurnRate = 6;
inline void SystemCard::clear_isturnrate() {
  isturnrate_ = false;
}
inline bool SystemCard::isturnrate() const {
  // @@protoc_insertion_point(field_get:SystemCard.isTurnRate)
  return isturnrate_;
}
inline void SystemCard::set_isturnrate(bool value) {
  
  isturnrate_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isTurnRate)
}

// optional int32 radiotype = 7;
inline void SystemCard::clear_radiotype() {
  radiotype_ = 0;
}
inline ::google::protobuf::int32 SystemCard::radiotype() const {
  // @@protoc_insertion_point(field_get:SystemCard.radiotype)
  return radiotype_;
}
inline void SystemCard::set_radiotype(::google::protobuf::int32 value) {
  
  radiotype_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.radiotype)
}

// optional double voyage = 8;
inline void SystemCard::clear_voyage() {
  voyage_ = 0;
}
inline double SystemCard::voyage() const {
  // @@protoc_insertion_point(field_get:SystemCard.voyage)
  return voyage_;
}
inline void SystemCard::set_voyage(double value) {
  
  voyage_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.voyage)
}

// optional double time = 9;
inline void SystemCard::clear_time() {
  time_ = 0;
}
inline double SystemCard::time() const {
  // @@protoc_insertion_point(field_get:SystemCard.time)
  return time_;
}
inline void SystemCard::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.time)
}

// optional int32 latlon = 10;
inline void SystemCard::clear_latlon() {
  latlon_ = 0;
}
inline ::google::protobuf::int32 SystemCard::latlon() const {
  // @@protoc_insertion_point(field_get:SystemCard.latlon)
  return latlon_;
}
inline void SystemCard::set_latlon(::google::protobuf::int32 value) {
  
  latlon_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.latlon)
}

// optional int32 speed = 11;
inline void SystemCard::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 SystemCard::speed() const {
  // @@protoc_insertion_point(field_get:SystemCard.speed)
  return speed_;
}
inline void SystemCard::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.speed)
}

// optional int32 dist = 12;
inline void SystemCard::clear_dist() {
  dist_ = 0;
}
inline ::google::protobuf::int32 SystemCard::dist() const {
  // @@protoc_insertion_point(field_get:SystemCard.dist)
  return dist_;
}
inline void SystemCard::set_dist(::google::protobuf::int32 value) {
  
  dist_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.dist)
}

// optional int32 depth = 13;
inline void SystemCard::clear_depth() {
  depth_ = 0;
}
inline ::google::protobuf::int32 SystemCard::depth() const {
  // @@protoc_insertion_point(field_get:SystemCard.depth)
  return depth_;
}
inline void SystemCard::set_depth(::google::protobuf::int32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.depth)
}

// repeated string displayset = 14;
inline int SystemCard::displayset_size() const {
  return displayset_.size();
}
inline void SystemCard::clear_displayset() {
  displayset_.Clear();
}
inline const ::std::string& SystemCard::displayset(int index) const {
  // @@protoc_insertion_point(field_get:SystemCard.displayset)
  return displayset_.Get(index);
}
inline ::std::string* SystemCard::mutable_displayset(int index) {
  // @@protoc_insertion_point(field_mutable:SystemCard.displayset)
  return displayset_.Mutable(index);
}
inline void SystemCard::set_displayset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SystemCard.displayset)
  displayset_.Mutable(index)->assign(value);
}
inline void SystemCard::set_displayset(int index, const char* value) {
  displayset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SystemCard.displayset)
}
inline void SystemCard::set_displayset(int index, const char* value, size_t size) {
  displayset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SystemCard.displayset)
}
inline ::std::string* SystemCard::add_displayset() {
  // @@protoc_insertion_point(field_add_mutable:SystemCard.displayset)
  return displayset_.Add();
}
inline void SystemCard::add_displayset(const ::std::string& value) {
  displayset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SystemCard.displayset)
}
inline void SystemCard::add_displayset(const char* value) {
  displayset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SystemCard.displayset)
}
inline void SystemCard::add_displayset(const char* value, size_t size) {
  displayset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SystemCard.displayset)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemCard::displayset() const {
  // @@protoc_insertion_point(field_list:SystemCard.displayset)
  return displayset_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SystemCard::mutable_displayset() {
  // @@protoc_insertion_point(field_mutable_list:SystemCard.displayset)
  return &displayset_;
}

// optional .CardMesType type = 15;
inline void SystemCard::clear_type() {
  type_ = 0;
}
inline ::CardMesType SystemCard::type() const {
  // @@protoc_insertion_point(field_get:SystemCard.type)
  return static_cast< ::CardMesType >(type_);
}
inline void SystemCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.type)
}

inline const SystemCard* SystemCard::internal_default_instance() {
  return &SystemCard_default_instance_.get();
}
// -------------------------------------------------------------------

// DangerTargetCard

// optional string userid = 1;
inline void DangerTargetCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DangerTargetCard::userid() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DangerTargetCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DangerTargetCard.userid)
}
inline void DangerTargetCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DangerTargetCard.userid)
}
inline void DangerTargetCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DangerTargetCard.userid)
}
inline ::std::string* DangerTargetCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:DangerTargetCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DangerTargetCard::release_userid() {
  // @@protoc_insertion_point(field_release:DangerTargetCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DangerTargetCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:DangerTargetCard.userid)
}

// optional int32 Target = 2;
inline void DangerTargetCard::clear_target() {
  target_ = 0;
}
inline ::google::protobuf::int32 DangerTargetCard::target() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.Target)
  return target_;
}
inline void DangerTargetCard::set_target(::google::protobuf::int32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.Target)
}

// optional double dist = 3;
inline void DangerTargetCard::clear_dist() {
  dist_ = 0;
}
inline double DangerTargetCard::dist() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.dist)
  return dist_;
}
inline void DangerTargetCard::set_dist(double value) {
  
  dist_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.dist)
}

// optional double MaxCPA = 4;
inline void DangerTargetCard::clear_maxcpa() {
  maxcpa_ = 0;
}
inline double DangerTargetCard::maxcpa() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.MaxCPA)
  return maxcpa_;
}
inline void DangerTargetCard::set_maxcpa(double value) {
  
  maxcpa_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.MaxCPA)
}

// optional string MaxTCPA = 5;
inline void DangerTargetCard::clear_maxtcpa() {
  maxtcpa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DangerTargetCard::maxtcpa() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.MaxTCPA)
  return maxtcpa_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DangerTargetCard::set_maxtcpa(const ::std::string& value) {
  
  maxtcpa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DangerTargetCard.MaxTCPA)
}
inline void DangerTargetCard::set_maxtcpa(const char* value) {
  
  maxtcpa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DangerTargetCard.MaxTCPA)
}
inline void DangerTargetCard::set_maxtcpa(const char* value, size_t size) {
  
  maxtcpa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DangerTargetCard.MaxTCPA)
}
inline ::std::string* DangerTargetCard::mutable_maxtcpa() {
  
  // @@protoc_insertion_point(field_mutable:DangerTargetCard.MaxTCPA)
  return maxtcpa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DangerTargetCard::release_maxtcpa() {
  // @@protoc_insertion_point(field_release:DangerTargetCard.MaxTCPA)
  
  return maxtcpa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DangerTargetCard::set_allocated_maxtcpa(::std::string* maxtcpa) {
  if (maxtcpa != NULL) {
    
  } else {
    
  }
  maxtcpa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxtcpa);
  // @@protoc_insertion_point(field_set_allocated:DangerTargetCard.MaxTCPA)
}

// optional int32 radiotype = 6;
inline void DangerTargetCard::clear_radiotype() {
  radiotype_ = 0;
}
inline ::google::protobuf::int32 DangerTargetCard::radiotype() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.radiotype)
  return radiotype_;
}
inline void DangerTargetCard::set_radiotype(::google::protobuf::int32 value) {
  
  radiotype_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.radiotype)
}

// optional double MinSpeed = 7;
inline void DangerTargetCard::clear_minspeed() {
  minspeed_ = 0;
}
inline double DangerTargetCard::minspeed() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.MinSpeed)
  return minspeed_;
}
inline void DangerTargetCard::set_minspeed(double value) {
  
  minspeed_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.MinSpeed)
}

// optional .CardMesType type = 8;
inline void DangerTargetCard::clear_type() {
  type_ = 0;
}
inline ::CardMesType DangerTargetCard::type() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.type)
  return static_cast< ::CardMesType >(type_);
}
inline void DangerTargetCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.type)
}

// optional int32 pre_time = 9;
inline void DangerTargetCard::clear_pre_time() {
  pre_time_ = 0;
}
inline ::google::protobuf::int32 DangerTargetCard::pre_time() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_time)
  return pre_time_;
}
inline void DangerTargetCard::set_pre_time(::google::protobuf::int32 value) {
  
  pre_time_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_time)
}

// optional int64 pre_starTime = 10;
inline void DangerTargetCard::clear_pre_startime() {
  pre_startime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DangerTargetCard::pre_startime() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_starTime)
  return pre_startime_;
}
inline void DangerTargetCard::set_pre_startime(::google::protobuf::int64 value) {
  
  pre_startime_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_starTime)
}

// optional int64 pre_endTime = 11;
inline void DangerTargetCard::clear_pre_endtime() {
  pre_endtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DangerTargetCard::pre_endtime() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_endTime)
  return pre_endtime_;
}
inline void DangerTargetCard::set_pre_endtime(::google::protobuf::int64 value) {
  
  pre_endtime_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_endTime)
}

// optional .PreRadioType pre_check = 12;
inline void DangerTargetCard::clear_pre_check() {
  pre_check_ = 0;
}
inline ::PreRadioType DangerTargetCard::pre_check() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_check)
  return static_cast< ::PreRadioType >(pre_check_);
}
inline void DangerTargetCard::set_pre_check(::PreRadioType value) {
  
  pre_check_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_check)
}

inline const DangerTargetCard* DangerTargetCard::internal_default_instance() {
  return &DangerTargetCard_default_instance_.get();
}
// -------------------------------------------------------------------

// TargetInfoCard

// optional .CardMesType type = 1;
inline void TargetInfoCard::clear_type() {
  type_ = 0;
}
inline ::CardMesType TargetInfoCard::type() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.type)
  return static_cast< ::CardMesType >(type_);
}
inline void TargetInfoCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.type)
}

// optional string userid = 2;
inline void TargetInfoCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetInfoCard::userid() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetInfoCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetInfoCard.userid)
}
inline void TargetInfoCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetInfoCard.userid)
}
inline void TargetInfoCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetInfoCard.userid)
}
inline ::std::string* TargetInfoCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:TargetInfoCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetInfoCard::release_userid() {
  // @@protoc_insertion_point(field_release:TargetInfoCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetInfoCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:TargetInfoCard.userid)
}

// repeated .TargetInfoData tardata = 3;
inline int TargetInfoCard::tardata_size() const {
  return tardata_.size();
}
inline void TargetInfoCard::clear_tardata() {
  tardata_.Clear();
}
inline const ::TargetInfoData& TargetInfoCard::tardata(int index) const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.tardata)
  return tardata_.Get(index);
}
inline ::TargetInfoData* TargetInfoCard::mutable_tardata(int index) {
  // @@protoc_insertion_point(field_mutable:TargetInfoCard.tardata)
  return tardata_.Mutable(index);
}
inline ::TargetInfoData* TargetInfoCard::add_tardata() {
  // @@protoc_insertion_point(field_add:TargetInfoCard.tardata)
  return tardata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TargetInfoData >*
TargetInfoCard::mutable_tardata() {
  // @@protoc_insertion_point(field_mutable_list:TargetInfoCard.tardata)
  return &tardata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TargetInfoData >&
TargetInfoCard::tardata() const {
  // @@protoc_insertion_point(field_list:TargetInfoCard.tardata)
  return tardata_;
}

// optional bool showHistor = 4;
inline void TargetInfoCard::clear_showhistor() {
  showhistor_ = false;
}
inline bool TargetInfoCard::showhistor() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.showHistor)
  return showhistor_;
}
inline void TargetInfoCard::set_showhistor(bool value) {
  
  showhistor_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.showHistor)
}

// optional int32 trackgap = 5;
inline void TargetInfoCard::clear_trackgap() {
  trackgap_ = 0;
}
inline ::google::protobuf::int32 TargetInfoCard::trackgap() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.trackgap)
  return trackgap_;
}
inline void TargetInfoCard::set_trackgap(::google::protobuf::int32 value) {
  
  trackgap_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.trackgap)
}

// optional double trackgappoint = 6;
inline void TargetInfoCard::clear_trackgappoint() {
  trackgappoint_ = 0;
}
inline double TargetInfoCard::trackgappoint() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.trackgappoint)
  return trackgappoint_;
}
inline void TargetInfoCard::set_trackgappoint(double value) {
  
  trackgappoint_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.trackgappoint)
}

// optional double trackspeed = 7;
inline void TargetInfoCard::clear_trackspeed() {
  trackspeed_ = 0;
}
inline double TargetInfoCard::trackspeed() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.trackspeed)
  return trackspeed_;
}
inline void TargetInfoCard::set_trackspeed(double value) {
  
  trackspeed_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.trackspeed)
}

// optional bool showship = 8;
inline void TargetInfoCard::clear_showship() {
  showship_ = false;
}
inline bool TargetInfoCard::showship() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.showship)
  return showship_;
}
inline void TargetInfoCard::set_showship(bool value) {
  
  showship_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.showship)
}

// optional bool showLigature = 9;
inline void TargetInfoCard::clear_showligature() {
  showligature_ = false;
}
inline bool TargetInfoCard::showligature() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.showLigature)
  return showligature_;
}
inline void TargetInfoCard::set_showligature(bool value) {
  
  showligature_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.showLigature)
}

// optional bool count_time = 10;
inline void TargetInfoCard::clear_count_time() {
  count_time_ = false;
}
inline bool TargetInfoCard::count_time() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.count_time)
  return count_time_;
}
inline void TargetInfoCard::set_count_time(bool value) {
  
  count_time_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.count_time)
}

// optional int32 pointcount = 11;
inline void TargetInfoCard::clear_pointcount() {
  pointcount_ = 0;
}
inline ::google::protobuf::int32 TargetInfoCard::pointcount() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.pointcount)
  return pointcount_;
}
inline void TargetInfoCard::set_pointcount(::google::protobuf::int32 value) {
  
  pointcount_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.pointcount)
}

inline const TargetInfoCard* TargetInfoCard::internal_default_instance() {
  return &TargetInfoCard_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::CardMesType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CardMesType>() {
  return ::CardMesType_descriptor();
}
template <> struct is_proto_enum< ::PreRadioType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PreRadioType>() {
  return ::PreRadioType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_userhabit_2eproto__INCLUDED
