// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgBerthWatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgBerthWatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgBerthWatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgBerthWatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgBerthWatchRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgBerthWatchRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgBerthWatch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgBerthWatch_2eproto() {
  protobuf_AddDesc_hgBerthWatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgBerthWatch.proto");
  GOOGLE_CHECK(file != NULL);
  hgBerthWatch_descriptor_ = file->message_type(0);
  static const int hgBerthWatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgBerthWatch, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgBerthWatch, berthwatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgBerthWatch, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgBerthWatch, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgBerthWatch, lon_),
  };
  hgBerthWatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgBerthWatch_descriptor_,
      hgBerthWatch::internal_default_instance(),
      hgBerthWatch_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgBerthWatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgBerthWatch, _internal_metadata_));
  hgBerthWatchRepsone_descriptor_ = file->message_type(1);
  static const int hgBerthWatchRepsone_offsets_[1] = {
  };
  hgBerthWatchRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgBerthWatchRepsone_descriptor_,
      hgBerthWatchRepsone::internal_default_instance(),
      hgBerthWatchRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgBerthWatchRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgBerthWatchRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgBerthWatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgBerthWatch_descriptor_, hgBerthWatch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgBerthWatchRepsone_descriptor_, hgBerthWatchRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgBerthWatch_2eproto() {
  hgBerthWatch_default_instance_.Shutdown();
  delete hgBerthWatch_reflection_;
  hgBerthWatchRepsone_default_instance_.Shutdown();
  delete hgBerthWatchRepsone_reflection_;
}

void protobuf_InitDefaults_hgBerthWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgBerthWatch_default_instance_.DefaultConstruct();
  hgBerthWatchRepsone_default_instance_.DefaultConstruct();
  hgBerthWatch_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgBerthWatchRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgBerthWatch_2eproto_once_);
void protobuf_InitDefaults_hgBerthWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgBerthWatch_2eproto_once_,
                 &protobuf_InitDefaults_hgBerthWatch_2eproto_impl);
}
void protobuf_AddDesc_hgBerthWatch_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgBerthWatch_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022hgBerthWatch.proto\"\\\n\014hgBerthWatch\022\014\n\004"
    "MMSI\030\001 \001(\t\022\022\n\nBerthWatch\030\002 \001(\010\022\020\n\010Distan"
    "ce\030\003 \001(\001\022\013\n\003Lat\030\004 \001(\001\022\013\n\003Lon\030\005 \001(\001\"\025\n\023hg"
    "BerthWatchRepsoneb\006proto3", 145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgBerthWatch.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgBerthWatch_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgBerthWatch_2eproto_once_);
void protobuf_AddDesc_hgBerthWatch_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgBerthWatch_2eproto_once_,
                 &protobuf_AddDesc_hgBerthWatch_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgBerthWatch_2eproto {
  StaticDescriptorInitializer_hgBerthWatch_2eproto() {
    protobuf_AddDesc_hgBerthWatch_2eproto();
  }
} static_descriptor_initializer_hgBerthWatch_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgBerthWatch::kMMSIFieldNumber;
const int hgBerthWatch::kBerthWatchFieldNumber;
const int hgBerthWatch::kDistanceFieldNumber;
const int hgBerthWatch::kLatFieldNumber;
const int hgBerthWatch::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgBerthWatch::hgBerthWatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgBerthWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgBerthWatch)
}

void hgBerthWatch::InitAsDefaultInstance() {
}

hgBerthWatch::hgBerthWatch(const hgBerthWatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgBerthWatch)
}

void hgBerthWatch::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&distance_, 0, reinterpret_cast<char*>(&berthwatch_) -
    reinterpret_cast<char*>(&distance_) + sizeof(berthwatch_));
  _cached_size_ = 0;
}

hgBerthWatch::~hgBerthWatch() {
  // @@protoc_insertion_point(destructor:hgBerthWatch)
  SharedDtor();
}

void hgBerthWatch::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgBerthWatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgBerthWatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgBerthWatch_descriptor_;
}

const hgBerthWatch& hgBerthWatch::default_instance() {
  protobuf_InitDefaults_hgBerthWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgBerthWatch> hgBerthWatch_default_instance_;

hgBerthWatch* hgBerthWatch::New(::google::protobuf::Arena* arena) const {
  hgBerthWatch* n = new hgBerthWatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgBerthWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:hgBerthWatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgBerthWatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgBerthWatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(distance_, berthwatch_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgBerthWatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgBerthWatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgBerthWatch.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BerthWatch;
        break;
      }

      // optional bool BerthWatch = 2;
      case 2: {
        if (tag == 16) {
         parse_BerthWatch:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &berthwatch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_Distance;
        break;
      }

      // optional double Distance = 3;
      case 3: {
        if (tag == 25) {
         parse_Distance:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Lat;
        break;
      }

      // optional double Lat = 4;
      case 4: {
        if (tag == 33) {
         parse_Lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Lon;
        break;
      }

      // optional double Lon = 5;
      case 5: {
        if (tag == 41) {
         parse_Lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgBerthWatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgBerthWatch)
  return false;
#undef DO_
}

void hgBerthWatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgBerthWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgBerthWatch.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool BerthWatch = 2;
  if (this->berthwatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->berthwatch(), output);
  }

  // optional double Distance = 3;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->distance(), output);
  }

  // optional double Lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // optional double Lon = 5;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgBerthWatch)
}

::google::protobuf::uint8* hgBerthWatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgBerthWatch)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgBerthWatch.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool BerthWatch = 2;
  if (this->berthwatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->berthwatch(), target);
  }

  // optional double Distance = 3;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->distance(), target);
  }

  // optional double Lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // optional double Lon = 5;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgBerthWatch)
  return target;
}

size_t hgBerthWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgBerthWatch)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool BerthWatch = 2;
  if (this->berthwatch() != 0) {
    total_size += 1 + 1;
  }

  // optional double Distance = 3;
  if (this->distance() != 0) {
    total_size += 1 + 8;
  }

  // optional double Lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double Lon = 5;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgBerthWatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgBerthWatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgBerthWatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgBerthWatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgBerthWatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgBerthWatch)
    UnsafeMergeFrom(*source);
  }
}

void hgBerthWatch::MergeFrom(const hgBerthWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgBerthWatch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgBerthWatch::UnsafeMergeFrom(const hgBerthWatch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.berthwatch() != 0) {
    set_berthwatch(from.berthwatch());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void hgBerthWatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgBerthWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgBerthWatch::CopyFrom(const hgBerthWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgBerthWatch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgBerthWatch::IsInitialized() const {

  return true;
}

void hgBerthWatch::Swap(hgBerthWatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgBerthWatch::InternalSwap(hgBerthWatch* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(berthwatch_, other->berthwatch_);
  std::swap(distance_, other->distance_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgBerthWatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgBerthWatch_descriptor_;
  metadata.reflection = hgBerthWatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgBerthWatch

// optional string MMSI = 1;
void hgBerthWatch::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgBerthWatch::mmsi() const {
  // @@protoc_insertion_point(field_get:hgBerthWatch.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgBerthWatch::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgBerthWatch.MMSI)
}
void hgBerthWatch::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgBerthWatch.MMSI)
}
void hgBerthWatch::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgBerthWatch.MMSI)
}
::std::string* hgBerthWatch::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgBerthWatch.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgBerthWatch::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgBerthWatch.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgBerthWatch::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgBerthWatch.MMSI)
}

// optional bool BerthWatch = 2;
void hgBerthWatch::clear_berthwatch() {
  berthwatch_ = false;
}
bool hgBerthWatch::berthwatch() const {
  // @@protoc_insertion_point(field_get:hgBerthWatch.BerthWatch)
  return berthwatch_;
}
void hgBerthWatch::set_berthwatch(bool value) {
  
  berthwatch_ = value;
  // @@protoc_insertion_point(field_set:hgBerthWatch.BerthWatch)
}

// optional double Distance = 3;
void hgBerthWatch::clear_distance() {
  distance_ = 0;
}
double hgBerthWatch::distance() const {
  // @@protoc_insertion_point(field_get:hgBerthWatch.Distance)
  return distance_;
}
void hgBerthWatch::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:hgBerthWatch.Distance)
}

// optional double Lat = 4;
void hgBerthWatch::clear_lat() {
  lat_ = 0;
}
double hgBerthWatch::lat() const {
  // @@protoc_insertion_point(field_get:hgBerthWatch.Lat)
  return lat_;
}
void hgBerthWatch::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgBerthWatch.Lat)
}

// optional double Lon = 5;
void hgBerthWatch::clear_lon() {
  lon_ = 0;
}
double hgBerthWatch::lon() const {
  // @@protoc_insertion_point(field_get:hgBerthWatch.Lon)
  return lon_;
}
void hgBerthWatch::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgBerthWatch.Lon)
}

inline const hgBerthWatch* hgBerthWatch::internal_default_instance() {
  return &hgBerthWatch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgBerthWatchRepsone::hgBerthWatchRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgBerthWatch_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgBerthWatchRepsone)
}

void hgBerthWatchRepsone::InitAsDefaultInstance() {
}

hgBerthWatchRepsone::hgBerthWatchRepsone(const hgBerthWatchRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgBerthWatchRepsone)
}

void hgBerthWatchRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgBerthWatchRepsone::~hgBerthWatchRepsone() {
  // @@protoc_insertion_point(destructor:hgBerthWatchRepsone)
  SharedDtor();
}

void hgBerthWatchRepsone::SharedDtor() {
}

void hgBerthWatchRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgBerthWatchRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgBerthWatchRepsone_descriptor_;
}

const hgBerthWatchRepsone& hgBerthWatchRepsone::default_instance() {
  protobuf_InitDefaults_hgBerthWatch_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgBerthWatchRepsone> hgBerthWatchRepsone_default_instance_;

hgBerthWatchRepsone* hgBerthWatchRepsone::New(::google::protobuf::Arena* arena) const {
  hgBerthWatchRepsone* n = new hgBerthWatchRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgBerthWatchRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgBerthWatchRepsone)
}

bool hgBerthWatchRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgBerthWatchRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgBerthWatchRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgBerthWatchRepsone)
  return false;
#undef DO_
}

void hgBerthWatchRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgBerthWatchRepsone)
  // @@protoc_insertion_point(serialize_end:hgBerthWatchRepsone)
}

::google::protobuf::uint8* hgBerthWatchRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgBerthWatchRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgBerthWatchRepsone)
  return target;
}

size_t hgBerthWatchRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgBerthWatchRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgBerthWatchRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgBerthWatchRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgBerthWatchRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgBerthWatchRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgBerthWatchRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgBerthWatchRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgBerthWatchRepsone::MergeFrom(const hgBerthWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgBerthWatchRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgBerthWatchRepsone::UnsafeMergeFrom(const hgBerthWatchRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgBerthWatchRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgBerthWatchRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgBerthWatchRepsone::CopyFrom(const hgBerthWatchRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgBerthWatchRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgBerthWatchRepsone::IsInitialized() const {

  return true;
}

void hgBerthWatchRepsone::Swap(hgBerthWatchRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgBerthWatchRepsone::InternalSwap(hgBerthWatchRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgBerthWatchRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgBerthWatchRepsone_descriptor_;
  metadata.reflection = hgBerthWatchRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgBerthWatchRepsone

inline const hgBerthWatchRepsone* hgBerthWatchRepsone::internal_default_instance() {
  return &hgBerthWatchRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
