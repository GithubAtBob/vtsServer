// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IdentityPack.proto

#ifndef PROTOBUF_IdentityPack_2eproto__INCLUDED
#define PROTOBUF_IdentityPack_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_IdentityPack_2eproto();
void protobuf_InitDefaults_IdentityPack_2eproto();
void protobuf_AssignDesc_IdentityPack_2eproto();
void protobuf_ShutdownFile_IdentityPack_2eproto();

class IdentityPack;

enum IdentityType {
  UserLogin = 0,
  ServerLogin = 1,
  UserLogout = 2,
  ServerLogout = 3,
  ShipLogin = 4,
  ShipLogout = 5,
  IdentityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IdentityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IdentityType_IsValid(int value);
const IdentityType IdentityType_MIN = UserLogin;
const IdentityType IdentityType_MAX = ShipLogout;
const int IdentityType_ARRAYSIZE = IdentityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IdentityType_descriptor();
inline const ::std::string& IdentityType_Name(IdentityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IdentityType_descriptor(), value);
}
inline bool IdentityType_Parse(
    const ::std::string& name, IdentityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IdentityType>(
    IdentityType_descriptor(), name, value);
}
// ===================================================================

class IdentityPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IdentityPack) */ {
 public:
  IdentityPack();
  virtual ~IdentityPack();

  IdentityPack(const IdentityPack& from);

  inline IdentityPack& operator=(const IdentityPack& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentityPack& default_instance();

  static const IdentityPack* internal_default_instance();

  void Swap(IdentityPack* other);

  // implements Message ----------------------------------------------

  inline IdentityPack* New() const { return New(NULL); }

  IdentityPack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IdentityPack& from);
  void MergeFrom(const IdentityPack& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IdentityPack* other);
  void UnsafeMergeFrom(const IdentityPack& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:IdentityPack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_IdentityPack_2eproto_impl();
  friend void  protobuf_AddDesc_IdentityPack_2eproto_impl();
  friend void protobuf_AssignDesc_IdentityPack_2eproto();
  friend void protobuf_ShutdownFile_IdentityPack_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<IdentityPack> IdentityPack_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// IdentityPack

// optional string name = 1;
inline void IdentityPack::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityPack::name() const {
  // @@protoc_insertion_point(field_get:IdentityPack.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityPack::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityPack.name)
}
inline void IdentityPack::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityPack.name)
}
inline void IdentityPack::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityPack.name)
}
inline ::std::string* IdentityPack::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IdentityPack.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityPack::release_name() {
  // @@protoc_insertion_point(field_release:IdentityPack.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityPack::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IdentityPack.name)
}

// optional int32 type = 2;
inline void IdentityPack::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 IdentityPack::type() const {
  // @@protoc_insertion_point(field_get:IdentityPack.type)
  return type_;
}
inline void IdentityPack::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:IdentityPack.type)
}

// optional string ip = 3;
inline void IdentityPack::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityPack::ip() const {
  // @@protoc_insertion_point(field_get:IdentityPack.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityPack::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityPack.ip)
}
inline void IdentityPack::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityPack.ip)
}
inline void IdentityPack::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityPack.ip)
}
inline ::std::string* IdentityPack::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:IdentityPack.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityPack::release_ip() {
  // @@protoc_insertion_point(field_release:IdentityPack.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityPack::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:IdentityPack.ip)
}

// optional string port = 4;
inline void IdentityPack::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentityPack::port() const {
  // @@protoc_insertion_point(field_get:IdentityPack.port)
  return port_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityPack::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IdentityPack.port)
}
inline void IdentityPack::set_port(const char* value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IdentityPack.port)
}
inline void IdentityPack::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IdentityPack.port)
}
inline ::std::string* IdentityPack::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:IdentityPack.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentityPack::release_port() {
  // @@protoc_insertion_point(field_release:IdentityPack.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentityPack::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:IdentityPack.port)
}

inline const IdentityPack* IdentityPack::internal_default_instance() {
  return &IdentityPack_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::IdentityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IdentityType>() {
  return ::IdentityType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IdentityPack_2eproto__INCLUDED
