// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waringinfo.proto

#ifndef PROTOBUF_waringinfo_2eproto__INCLUDED
#define PROTOBUF_waringinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_waringinfo_2eproto();
void protobuf_InitDefaults_waringinfo_2eproto();
void protobuf_AssignDesc_waringinfo_2eproto();
void protobuf_ShutdownFile_waringinfo_2eproto();

class WaringInfo;

// ===================================================================

class WaringInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:WaringInfo) */ {
 public:
  WaringInfo();
  virtual ~WaringInfo();

  WaringInfo(const WaringInfo& from);

  inline WaringInfo& operator=(const WaringInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaringInfo& default_instance();

  static const WaringInfo* internal_default_instance();

  void Swap(WaringInfo* other);

  // implements Message ----------------------------------------------

  inline WaringInfo* New() const { return New(NULL); }

  WaringInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaringInfo& from);
  void MergeFrom(const WaringInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WaringInfo* other);
  void UnsafeMergeFrom(const WaringInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 enter_time = 1;
  void clear_enter_time();
  static const int kEnterTimeFieldNumber = 1;
  ::google::protobuf::int32 enter_time() const;
  void set_enter_time(::google::protobuf::int32 value);

  // optional double enter_speed = 2;
  void clear_enter_speed();
  static const int kEnterSpeedFieldNumber = 2;
  double enter_speed() const;
  void set_enter_speed(double value);

  // optional double enter_acceleration = 3;
  void clear_enter_acceleration();
  static const int kEnterAccelerationFieldNumber = 3;
  double enter_acceleration() const;
  void set_enter_acceleration(double value);

  // optional int32 leave_time = 4;
  void clear_leave_time();
  static const int kLeaveTimeFieldNumber = 4;
  ::google::protobuf::int32 leave_time() const;
  void set_leave_time(::google::protobuf::int32 value);

  // optional double leave_speed = 5;
  void clear_leave_speed();
  static const int kLeaveSpeedFieldNumber = 5;
  double leave_speed() const;
  void set_leave_speed(double value);

  // optional double leave_acceleration = 6;
  void clear_leave_acceleration();
  static const int kLeaveAccelerationFieldNumber = 6;
  double leave_acceleration() const;
  void set_leave_acceleration(double value);

  // optional int32 inside_time = 7;
  void clear_inside_time();
  static const int kInsideTimeFieldNumber = 7;
  ::google::protobuf::int32 inside_time() const;
  void set_inside_time(::google::protobuf::int32 value);

  // optional double inside_speed = 8;
  void clear_inside_speed();
  static const int kInsideSpeedFieldNumber = 8;
  double inside_speed() const;
  void set_inside_speed(double value);

  // optional double inside_acceleration = 9;
  void clear_inside_acceleration();
  static const int kInsideAccelerationFieldNumber = 9;
  double inside_acceleration() const;
  void set_inside_acceleration(double value);

  // optional int32 outside_time = 10;
  void clear_outside_time();
  static const int kOutsideTimeFieldNumber = 10;
  ::google::protobuf::int32 outside_time() const;
  void set_outside_time(::google::protobuf::int32 value);

  // optional double outside_speed = 11;
  void clear_outside_speed();
  static const int kOutsideSpeedFieldNumber = 11;
  double outside_speed() const;
  void set_outside_speed(double value);

  // optional double outside_acceleration = 12;
  void clear_outside_acceleration();
  static const int kOutsideAccelerationFieldNumber = 12;
  double outside_acceleration() const;
  void set_outside_acceleration(double value);

  // optional int32 high_duration = 13;
  void clear_high_duration();
  static const int kHighDurationFieldNumber = 13;
  ::google::protobuf::int32 high_duration() const;
  void set_high_duration(::google::protobuf::int32 value);

  // optional double high_speed = 14;
  void clear_high_speed();
  static const int kHighSpeedFieldNumber = 14;
  double high_speed() const;
  void set_high_speed(double value);

  // optional int32 low_duration = 15;
  void clear_low_duration();
  static const int kLowDurationFieldNumber = 15;
  ::google::protobuf::int32 low_duration() const;
  void set_low_duration(::google::protobuf::int32 value);

  // optional double low_speed = 16;
  void clear_low_speed();
  static const int kLowSpeedFieldNumber = 16;
  double low_speed() const;
  void set_low_speed(double value);

  // optional int32 pro_duration = 17;
  void clear_pro_duration();
  static const int kProDurationFieldNumber = 17;
  ::google::protobuf::int32 pro_duration() const;
  void set_pro_duration(::google::protobuf::int32 value);

  // optional double pro_lat = 18;
  void clear_pro_lat();
  static const int kProLatFieldNumber = 18;
  double pro_lat() const;
  void set_pro_lat(double value);

  // optional double pro_lon = 19;
  void clear_pro_lon();
  static const int kProLonFieldNumber = 19;
  double pro_lon() const;
  void set_pro_lon(double value);

  // repeated string anc_type = 20;
  int anc_type_size() const;
  void clear_anc_type();
  static const int kAncTypeFieldNumber = 20;
  const ::std::string& anc_type(int index) const;
  ::std::string* mutable_anc_type(int index);
  void set_anc_type(int index, const ::std::string& value);
  void set_anc_type(int index, const char* value);
  void set_anc_type(int index, const char* value, size_t size);
  ::std::string* add_anc_type();
  void add_anc_type(const ::std::string& value);
  void add_anc_type(const char* value);
  void add_anc_type(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& anc_type() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_anc_type();

  // optional double add_max = 21;
  void clear_add_max();
  static const int kAddMaxFieldNumber = 21;
  double add_max() const;
  void set_add_max(double value);

  // optional double add_min = 22;
  void clear_add_min();
  static const int kAddMinFieldNumber = 22;
  double add_min() const;
  void set_add_min(double value);

  // optional double add_duration = 23;
  void clear_add_duration();
  static const int kAddDurationFieldNumber = 23;
  double add_duration() const;
  void set_add_duration(double value);

  // optional double col_cpa = 24;
  void clear_col_cpa();
  static const int kColCpaFieldNumber = 24;
  double col_cpa() const;
  void set_col_cpa(double value);

  // optional double col_tcpa = 25;
  void clear_col_tcpa();
  static const int kColTcpaFieldNumber = 25;
  double col_tcpa() const;
  void set_col_tcpa(double value);

  // optional double col_dcpa = 26;
  void clear_col_dcpa();
  static const int kColDcpaFieldNumber = 26;
  double col_dcpa() const;
  void set_col_dcpa(double value);

  // optional double col_dist = 27;
  void clear_col_dist();
  static const int kColDistFieldNumber = 27;
  double col_dist() const;
  void set_col_dist(double value);

  // optional int32 con_time = 28;
  void clear_con_time();
  static const int kConTimeFieldNumber = 28;
  ::google::protobuf::int32 con_time() const;
  void set_con_time(::google::protobuf::int32 value);

  // optional int32 con_total = 29;
  void clear_con_total();
  static const int kConTotalFieldNumber = 29;
  ::google::protobuf::int32 con_total() const;
  void set_con_total(::google::protobuf::int32 value);

  // optional double gro_depth = 30;
  void clear_gro_depth();
  static const int kGroDepthFieldNumber = 30;
  double gro_depth() const;
  void set_gro_depth(double value);

  // optional int32 gro_time = 31;
  void clear_gro_time();
  static const int kGroTimeFieldNumber = 31;
  ::google::protobuf::int32 gro_time() const;
  void set_gro_time(::google::protobuf::int32 value);

  // optional int32 app_time = 32;
  void clear_app_time();
  static const int kAppTimeFieldNumber = 32;
  ::google::protobuf::int32 app_time() const;
  void set_app_time(::google::protobuf::int32 value);

  // optional int32 cou_change = 33;
  void clear_cou_change();
  static const int kCouChangeFieldNumber = 33;
  ::google::protobuf::int32 cou_change() const;
  void set_cou_change(::google::protobuf::int32 value);

  // optional int32 cou_time = 34;
  void clear_cou_time();
  static const int kCouTimeFieldNumber = 34;
  ::google::protobuf::int32 cou_time() const;
  void set_cou_time(::google::protobuf::int32 value);

  // optional int64 fog_begin_time = 35;
  void clear_fog_begin_time();
  static const int kFogBeginTimeFieldNumber = 35;
  ::google::protobuf::int64 fog_begin_time() const;
  void set_fog_begin_time(::google::protobuf::int64 value);

  // optional int64 fog_end_time = 36;
  void clear_fog_end_time();
  static const int kFogEndTimeFieldNumber = 36;
  ::google::protobuf::int64 fog_end_time() const;
  void set_fog_end_time(::google::protobuf::int64 value);

  // optional int32 fog_time = 37;
  void clear_fog_time();
  static const int kFogTimeFieldNumber = 37;
  ::google::protobuf::int32 fog_time() const;
  void set_fog_time(::google::protobuf::int32 value);

  // repeated string fog_MMSI = 38;
  int fog_mmsi_size() const;
  void clear_fog_mmsi();
  static const int kFogMMSIFieldNumber = 38;
  const ::std::string& fog_mmsi(int index) const;
  ::std::string* mutable_fog_mmsi(int index);
  void set_fog_mmsi(int index, const ::std::string& value);
  void set_fog_mmsi(int index, const char* value);
  void set_fog_mmsi(int index, const char* value, size_t size);
  ::std::string* add_fog_mmsi();
  void add_fog_mmsi(const ::std::string& value);
  void add_fog_mmsi(const char* value);
  void add_fog_mmsi(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fog_mmsi() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fog_mmsi();

  // @@protoc_insertion_point(class_scope:WaringInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> anc_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fog_mmsi_;
  double enter_speed_;
  ::google::protobuf::int32 enter_time_;
  ::google::protobuf::int32 leave_time_;
  double enter_acceleration_;
  double leave_speed_;
  double leave_acceleration_;
  double inside_speed_;
  ::google::protobuf::int32 inside_time_;
  ::google::protobuf::int32 outside_time_;
  double inside_acceleration_;
  double outside_speed_;
  double outside_acceleration_;
  double high_speed_;
  ::google::protobuf::int32 high_duration_;
  ::google::protobuf::int32 low_duration_;
  double low_speed_;
  double pro_lat_;
  double pro_lon_;
  double add_max_;
  double add_min_;
  ::google::protobuf::int32 pro_duration_;
  ::google::protobuf::int32 con_time_;
  double add_duration_;
  double col_cpa_;
  double col_tcpa_;
  double col_dcpa_;
  double col_dist_;
  double gro_depth_;
  ::google::protobuf::int32 con_total_;
  ::google::protobuf::int32 gro_time_;
  ::google::protobuf::int32 app_time_;
  ::google::protobuf::int32 cou_change_;
  ::google::protobuf::int64 fog_begin_time_;
  ::google::protobuf::int32 cou_time_;
  ::google::protobuf::int32 fog_time_;
  ::google::protobuf::int64 fog_end_time_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_waringinfo_2eproto_impl();
  friend void  protobuf_AddDesc_waringinfo_2eproto_impl();
  friend void protobuf_AssignDesc_waringinfo_2eproto();
  friend void protobuf_ShutdownFile_waringinfo_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<WaringInfo> WaringInfo_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WaringInfo

// optional int32 enter_time = 1;
inline void WaringInfo::clear_enter_time() {
  enter_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::enter_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.enter_time)
  return enter_time_;
}
inline void WaringInfo::set_enter_time(::google::protobuf::int32 value) {
  
  enter_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.enter_time)
}

// optional double enter_speed = 2;
inline void WaringInfo::clear_enter_speed() {
  enter_speed_ = 0;
}
inline double WaringInfo::enter_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.enter_speed)
  return enter_speed_;
}
inline void WaringInfo::set_enter_speed(double value) {
  
  enter_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.enter_speed)
}

// optional double enter_acceleration = 3;
inline void WaringInfo::clear_enter_acceleration() {
  enter_acceleration_ = 0;
}
inline double WaringInfo::enter_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.enter_acceleration)
  return enter_acceleration_;
}
inline void WaringInfo::set_enter_acceleration(double value) {
  
  enter_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.enter_acceleration)
}

// optional int32 leave_time = 4;
inline void WaringInfo::clear_leave_time() {
  leave_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::leave_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.leave_time)
  return leave_time_;
}
inline void WaringInfo::set_leave_time(::google::protobuf::int32 value) {
  
  leave_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.leave_time)
}

// optional double leave_speed = 5;
inline void WaringInfo::clear_leave_speed() {
  leave_speed_ = 0;
}
inline double WaringInfo::leave_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.leave_speed)
  return leave_speed_;
}
inline void WaringInfo::set_leave_speed(double value) {
  
  leave_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.leave_speed)
}

// optional double leave_acceleration = 6;
inline void WaringInfo::clear_leave_acceleration() {
  leave_acceleration_ = 0;
}
inline double WaringInfo::leave_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.leave_acceleration)
  return leave_acceleration_;
}
inline void WaringInfo::set_leave_acceleration(double value) {
  
  leave_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.leave_acceleration)
}

// optional int32 inside_time = 7;
inline void WaringInfo::clear_inside_time() {
  inside_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::inside_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.inside_time)
  return inside_time_;
}
inline void WaringInfo::set_inside_time(::google::protobuf::int32 value) {
  
  inside_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.inside_time)
}

// optional double inside_speed = 8;
inline void WaringInfo::clear_inside_speed() {
  inside_speed_ = 0;
}
inline double WaringInfo::inside_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.inside_speed)
  return inside_speed_;
}
inline void WaringInfo::set_inside_speed(double value) {
  
  inside_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.inside_speed)
}

// optional double inside_acceleration = 9;
inline void WaringInfo::clear_inside_acceleration() {
  inside_acceleration_ = 0;
}
inline double WaringInfo::inside_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.inside_acceleration)
  return inside_acceleration_;
}
inline void WaringInfo::set_inside_acceleration(double value) {
  
  inside_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.inside_acceleration)
}

// optional int32 outside_time = 10;
inline void WaringInfo::clear_outside_time() {
  outside_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::outside_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.outside_time)
  return outside_time_;
}
inline void WaringInfo::set_outside_time(::google::protobuf::int32 value) {
  
  outside_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.outside_time)
}

// optional double outside_speed = 11;
inline void WaringInfo::clear_outside_speed() {
  outside_speed_ = 0;
}
inline double WaringInfo::outside_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.outside_speed)
  return outside_speed_;
}
inline void WaringInfo::set_outside_speed(double value) {
  
  outside_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.outside_speed)
}

// optional double outside_acceleration = 12;
inline void WaringInfo::clear_outside_acceleration() {
  outside_acceleration_ = 0;
}
inline double WaringInfo::outside_acceleration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.outside_acceleration)
  return outside_acceleration_;
}
inline void WaringInfo::set_outside_acceleration(double value) {
  
  outside_acceleration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.outside_acceleration)
}

// optional int32 high_duration = 13;
inline void WaringInfo::clear_high_duration() {
  high_duration_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::high_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.high_duration)
  return high_duration_;
}
inline void WaringInfo::set_high_duration(::google::protobuf::int32 value) {
  
  high_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.high_duration)
}

// optional double high_speed = 14;
inline void WaringInfo::clear_high_speed() {
  high_speed_ = 0;
}
inline double WaringInfo::high_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.high_speed)
  return high_speed_;
}
inline void WaringInfo::set_high_speed(double value) {
  
  high_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.high_speed)
}

// optional int32 low_duration = 15;
inline void WaringInfo::clear_low_duration() {
  low_duration_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::low_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.low_duration)
  return low_duration_;
}
inline void WaringInfo::set_low_duration(::google::protobuf::int32 value) {
  
  low_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.low_duration)
}

// optional double low_speed = 16;
inline void WaringInfo::clear_low_speed() {
  low_speed_ = 0;
}
inline double WaringInfo::low_speed() const {
  // @@protoc_insertion_point(field_get:WaringInfo.low_speed)
  return low_speed_;
}
inline void WaringInfo::set_low_speed(double value) {
  
  low_speed_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.low_speed)
}

// optional int32 pro_duration = 17;
inline void WaringInfo::clear_pro_duration() {
  pro_duration_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::pro_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.pro_duration)
  return pro_duration_;
}
inline void WaringInfo::set_pro_duration(::google::protobuf::int32 value) {
  
  pro_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.pro_duration)
}

// optional double pro_lat = 18;
inline void WaringInfo::clear_pro_lat() {
  pro_lat_ = 0;
}
inline double WaringInfo::pro_lat() const {
  // @@protoc_insertion_point(field_get:WaringInfo.pro_lat)
  return pro_lat_;
}
inline void WaringInfo::set_pro_lat(double value) {
  
  pro_lat_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.pro_lat)
}

// optional double pro_lon = 19;
inline void WaringInfo::clear_pro_lon() {
  pro_lon_ = 0;
}
inline double WaringInfo::pro_lon() const {
  // @@protoc_insertion_point(field_get:WaringInfo.pro_lon)
  return pro_lon_;
}
inline void WaringInfo::set_pro_lon(double value) {
  
  pro_lon_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.pro_lon)
}

// repeated string anc_type = 20;
inline int WaringInfo::anc_type_size() const {
  return anc_type_.size();
}
inline void WaringInfo::clear_anc_type() {
  anc_type_.Clear();
}
inline const ::std::string& WaringInfo::anc_type(int index) const {
  // @@protoc_insertion_point(field_get:WaringInfo.anc_type)
  return anc_type_.Get(index);
}
inline ::std::string* WaringInfo::mutable_anc_type(int index) {
  // @@protoc_insertion_point(field_mutable:WaringInfo.anc_type)
  return anc_type_.Mutable(index);
}
inline void WaringInfo::set_anc_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WaringInfo.anc_type)
  anc_type_.Mutable(index)->assign(value);
}
inline void WaringInfo::set_anc_type(int index, const char* value) {
  anc_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WaringInfo.anc_type)
}
inline void WaringInfo::set_anc_type(int index, const char* value, size_t size) {
  anc_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WaringInfo.anc_type)
}
inline ::std::string* WaringInfo::add_anc_type() {
  // @@protoc_insertion_point(field_add_mutable:WaringInfo.anc_type)
  return anc_type_.Add();
}
inline void WaringInfo::add_anc_type(const ::std::string& value) {
  anc_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WaringInfo.anc_type)
}
inline void WaringInfo::add_anc_type(const char* value) {
  anc_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WaringInfo.anc_type)
}
inline void WaringInfo::add_anc_type(const char* value, size_t size) {
  anc_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WaringInfo.anc_type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WaringInfo::anc_type() const {
  // @@protoc_insertion_point(field_list:WaringInfo.anc_type)
  return anc_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WaringInfo::mutable_anc_type() {
  // @@protoc_insertion_point(field_mutable_list:WaringInfo.anc_type)
  return &anc_type_;
}

// optional double add_max = 21;
inline void WaringInfo::clear_add_max() {
  add_max_ = 0;
}
inline double WaringInfo::add_max() const {
  // @@protoc_insertion_point(field_get:WaringInfo.add_max)
  return add_max_;
}
inline void WaringInfo::set_add_max(double value) {
  
  add_max_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.add_max)
}

// optional double add_min = 22;
inline void WaringInfo::clear_add_min() {
  add_min_ = 0;
}
inline double WaringInfo::add_min() const {
  // @@protoc_insertion_point(field_get:WaringInfo.add_min)
  return add_min_;
}
inline void WaringInfo::set_add_min(double value) {
  
  add_min_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.add_min)
}

// optional double add_duration = 23;
inline void WaringInfo::clear_add_duration() {
  add_duration_ = 0;
}
inline double WaringInfo::add_duration() const {
  // @@protoc_insertion_point(field_get:WaringInfo.add_duration)
  return add_duration_;
}
inline void WaringInfo::set_add_duration(double value) {
  
  add_duration_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.add_duration)
}

// optional double col_cpa = 24;
inline void WaringInfo::clear_col_cpa() {
  col_cpa_ = 0;
}
inline double WaringInfo::col_cpa() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_cpa)
  return col_cpa_;
}
inline void WaringInfo::set_col_cpa(double value) {
  
  col_cpa_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_cpa)
}

// optional double col_tcpa = 25;
inline void WaringInfo::clear_col_tcpa() {
  col_tcpa_ = 0;
}
inline double WaringInfo::col_tcpa() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_tcpa)
  return col_tcpa_;
}
inline void WaringInfo::set_col_tcpa(double value) {
  
  col_tcpa_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_tcpa)
}

// optional double col_dcpa = 26;
inline void WaringInfo::clear_col_dcpa() {
  col_dcpa_ = 0;
}
inline double WaringInfo::col_dcpa() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_dcpa)
  return col_dcpa_;
}
inline void WaringInfo::set_col_dcpa(double value) {
  
  col_dcpa_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_dcpa)
}

// optional double col_dist = 27;
inline void WaringInfo::clear_col_dist() {
  col_dist_ = 0;
}
inline double WaringInfo::col_dist() const {
  // @@protoc_insertion_point(field_get:WaringInfo.col_dist)
  return col_dist_;
}
inline void WaringInfo::set_col_dist(double value) {
  
  col_dist_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.col_dist)
}

// optional int32 con_time = 28;
inline void WaringInfo::clear_con_time() {
  con_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::con_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.con_time)
  return con_time_;
}
inline void WaringInfo::set_con_time(::google::protobuf::int32 value) {
  
  con_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.con_time)
}

// optional int32 con_total = 29;
inline void WaringInfo::clear_con_total() {
  con_total_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::con_total() const {
  // @@protoc_insertion_point(field_get:WaringInfo.con_total)
  return con_total_;
}
inline void WaringInfo::set_con_total(::google::protobuf::int32 value) {
  
  con_total_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.con_total)
}

// optional double gro_depth = 30;
inline void WaringInfo::clear_gro_depth() {
  gro_depth_ = 0;
}
inline double WaringInfo::gro_depth() const {
  // @@protoc_insertion_point(field_get:WaringInfo.gro_depth)
  return gro_depth_;
}
inline void WaringInfo::set_gro_depth(double value) {
  
  gro_depth_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.gro_depth)
}

// optional int32 gro_time = 31;
inline void WaringInfo::clear_gro_time() {
  gro_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::gro_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.gro_time)
  return gro_time_;
}
inline void WaringInfo::set_gro_time(::google::protobuf::int32 value) {
  
  gro_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.gro_time)
}

// optional int32 app_time = 32;
inline void WaringInfo::clear_app_time() {
  app_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::app_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.app_time)
  return app_time_;
}
inline void WaringInfo::set_app_time(::google::protobuf::int32 value) {
  
  app_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.app_time)
}

// optional int32 cou_change = 33;
inline void WaringInfo::clear_cou_change() {
  cou_change_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::cou_change() const {
  // @@protoc_insertion_point(field_get:WaringInfo.cou_change)
  return cou_change_;
}
inline void WaringInfo::set_cou_change(::google::protobuf::int32 value) {
  
  cou_change_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.cou_change)
}

// optional int32 cou_time = 34;
inline void WaringInfo::clear_cou_time() {
  cou_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::cou_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.cou_time)
  return cou_time_;
}
inline void WaringInfo::set_cou_time(::google::protobuf::int32 value) {
  
  cou_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.cou_time)
}

// optional int64 fog_begin_time = 35;
inline void WaringInfo::clear_fog_begin_time() {
  fog_begin_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WaringInfo::fog_begin_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_begin_time)
  return fog_begin_time_;
}
inline void WaringInfo::set_fog_begin_time(::google::protobuf::int64 value) {
  
  fog_begin_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.fog_begin_time)
}

// optional int64 fog_end_time = 36;
inline void WaringInfo::clear_fog_end_time() {
  fog_end_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WaringInfo::fog_end_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_end_time)
  return fog_end_time_;
}
inline void WaringInfo::set_fog_end_time(::google::protobuf::int64 value) {
  
  fog_end_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.fog_end_time)
}

// optional int32 fog_time = 37;
inline void WaringInfo::clear_fog_time() {
  fog_time_ = 0;
}
inline ::google::protobuf::int32 WaringInfo::fog_time() const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_time)
  return fog_time_;
}
inline void WaringInfo::set_fog_time(::google::protobuf::int32 value) {
  
  fog_time_ = value;
  // @@protoc_insertion_point(field_set:WaringInfo.fog_time)
}

// repeated string fog_MMSI = 38;
inline int WaringInfo::fog_mmsi_size() const {
  return fog_mmsi_.size();
}
inline void WaringInfo::clear_fog_mmsi() {
  fog_mmsi_.Clear();
}
inline const ::std::string& WaringInfo::fog_mmsi(int index) const {
  // @@protoc_insertion_point(field_get:WaringInfo.fog_MMSI)
  return fog_mmsi_.Get(index);
}
inline ::std::string* WaringInfo::mutable_fog_mmsi(int index) {
  // @@protoc_insertion_point(field_mutable:WaringInfo.fog_MMSI)
  return fog_mmsi_.Mutable(index);
}
inline void WaringInfo::set_fog_mmsi(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:WaringInfo.fog_MMSI)
  fog_mmsi_.Mutable(index)->assign(value);
}
inline void WaringInfo::set_fog_mmsi(int index, const char* value) {
  fog_mmsi_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WaringInfo.fog_MMSI)
}
inline void WaringInfo::set_fog_mmsi(int index, const char* value, size_t size) {
  fog_mmsi_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WaringInfo.fog_MMSI)
}
inline ::std::string* WaringInfo::add_fog_mmsi() {
  // @@protoc_insertion_point(field_add_mutable:WaringInfo.fog_MMSI)
  return fog_mmsi_.Add();
}
inline void WaringInfo::add_fog_mmsi(const ::std::string& value) {
  fog_mmsi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WaringInfo.fog_MMSI)
}
inline void WaringInfo::add_fog_mmsi(const char* value) {
  fog_mmsi_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WaringInfo.fog_MMSI)
}
inline void WaringInfo::add_fog_mmsi(const char* value, size_t size) {
  fog_mmsi_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WaringInfo.fog_MMSI)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WaringInfo::fog_mmsi() const {
  // @@protoc_insertion_point(field_list:WaringInfo.fog_MMSI)
  return fog_mmsi_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WaringInfo::mutable_fog_mmsi() {
  // @@protoc_insertion_point(field_mutable_list:WaringInfo.fog_MMSI)
  return &fog_mmsi_;
}

inline const WaringInfo* WaringInfo::internal_default_instance() {
  return &WaringInfo_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_waringinfo_2eproto__INCLUDED
