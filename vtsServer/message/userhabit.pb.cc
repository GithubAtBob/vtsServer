// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userhabit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "userhabit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* QuickData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ViewCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ViewCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChartCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChartCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* DangerTargetCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DangerTargetCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetInfoCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetInfoCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CardMesType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PreRadioType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_userhabit_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_userhabit_2eproto() {
  protobuf_AddDesc_userhabit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "userhabit.proto");
  GOOGLE_CHECK(file != NULL);
  QuickData_descriptor_ = file->message_type(0);
  static const int QuickData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickData, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickData, lon_),
  };
  QuickData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuickData_descriptor_,
      QuickData::internal_default_instance(),
      QuickData_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuickData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickData, _internal_metadata_));
  TargetInfoData_descriptor_ = file->message_type(1);
  static const int TargetInfoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoData, checked_),
  };
  TargetInfoData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetInfoData_descriptor_,
      TargetInfoData::internal_default_instance(),
      TargetInfoData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetInfoData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoData, _internal_metadata_));
  ViewCard_descriptor_ = file->message_type(2);
  static const int ViewCard_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewCard, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewCard, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewCard, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewCard, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewCard, quick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewCard, type_),
  };
  ViewCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ViewCard_descriptor_,
      ViewCard::internal_default_instance(),
      ViewCard_offsets_,
      -1,
      -1,
      -1,
      sizeof(ViewCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ViewCard, _internal_metadata_));
  ChartCard_descriptor_ = file->message_type(3);
  static const int ChartCard_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, areastyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, pointstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, shallow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, safety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, safetydepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, choicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, safeset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, isfourshades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, isusescamin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, ismquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, islocallanguage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, type_),
  };
  ChartCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChartCard_descriptor_,
      ChartCard::internal_default_instance(),
      ChartCard_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChartCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChartCard, _internal_metadata_));
  SystemCard_descriptor_ = file->message_type(4);
  static const int SystemCard_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, isgrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, isflower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, isdimensional_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, ishog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, isturnrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, radiotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, voyage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, latlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, displayset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, type_),
  };
  SystemCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SystemCard_descriptor_,
      SystemCard::internal_default_instance(),
      SystemCard_offsets_,
      -1,
      -1,
      -1,
      sizeof(SystemCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCard, _internal_metadata_));
  DangerTargetCard_descriptor_ = file->message_type(5);
  static const int DangerTargetCard_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, maxcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, maxtcpa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, radiotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, minspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, pre_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, pre_startime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, pre_endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, pre_check_),
  };
  DangerTargetCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DangerTargetCard_descriptor_,
      DangerTargetCard::internal_default_instance(),
      DangerTargetCard_offsets_,
      -1,
      -1,
      -1,
      sizeof(DangerTargetCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DangerTargetCard, _internal_metadata_));
  TargetInfoCard_descriptor_ = file->message_type(6);
  static const int TargetInfoCard_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, tardata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, showhistor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, trackgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, trackgappoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, trackspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, showship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, showligature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, count_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, pointcount_),
  };
  TargetInfoCard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetInfoCard_descriptor_,
      TargetInfoCard::internal_default_instance(),
      TargetInfoCard_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetInfoCard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetInfoCard, _internal_metadata_));
  CardMesType_descriptor_ = file->enum_type(0);
  PreRadioType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_userhabit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuickData_descriptor_, QuickData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetInfoData_descriptor_, TargetInfoData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ViewCard_descriptor_, ViewCard::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChartCard_descriptor_, ChartCard::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SystemCard_descriptor_, SystemCard::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DangerTargetCard_descriptor_, DangerTargetCard::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetInfoCard_descriptor_, TargetInfoCard::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_userhabit_2eproto() {
  QuickData_default_instance_.Shutdown();
  delete QuickData_reflection_;
  TargetInfoData_default_instance_.Shutdown();
  delete TargetInfoData_reflection_;
  ViewCard_default_instance_.Shutdown();
  delete ViewCard_reflection_;
  ChartCard_default_instance_.Shutdown();
  delete ChartCard_reflection_;
  SystemCard_default_instance_.Shutdown();
  delete SystemCard_reflection_;
  DangerTargetCard_default_instance_.Shutdown();
  delete DangerTargetCard_reflection_;
  TargetInfoCard_default_instance_.Shutdown();
  delete TargetInfoCard_reflection_;
}

void protobuf_InitDefaults_userhabit_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  QuickData_default_instance_.DefaultConstruct();
  TargetInfoData_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ViewCard_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ChartCard_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  SystemCard_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DangerTargetCard_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TargetInfoCard_default_instance_.DefaultConstruct();
  QuickData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TargetInfoData_default_instance_.get_mutable()->InitAsDefaultInstance();
  ViewCard_default_instance_.get_mutable()->InitAsDefaultInstance();
  ChartCard_default_instance_.get_mutable()->InitAsDefaultInstance();
  SystemCard_default_instance_.get_mutable()->InitAsDefaultInstance();
  DangerTargetCard_default_instance_.get_mutable()->InitAsDefaultInstance();
  TargetInfoCard_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_userhabit_2eproto_once_);
void protobuf_InitDefaults_userhabit_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_userhabit_2eproto_once_,
                 &protobuf_InitDefaults_userhabit_2eproto_impl);
}
void protobuf_AddDesc_userhabit_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_userhabit_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017userhabit.proto\"3\n\tQuickData\022\014\n\004name\030\001"
    " \001(\t\022\013\n\003lat\030\002 \001(\001\022\013\n\003lon\030\003 \001(\001\"0\n\016Target"
    "InfoData\022\r\n\005Index\030\001 \001(\005\022\017\n\007checked\030\002 \001(\010"
    "\"z\n\010ViewCard\022\016\n\006userid\030\001 \001(\t\022\013\n\003lat\030\002 \001("
    "\001\022\013\n\003lon\030\003 \001(\001\022\r\n\005range\030\004 \001(\005\022\031\n\005quick\030\005"
    " \003(\0132\n.QuickData\022\032\n\004type\030\006 \001(\0162\014.CardMes"
    "Type\"\303\002\n\tChartCard\022\016\n\006userid\030\001 \001(\t\022\r\n\005co"
    "lor\030\002 \001(\005\022\021\n\tareastyle\030\003 \001(\005\022\022\n\npointsty"
    "le\030\004 \001(\005\022\017\n\007shallow\030\005 \001(\001\022\016\n\006safety\030\006 \001("
    "\001\022\r\n\005depth\030\007 \001(\001\022\023\n\013safetydepth\030\010 \001(\001\022\022\n"
    "\nchoicetype\030\t \001(\005\022\022\n\ncustomdata\030\n \003(\005\022\017\n"
    "\007safeset\030\013 \001(\001\022\024\n\014isFourshades\030\014 \001(\010\022\023\n\013"
    "isUseSCAMIN\030\r \001(\010\022\022\n\nisMquality\030\016 \001(\010\022\027\n"
    "\017isLocalLanguage\030\017 \001(\010\022\032\n\004type\030\020 \001(\0162\014.C"
    "ardMesType\"\225\002\n\nSystemCard\022\016\n\006userid\030\001 \001("
    "\t\022\016\n\006isGrid\030\002 \001(\010\022\020\n\010isFlower\030\003 \001(\010\022\025\n\ri"
    "sDimensional\030\004 \001(\010\022\r\n\005isHOG\030\005 \001(\010\022\022\n\nisT"
    "urnRate\030\006 \001(\010\022\021\n\tradiotype\030\007 \001(\005\022\016\n\006voya"
    "ge\030\010 \001(\001\022\014\n\004time\030\t \001(\001\022\016\n\006latlon\030\n \001(\005\022\r"
    "\n\005speed\030\013 \001(\005\022\014\n\004dist\030\014 \001(\005\022\r\n\005depth\030\r \001"
    "(\005\022\022\n\ndisplayset\030\016 \003(\t\022\032\n\004type\030\017 \001(\0162\014.C"
    "ardMesType\"\201\002\n\020DangerTargetCard\022\016\n\006useri"
    "d\030\001 \001(\t\022\016\n\006Target\030\002 \001(\005\022\014\n\004dist\030\003 \001(\001\022\016\n"
    "\006MaxCPA\030\004 \001(\001\022\017\n\007MaxTCPA\030\005 \001(\t\022\021\n\tradiot"
    "ype\030\006 \001(\005\022\020\n\010MinSpeed\030\007 \001(\001\022\032\n\004type\030\010 \001("
    "\0162\014.CardMesType\022\020\n\010pre_time\030\t \001(\005\022\024\n\014pre"
    "_starTime\030\n \001(\003\022\023\n\013pre_endTime\030\013 \001(\003\022 \n\t"
    "pre_check\030\014 \001(\0162\r.PreRadioType\"\377\001\n\016Targe"
    "tInfoCard\022\032\n\004type\030\001 \001(\0162\014.CardMesType\022\016\n"
    "\006userid\030\002 \001(\t\022 \n\007tardata\030\003 \003(\0132\017.TargetI"
    "nfoData\022\022\n\nshowHistor\030\004 \001(\010\022\020\n\010trackgap\030"
    "\005 \001(\005\022\025\n\rtrackgappoint\030\006 \001(\001\022\022\n\ntrackspe"
    "ed\030\007 \001(\001\022\020\n\010showship\030\010 \001(\010\022\024\n\014showLigatu"
    "re\030\t \001(\010\022\022\n\ncount_time\030\n \001(\010\022\022\n\npointcou"
    "nt\030\013 \001(\005*4\n\013CardMesType\022\013\n\007CMTSend\020\000\022\013\n\007"
    "CMTRead\020\001\022\013\n\007CMTNone\020\002*8\n\014PreRadioType\022\014"
    "\n\010HalfHour\020\000\022\013\n\007OneHour\020\001\022\r\n\tThreeHour\020\002"
    "b\006proto3", 1488);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "userhabit.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_userhabit_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_userhabit_2eproto_once_);
void protobuf_AddDesc_userhabit_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_userhabit_2eproto_once_,
                 &protobuf_AddDesc_userhabit_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_userhabit_2eproto {
  StaticDescriptorInitializer_userhabit_2eproto() {
    protobuf_AddDesc_userhabit_2eproto();
  }
} static_descriptor_initializer_userhabit_2eproto_;
const ::google::protobuf::EnumDescriptor* CardMesType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardMesType_descriptor_;
}
bool CardMesType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PreRadioType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreRadioType_descriptor_;
}
bool PreRadioType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuickData::kNameFieldNumber;
const int QuickData::kLatFieldNumber;
const int QuickData::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuickData::QuickData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_userhabit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:QuickData)
}

void QuickData::InitAsDefaultInstance() {
}

QuickData::QuickData(const QuickData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:QuickData)
}

void QuickData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_) + sizeof(lon_));
  _cached_size_ = 0;
}

QuickData::~QuickData() {
  // @@protoc_insertion_point(destructor:QuickData)
  SharedDtor();
}

void QuickData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QuickData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickData_descriptor_;
}

const QuickData& QuickData::default_instance() {
  protobuf_InitDefaults_userhabit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QuickData> QuickData_default_instance_;

QuickData* QuickData::New(::google::protobuf::Arena* arena) const {
  QuickData* n = new QuickData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuickData::Clear() {
// @@protoc_insertion_point(message_clear_start:QuickData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QuickData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QuickData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, lon_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool QuickData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QuickData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "QuickData.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2;
      case 2: {
        if (tag == 17) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lon;
        break;
      }

      // optional double lon = 3;
      case 3: {
        if (tag == 25) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QuickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QuickData)
  return false;
#undef DO_
}

void QuickData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QuickData)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QuickData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double lon = 3;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // @@protoc_insertion_point(serialize_end:QuickData)
}

::google::protobuf::uint8* QuickData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QuickData)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QuickData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double lon = 3;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:QuickData)
  return target;
}

size_t QuickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QuickData)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional double lat = 2;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 3;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QuickData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QuickData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuickData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QuickData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QuickData)
    UnsafeMergeFrom(*source);
  }
}

void QuickData::MergeFrom(const QuickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QuickData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QuickData::UnsafeMergeFrom(const QuickData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void QuickData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QuickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickData::CopyFrom(const QuickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QuickData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QuickData::IsInitialized() const {

  return true;
}

void QuickData::Swap(QuickData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuickData::InternalSwap(QuickData* other) {
  name_.Swap(&other->name_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuickData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickData_descriptor_;
  metadata.reflection = QuickData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuickData

// optional string name = 1;
void QuickData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QuickData::name() const {
  // @@protoc_insertion_point(field_get:QuickData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuickData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QuickData.name)
}
void QuickData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QuickData.name)
}
void QuickData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QuickData.name)
}
::std::string* QuickData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:QuickData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QuickData::release_name() {
  // @@protoc_insertion_point(field_release:QuickData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QuickData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:QuickData.name)
}

// optional double lat = 2;
void QuickData::clear_lat() {
  lat_ = 0;
}
double QuickData::lat() const {
  // @@protoc_insertion_point(field_get:QuickData.lat)
  return lat_;
}
void QuickData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:QuickData.lat)
}

// optional double lon = 3;
void QuickData::clear_lon() {
  lon_ = 0;
}
double QuickData::lon() const {
  // @@protoc_insertion_point(field_get:QuickData.lon)
  return lon_;
}
void QuickData::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:QuickData.lon)
}

inline const QuickData* QuickData::internal_default_instance() {
  return &QuickData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetInfoData::kIndexFieldNumber;
const int TargetInfoData::kCheckedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetInfoData::TargetInfoData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_userhabit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:TargetInfoData)
}

void TargetInfoData::InitAsDefaultInstance() {
}

TargetInfoData::TargetInfoData(const TargetInfoData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TargetInfoData)
}

void TargetInfoData::SharedCtor() {
  ::memset(&index_, 0, reinterpret_cast<char*>(&checked_) -
    reinterpret_cast<char*>(&index_) + sizeof(checked_));
  _cached_size_ = 0;
}

TargetInfoData::~TargetInfoData() {
  // @@protoc_insertion_point(destructor:TargetInfoData)
  SharedDtor();
}

void TargetInfoData::SharedDtor() {
}

void TargetInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetInfoData_descriptor_;
}

const TargetInfoData& TargetInfoData::default_instance() {
  protobuf_InitDefaults_userhabit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TargetInfoData> TargetInfoData_default_instance_;

TargetInfoData* TargetInfoData::New(::google::protobuf::Arena* arena) const {
  TargetInfoData* n = new TargetInfoData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetInfoData::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetInfoData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TargetInfoData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TargetInfoData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, checked_);

#undef ZR_HELPER_
#undef ZR_

}

bool TargetInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TargetInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checked;
        break;
      }

      // optional bool checked = 2;
      case 2: {
        if (tag == 16) {
         parse_checked:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checked_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TargetInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TargetInfoData)
  return false;
#undef DO_
}

void TargetInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TargetInfoData)
  // optional int32 Index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional bool checked = 2;
  if (this->checked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->checked(), output);
  }

  // @@protoc_insertion_point(serialize_end:TargetInfoData)
}

::google::protobuf::uint8* TargetInfoData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TargetInfoData)
  // optional int32 Index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional bool checked = 2;
  if (this->checked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->checked(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TargetInfoData)
  return target;
}

size_t TargetInfoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetInfoData)
  size_t total_size = 0;

  // optional int32 Index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  // optional bool checked = 2;
  if (this->checked() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetInfoData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TargetInfoData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TargetInfoData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetInfoData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TargetInfoData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TargetInfoData)
    UnsafeMergeFrom(*source);
  }
}

void TargetInfoData::MergeFrom(const TargetInfoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetInfoData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TargetInfoData::UnsafeMergeFrom(const TargetInfoData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.checked() != 0) {
    set_checked(from.checked());
  }
}

void TargetInfoData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TargetInfoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfoData::CopyFrom(const TargetInfoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetInfoData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TargetInfoData::IsInitialized() const {

  return true;
}

void TargetInfoData::Swap(TargetInfoData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetInfoData::InternalSwap(TargetInfoData* other) {
  std::swap(index_, other->index_);
  std::swap(checked_, other->checked_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetInfoData_descriptor_;
  metadata.reflection = TargetInfoData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetInfoData

// optional int32 Index = 1;
void TargetInfoData::clear_index() {
  index_ = 0;
}
::google::protobuf::int32 TargetInfoData::index() const {
  // @@protoc_insertion_point(field_get:TargetInfoData.Index)
  return index_;
}
void TargetInfoData::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoData.Index)
}

// optional bool checked = 2;
void TargetInfoData::clear_checked() {
  checked_ = false;
}
bool TargetInfoData::checked() const {
  // @@protoc_insertion_point(field_get:TargetInfoData.checked)
  return checked_;
}
void TargetInfoData::set_checked(bool value) {
  
  checked_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoData.checked)
}

inline const TargetInfoData* TargetInfoData::internal_default_instance() {
  return &TargetInfoData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ViewCard::kUseridFieldNumber;
const int ViewCard::kLatFieldNumber;
const int ViewCard::kLonFieldNumber;
const int ViewCard::kRangeFieldNumber;
const int ViewCard::kQuickFieldNumber;
const int ViewCard::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ViewCard::ViewCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_userhabit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ViewCard)
}

void ViewCard::InitAsDefaultInstance() {
}

ViewCard::ViewCard(const ViewCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ViewCard)
}

void ViewCard::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&lat_) + sizeof(type_));
  _cached_size_ = 0;
}

ViewCard::~ViewCard() {
  // @@protoc_insertion_point(destructor:ViewCard)
  SharedDtor();
}

void ViewCard::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ViewCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ViewCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ViewCard_descriptor_;
}

const ViewCard& ViewCard::default_instance() {
  protobuf_InitDefaults_userhabit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ViewCard> ViewCard_default_instance_;

ViewCard* ViewCard::New(::google::protobuf::Arena* arena) const {
  ViewCard* n = new ViewCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ViewCard::Clear() {
// @@protoc_insertion_point(message_clear_start:ViewCard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ViewCard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ViewCard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, type_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  quick_.Clear();
}

bool ViewCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ViewCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ViewCard.userid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // optional double lat = 2;
      case 2: {
        if (tag == 17) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lon;
        break;
      }

      // optional double lon = 3;
      case 3: {
        if (tag == 25) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_range;
        break;
      }

      // optional int32 range = 4;
      case 4: {
        if (tag == 32) {
         parse_range:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_quick;
        break;
      }

      // repeated .QuickData quick = 5;
      case 5: {
        if (tag == 42) {
         parse_quick:
          DO_(input->IncrementRecursionDepth());
         parse_loop_quick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_quick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_quick;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .CardMesType type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CardMesType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ViewCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ViewCard)
  return false;
#undef DO_
}

void ViewCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ViewCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ViewCard.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional double lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double lon = 3;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // optional int32 range = 4;
  if (this->range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->range(), output);
  }

  // repeated .QuickData quick = 5;
  for (unsigned int i = 0, n = this->quick_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quick(i), output);
  }

  // optional .CardMesType type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ViewCard)
}

::google::protobuf::uint8* ViewCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ViewCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ViewCard.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional double lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // optional double lon = 3;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // optional int32 range = 4;
  if (this->range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->range(), target);
  }

  // repeated .QuickData quick = 5;
  for (unsigned int i = 0, n = this->quick_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->quick(i), false, target);
  }

  // optional .CardMesType type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ViewCard)
  return target;
}

size_t ViewCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ViewCard)
  size_t total_size = 0;

  // optional string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional double lat = 2;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 3;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 range = 4;
  if (this->range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->range());
  }

  // optional .CardMesType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated .QuickData quick = 5;
  {
    unsigned int count = this->quick_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quick(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ViewCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ViewCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ViewCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ViewCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ViewCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ViewCard)
    UnsafeMergeFrom(*source);
  }
}

void ViewCard::MergeFrom(const ViewCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ViewCard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ViewCard::UnsafeMergeFrom(const ViewCard& from) {
  GOOGLE_DCHECK(&from != this);
  quick_.MergeFrom(from.quick_);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.range() != 0) {
    set_range(from.range());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ViewCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ViewCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewCard::CopyFrom(const ViewCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ViewCard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ViewCard::IsInitialized() const {

  return true;
}

void ViewCard::Swap(ViewCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ViewCard::InternalSwap(ViewCard* other) {
  userid_.Swap(&other->userid_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(range_, other->range_);
  quick_.UnsafeArenaSwap(&other->quick_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ViewCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ViewCard_descriptor_;
  metadata.reflection = ViewCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ViewCard

// optional string userid = 1;
void ViewCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ViewCard::userid() const {
  // @@protoc_insertion_point(field_get:ViewCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ViewCard.userid)
}
void ViewCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ViewCard.userid)
}
void ViewCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ViewCard.userid)
}
::std::string* ViewCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:ViewCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ViewCard::release_userid() {
  // @@protoc_insertion_point(field_release:ViewCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ViewCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ViewCard.userid)
}

// optional double lat = 2;
void ViewCard::clear_lat() {
  lat_ = 0;
}
double ViewCard::lat() const {
  // @@protoc_insertion_point(field_get:ViewCard.lat)
  return lat_;
}
void ViewCard::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.lat)
}

// optional double lon = 3;
void ViewCard::clear_lon() {
  lon_ = 0;
}
double ViewCard::lon() const {
  // @@protoc_insertion_point(field_get:ViewCard.lon)
  return lon_;
}
void ViewCard::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.lon)
}

// optional int32 range = 4;
void ViewCard::clear_range() {
  range_ = 0;
}
::google::protobuf::int32 ViewCard::range() const {
  // @@protoc_insertion_point(field_get:ViewCard.range)
  return range_;
}
void ViewCard::set_range(::google::protobuf::int32 value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.range)
}

// repeated .QuickData quick = 5;
int ViewCard::quick_size() const {
  return quick_.size();
}
void ViewCard::clear_quick() {
  quick_.Clear();
}
const ::QuickData& ViewCard::quick(int index) const {
  // @@protoc_insertion_point(field_get:ViewCard.quick)
  return quick_.Get(index);
}
::QuickData* ViewCard::mutable_quick(int index) {
  // @@protoc_insertion_point(field_mutable:ViewCard.quick)
  return quick_.Mutable(index);
}
::QuickData* ViewCard::add_quick() {
  // @@protoc_insertion_point(field_add:ViewCard.quick)
  return quick_.Add();
}
::google::protobuf::RepeatedPtrField< ::QuickData >*
ViewCard::mutable_quick() {
  // @@protoc_insertion_point(field_mutable_list:ViewCard.quick)
  return &quick_;
}
const ::google::protobuf::RepeatedPtrField< ::QuickData >&
ViewCard::quick() const {
  // @@protoc_insertion_point(field_list:ViewCard.quick)
  return quick_;
}

// optional .CardMesType type = 6;
void ViewCard::clear_type() {
  type_ = 0;
}
::CardMesType ViewCard::type() const {
  // @@protoc_insertion_point(field_get:ViewCard.type)
  return static_cast< ::CardMesType >(type_);
}
void ViewCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ViewCard.type)
}

inline const ViewCard* ViewCard::internal_default_instance() {
  return &ViewCard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartCard::kUseridFieldNumber;
const int ChartCard::kColorFieldNumber;
const int ChartCard::kAreastyleFieldNumber;
const int ChartCard::kPointstyleFieldNumber;
const int ChartCard::kShallowFieldNumber;
const int ChartCard::kSafetyFieldNumber;
const int ChartCard::kDepthFieldNumber;
const int ChartCard::kSafetydepthFieldNumber;
const int ChartCard::kChoicetypeFieldNumber;
const int ChartCard::kCustomdataFieldNumber;
const int ChartCard::kSafesetFieldNumber;
const int ChartCard::kIsFourshadesFieldNumber;
const int ChartCard::kIsUseSCAMINFieldNumber;
const int ChartCard::kIsMqualityFieldNumber;
const int ChartCard::kIsLocalLanguageFieldNumber;
const int ChartCard::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChartCard::ChartCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_userhabit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChartCard)
}

void ChartCard::InitAsDefaultInstance() {
}

ChartCard::ChartCard(const ChartCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChartCard)
}

void ChartCard::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&color_) + sizeof(type_));
  _cached_size_ = 0;
}

ChartCard::~ChartCard() {
  // @@protoc_insertion_point(destructor:ChartCard)
  SharedDtor();
}

void ChartCard::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChartCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChartCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChartCard_descriptor_;
}

const ChartCard& ChartCard::default_instance() {
  protobuf_InitDefaults_userhabit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ChartCard> ChartCard_default_instance_;

ChartCard* ChartCard::New(::google::protobuf::Arena* arena) const {
  ChartCard* n = new ChartCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChartCard::Clear() {
// @@protoc_insertion_point(message_clear_start:ChartCard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChartCard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChartCard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(color_, pointstyle_);
  ZR_(depth_, safetydepth_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(safeset_, type_);
  choicetype_ = 0;

#undef ZR_HELPER_
#undef ZR_

  customdata_.Clear();
}

bool ChartCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChartCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChartCard.userid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional int32 color = 2;
      case 2: {
        if (tag == 16) {
         parse_color:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_areastyle;
        break;
      }

      // optional int32 areastyle = 3;
      case 3: {
        if (tag == 24) {
         parse_areastyle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areastyle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pointstyle;
        break;
      }

      // optional int32 pointstyle = 4;
      case 4: {
        if (tag == 32) {
         parse_pointstyle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointstyle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_shallow;
        break;
      }

      // optional double shallow = 5;
      case 5: {
        if (tag == 41) {
         parse_shallow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shallow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_safety;
        break;
      }

      // optional double safety = 6;
      case 6: {
        if (tag == 49) {
         parse_safety:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safety_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_depth;
        break;
      }

      // optional double depth = 7;
      case 7: {
        if (tag == 57) {
         parse_depth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_safetydepth;
        break;
      }

      // optional double safetydepth = 8;
      case 8: {
        if (tag == 65) {
         parse_safetydepth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safetydepth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_choicetype;
        break;
      }

      // optional int32 choicetype = 9;
      case 9: {
        if (tag == 72) {
         parse_choicetype:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choicetype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_customdata;
        break;
      }

      // repeated int32 customdata = 10;
      case 10: {
        if (tag == 82) {
         parse_customdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_customdata())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 82, input, this->mutable_customdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_safeset;
        break;
      }

      // optional double safeset = 11;
      case 11: {
        if (tag == 89) {
         parse_safeset:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &safeset_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_isFourshades;
        break;
      }

      // optional bool isFourshades = 12;
      case 12: {
        if (tag == 96) {
         parse_isFourshades:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfourshades_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_isUseSCAMIN;
        break;
      }

      // optional bool isUseSCAMIN = 13;
      case 13: {
        if (tag == 104) {
         parse_isUseSCAMIN:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusescamin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isMquality;
        break;
      }

      // optional bool isMquality = 14;
      case 14: {
        if (tag == 112) {
         parse_isMquality:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismquality_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_isLocalLanguage;
        break;
      }

      // optional bool isLocalLanguage = 15;
      case 15: {
        if (tag == 120) {
         parse_isLocalLanguage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocallanguage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_type;
        break;
      }

      // optional .CardMesType type = 16;
      case 16: {
        if (tag == 128) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CardMesType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChartCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChartCard)
  return false;
#undef DO_
}

void ChartCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChartCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChartCard.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional int32 color = 2;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

  // optional int32 areastyle = 3;
  if (this->areastyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areastyle(), output);
  }

  // optional int32 pointstyle = 4;
  if (this->pointstyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pointstyle(), output);
  }

  // optional double shallow = 5;
  if (this->shallow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->shallow(), output);
  }

  // optional double safety = 6;
  if (this->safety() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->safety(), output);
  }

  // optional double depth = 7;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->depth(), output);
  }

  // optional double safetydepth = 8;
  if (this->safetydepth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->safetydepth(), output);
  }

  // optional int32 choicetype = 9;
  if (this->choicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->choicetype(), output);
  }

  // repeated int32 customdata = 10;
  if (this->customdata_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_customdata_cached_byte_size_);
  }
  for (int i = 0; i < this->customdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->customdata(i), output);
  }

  // optional double safeset = 11;
  if (this->safeset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->safeset(), output);
  }

  // optional bool isFourshades = 12;
  if (this->isfourshades() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isfourshades(), output);
  }

  // optional bool isUseSCAMIN = 13;
  if (this->isusescamin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isusescamin(), output);
  }

  // optional bool isMquality = 14;
  if (this->ismquality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ismquality(), output);
  }

  // optional bool isLocalLanguage = 15;
  if (this->islocallanguage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->islocallanguage(), output);
  }

  // optional .CardMesType type = 16;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ChartCard)
}

::google::protobuf::uint8* ChartCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ChartCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChartCard.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional int32 color = 2;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  // optional int32 areastyle = 3;
  if (this->areastyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areastyle(), target);
  }

  // optional int32 pointstyle = 4;
  if (this->pointstyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pointstyle(), target);
  }

  // optional double shallow = 5;
  if (this->shallow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->shallow(), target);
  }

  // optional double safety = 6;
  if (this->safety() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->safety(), target);
  }

  // optional double depth = 7;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->depth(), target);
  }

  // optional double safetydepth = 8;
  if (this->safetydepth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->safetydepth(), target);
  }

  // optional int32 choicetype = 9;
  if (this->choicetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->choicetype(), target);
  }

  // repeated int32 customdata = 10;
  if (this->customdata_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _customdata_cached_byte_size_, target);
  }
  for (int i = 0; i < this->customdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->customdata(i), target);
  }

  // optional double safeset = 11;
  if (this->safeset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->safeset(), target);
  }

  // optional bool isFourshades = 12;
  if (this->isfourshades() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isfourshades(), target);
  }

  // optional bool isUseSCAMIN = 13;
  if (this->isusescamin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isusescamin(), target);
  }

  // optional bool isMquality = 14;
  if (this->ismquality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ismquality(), target);
  }

  // optional bool isLocalLanguage = 15;
  if (this->islocallanguage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->islocallanguage(), target);
  }

  // optional .CardMesType type = 16;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChartCard)
  return target;
}

size_t ChartCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChartCard)
  size_t total_size = 0;

  // optional string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int32 color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // optional int32 areastyle = 3;
  if (this->areastyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->areastyle());
  }

  // optional int32 pointstyle = 4;
  if (this->pointstyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pointstyle());
  }

  // optional double shallow = 5;
  if (this->shallow() != 0) {
    total_size += 1 + 8;
  }

  // optional double safety = 6;
  if (this->safety() != 0) {
    total_size += 1 + 8;
  }

  // optional double depth = 7;
  if (this->depth() != 0) {
    total_size += 1 + 8;
  }

  // optional double safetydepth = 8;
  if (this->safetydepth() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 choicetype = 9;
  if (this->choicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->choicetype());
  }

  // optional double safeset = 11;
  if (this->safeset() != 0) {
    total_size += 1 + 8;
  }

  // optional bool isFourshades = 12;
  if (this->isfourshades() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isUseSCAMIN = 13;
  if (this->isusescamin() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isMquality = 14;
  if (this->ismquality() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isLocalLanguage = 15;
  if (this->islocallanguage() != 0) {
    total_size += 1 + 1;
  }

  // optional .CardMesType type = 16;
  if (this->type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated int32 customdata = 10;
  {
    size_t data_size = 0;
    unsigned int count = this->customdata_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->customdata(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _customdata_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChartCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChartCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ChartCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChartCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChartCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChartCard)
    UnsafeMergeFrom(*source);
  }
}

void ChartCard::MergeFrom(const ChartCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChartCard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ChartCard::UnsafeMergeFrom(const ChartCard& from) {
  GOOGLE_DCHECK(&from != this);
  customdata_.UnsafeMergeFrom(from.customdata_);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.areastyle() != 0) {
    set_areastyle(from.areastyle());
  }
  if (from.pointstyle() != 0) {
    set_pointstyle(from.pointstyle());
  }
  if (from.shallow() != 0) {
    set_shallow(from.shallow());
  }
  if (from.safety() != 0) {
    set_safety(from.safety());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.safetydepth() != 0) {
    set_safetydepth(from.safetydepth());
  }
  if (from.choicetype() != 0) {
    set_choicetype(from.choicetype());
  }
  if (from.safeset() != 0) {
    set_safeset(from.safeset());
  }
  if (from.isfourshades() != 0) {
    set_isfourshades(from.isfourshades());
  }
  if (from.isusescamin() != 0) {
    set_isusescamin(from.isusescamin());
  }
  if (from.ismquality() != 0) {
    set_ismquality(from.ismquality());
  }
  if (from.islocallanguage() != 0) {
    set_islocallanguage(from.islocallanguage());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ChartCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChartCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartCard::CopyFrom(const ChartCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChartCard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ChartCard::IsInitialized() const {

  return true;
}

void ChartCard::Swap(ChartCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChartCard::InternalSwap(ChartCard* other) {
  userid_.Swap(&other->userid_);
  std::swap(color_, other->color_);
  std::swap(areastyle_, other->areastyle_);
  std::swap(pointstyle_, other->pointstyle_);
  std::swap(shallow_, other->shallow_);
  std::swap(safety_, other->safety_);
  std::swap(depth_, other->depth_);
  std::swap(safetydepth_, other->safetydepth_);
  std::swap(choicetype_, other->choicetype_);
  customdata_.UnsafeArenaSwap(&other->customdata_);
  std::swap(safeset_, other->safeset_);
  std::swap(isfourshades_, other->isfourshades_);
  std::swap(isusescamin_, other->isusescamin_);
  std::swap(ismquality_, other->ismquality_);
  std::swap(islocallanguage_, other->islocallanguage_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChartCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChartCard_descriptor_;
  metadata.reflection = ChartCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChartCard

// optional string userid = 1;
void ChartCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChartCard::userid() const {
  // @@protoc_insertion_point(field_get:ChartCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChartCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChartCard.userid)
}
void ChartCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChartCard.userid)
}
void ChartCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChartCard.userid)
}
::std::string* ChartCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:ChartCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChartCard::release_userid() {
  // @@protoc_insertion_point(field_release:ChartCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChartCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ChartCard.userid)
}

// optional int32 color = 2;
void ChartCard::clear_color() {
  color_ = 0;
}
::google::protobuf::int32 ChartCard::color() const {
  // @@protoc_insertion_point(field_get:ChartCard.color)
  return color_;
}
void ChartCard::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.color)
}

// optional int32 areastyle = 3;
void ChartCard::clear_areastyle() {
  areastyle_ = 0;
}
::google::protobuf::int32 ChartCard::areastyle() const {
  // @@protoc_insertion_point(field_get:ChartCard.areastyle)
  return areastyle_;
}
void ChartCard::set_areastyle(::google::protobuf::int32 value) {
  
  areastyle_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.areastyle)
}

// optional int32 pointstyle = 4;
void ChartCard::clear_pointstyle() {
  pointstyle_ = 0;
}
::google::protobuf::int32 ChartCard::pointstyle() const {
  // @@protoc_insertion_point(field_get:ChartCard.pointstyle)
  return pointstyle_;
}
void ChartCard::set_pointstyle(::google::protobuf::int32 value) {
  
  pointstyle_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.pointstyle)
}

// optional double shallow = 5;
void ChartCard::clear_shallow() {
  shallow_ = 0;
}
double ChartCard::shallow() const {
  // @@protoc_insertion_point(field_get:ChartCard.shallow)
  return shallow_;
}
void ChartCard::set_shallow(double value) {
  
  shallow_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.shallow)
}

// optional double safety = 6;
void ChartCard::clear_safety() {
  safety_ = 0;
}
double ChartCard::safety() const {
  // @@protoc_insertion_point(field_get:ChartCard.safety)
  return safety_;
}
void ChartCard::set_safety(double value) {
  
  safety_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.safety)
}

// optional double depth = 7;
void ChartCard::clear_depth() {
  depth_ = 0;
}
double ChartCard::depth() const {
  // @@protoc_insertion_point(field_get:ChartCard.depth)
  return depth_;
}
void ChartCard::set_depth(double value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.depth)
}

// optional double safetydepth = 8;
void ChartCard::clear_safetydepth() {
  safetydepth_ = 0;
}
double ChartCard::safetydepth() const {
  // @@protoc_insertion_point(field_get:ChartCard.safetydepth)
  return safetydepth_;
}
void ChartCard::set_safetydepth(double value) {
  
  safetydepth_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.safetydepth)
}

// optional int32 choicetype = 9;
void ChartCard::clear_choicetype() {
  choicetype_ = 0;
}
::google::protobuf::int32 ChartCard::choicetype() const {
  // @@protoc_insertion_point(field_get:ChartCard.choicetype)
  return choicetype_;
}
void ChartCard::set_choicetype(::google::protobuf::int32 value) {
  
  choicetype_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.choicetype)
}

// repeated int32 customdata = 10;
int ChartCard::customdata_size() const {
  return customdata_.size();
}
void ChartCard::clear_customdata() {
  customdata_.Clear();
}
::google::protobuf::int32 ChartCard::customdata(int index) const {
  // @@protoc_insertion_point(field_get:ChartCard.customdata)
  return customdata_.Get(index);
}
void ChartCard::set_customdata(int index, ::google::protobuf::int32 value) {
  customdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChartCard.customdata)
}
void ChartCard::add_customdata(::google::protobuf::int32 value) {
  customdata_.Add(value);
  // @@protoc_insertion_point(field_add:ChartCard.customdata)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ChartCard::customdata() const {
  // @@protoc_insertion_point(field_list:ChartCard.customdata)
  return customdata_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ChartCard::mutable_customdata() {
  // @@protoc_insertion_point(field_mutable_list:ChartCard.customdata)
  return &customdata_;
}

// optional double safeset = 11;
void ChartCard::clear_safeset() {
  safeset_ = 0;
}
double ChartCard::safeset() const {
  // @@protoc_insertion_point(field_get:ChartCard.safeset)
  return safeset_;
}
void ChartCard::set_safeset(double value) {
  
  safeset_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.safeset)
}

// optional bool isFourshades = 12;
void ChartCard::clear_isfourshades() {
  isfourshades_ = false;
}
bool ChartCard::isfourshades() const {
  // @@protoc_insertion_point(field_get:ChartCard.isFourshades)
  return isfourshades_;
}
void ChartCard::set_isfourshades(bool value) {
  
  isfourshades_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isFourshades)
}

// optional bool isUseSCAMIN = 13;
void ChartCard::clear_isusescamin() {
  isusescamin_ = false;
}
bool ChartCard::isusescamin() const {
  // @@protoc_insertion_point(field_get:ChartCard.isUseSCAMIN)
  return isusescamin_;
}
void ChartCard::set_isusescamin(bool value) {
  
  isusescamin_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isUseSCAMIN)
}

// optional bool isMquality = 14;
void ChartCard::clear_ismquality() {
  ismquality_ = false;
}
bool ChartCard::ismquality() const {
  // @@protoc_insertion_point(field_get:ChartCard.isMquality)
  return ismquality_;
}
void ChartCard::set_ismquality(bool value) {
  
  ismquality_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isMquality)
}

// optional bool isLocalLanguage = 15;
void ChartCard::clear_islocallanguage() {
  islocallanguage_ = false;
}
bool ChartCard::islocallanguage() const {
  // @@protoc_insertion_point(field_get:ChartCard.isLocalLanguage)
  return islocallanguage_;
}
void ChartCard::set_islocallanguage(bool value) {
  
  islocallanguage_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.isLocalLanguage)
}

// optional .CardMesType type = 16;
void ChartCard::clear_type() {
  type_ = 0;
}
::CardMesType ChartCard::type() const {
  // @@protoc_insertion_point(field_get:ChartCard.type)
  return static_cast< ::CardMesType >(type_);
}
void ChartCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChartCard.type)
}

inline const ChartCard* ChartCard::internal_default_instance() {
  return &ChartCard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemCard::kUseridFieldNumber;
const int SystemCard::kIsGridFieldNumber;
const int SystemCard::kIsFlowerFieldNumber;
const int SystemCard::kIsDimensionalFieldNumber;
const int SystemCard::kIsHOGFieldNumber;
const int SystemCard::kIsTurnRateFieldNumber;
const int SystemCard::kRadiotypeFieldNumber;
const int SystemCard::kVoyageFieldNumber;
const int SystemCard::kTimeFieldNumber;
const int SystemCard::kLatlonFieldNumber;
const int SystemCard::kSpeedFieldNumber;
const int SystemCard::kDistFieldNumber;
const int SystemCard::kDepthFieldNumber;
const int SystemCard::kDisplaysetFieldNumber;
const int SystemCard::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemCard::SystemCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_userhabit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:SystemCard)
}

void SystemCard::InitAsDefaultInstance() {
}

SystemCard::SystemCard(const SystemCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SystemCard)
}

void SystemCard::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&isgrid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&isgrid_) + sizeof(type_));
  _cached_size_ = 0;
}

SystemCard::~SystemCard() {
  // @@protoc_insertion_point(destructor:SystemCard)
  SharedDtor();
}

void SystemCard::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SystemCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemCard_descriptor_;
}

const SystemCard& SystemCard::default_instance() {
  protobuf_InitDefaults_userhabit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SystemCard> SystemCard_default_instance_;

SystemCard* SystemCard::New(::google::protobuf::Arena* arena) const {
  SystemCard* n = new SystemCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemCard::Clear() {
// @@protoc_insertion_point(message_clear_start:SystemCard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SystemCard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SystemCard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(isgrid_, radiotype_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(latlon_, type_);

#undef ZR_HELPER_
#undef ZR_

  displayset_.Clear();
}

bool SystemCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SystemCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SystemCard.userid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isGrid;
        break;
      }

      // optional bool isGrid = 2;
      case 2: {
        if (tag == 16) {
         parse_isGrid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgrid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isFlower;
        break;
      }

      // optional bool isFlower = 3;
      case 3: {
        if (tag == 24) {
         parse_isFlower:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isflower_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isDimensional;
        break;
      }

      // optional bool isDimensional = 4;
      case 4: {
        if (tag == 32) {
         parse_isDimensional:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdimensional_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isHOG;
        break;
      }

      // optional bool isHOG = 5;
      case 5: {
        if (tag == 40) {
         parse_isHOG:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isTurnRate;
        break;
      }

      // optional bool isTurnRate = 6;
      case 6: {
        if (tag == 48) {
         parse_isTurnRate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isturnrate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_radiotype;
        break;
      }

      // optional int32 radiotype = 7;
      case 7: {
        if (tag == 56) {
         parse_radiotype:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiotype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_voyage;
        break;
      }

      // optional double voyage = 8;
      case 8: {
        if (tag == 65) {
         parse_voyage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voyage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_time;
        break;
      }

      // optional double time = 9;
      case 9: {
        if (tag == 73) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_latlon;
        break;
      }

      // optional int32 latlon = 10;
      case 10: {
        if (tag == 80) {
         parse_latlon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latlon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_speed;
        break;
      }

      // optional int32 speed = 11;
      case 11: {
        if (tag == 88) {
         parse_speed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_dist;
        break;
      }

      // optional int32 dist = 12;
      case 12: {
        if (tag == 96) {
         parse_dist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_depth;
        break;
      }

      // optional int32 depth = 13;
      case 13: {
        if (tag == 104) {
         parse_depth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_displayset;
        break;
      }

      // repeated string displayset = 14;
      case 14: {
        if (tag == 114) {
         parse_displayset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_displayset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->displayset(this->displayset_size() - 1).data(),
            this->displayset(this->displayset_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SystemCard.displayset"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_displayset;
        if (input->ExpectTag(120)) goto parse_type;
        break;
      }

      // optional .CardMesType type = 15;
      case 15: {
        if (tag == 120) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CardMesType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SystemCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SystemCard)
  return false;
#undef DO_
}

void SystemCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SystemCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SystemCard.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional bool isGrid = 2;
  if (this->isgrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isgrid(), output);
  }

  // optional bool isFlower = 3;
  if (this->isflower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isflower(), output);
  }

  // optional bool isDimensional = 4;
  if (this->isdimensional() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdimensional(), output);
  }

  // optional bool isHOG = 5;
  if (this->ishog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ishog(), output);
  }

  // optional bool isTurnRate = 6;
  if (this->isturnrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isturnrate(), output);
  }

  // optional int32 radiotype = 7;
  if (this->radiotype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->radiotype(), output);
  }

  // optional double voyage = 8;
  if (this->voyage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->voyage(), output);
  }

  // optional double time = 9;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->time(), output);
  }

  // optional int32 latlon = 10;
  if (this->latlon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->latlon(), output);
  }

  // optional int32 speed = 11;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->speed(), output);
  }

  // optional int32 dist = 12;
  if (this->dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dist(), output);
  }

  // optional int32 depth = 13;
  if (this->depth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->depth(), output);
  }

  // repeated string displayset = 14;
  for (int i = 0; i < this->displayset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->displayset(i).data(), this->displayset(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SystemCard.displayset");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->displayset(i), output);
  }

  // optional .CardMesType type = 15;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:SystemCard)
}

::google::protobuf::uint8* SystemCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SystemCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SystemCard.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional bool isGrid = 2;
  if (this->isgrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isgrid(), target);
  }

  // optional bool isFlower = 3;
  if (this->isflower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isflower(), target);
  }

  // optional bool isDimensional = 4;
  if (this->isdimensional() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdimensional(), target);
  }

  // optional bool isHOG = 5;
  if (this->ishog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ishog(), target);
  }

  // optional bool isTurnRate = 6;
  if (this->isturnrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isturnrate(), target);
  }

  // optional int32 radiotype = 7;
  if (this->radiotype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->radiotype(), target);
  }

  // optional double voyage = 8;
  if (this->voyage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->voyage(), target);
  }

  // optional double time = 9;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->time(), target);
  }

  // optional int32 latlon = 10;
  if (this->latlon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->latlon(), target);
  }

  // optional int32 speed = 11;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->speed(), target);
  }

  // optional int32 dist = 12;
  if (this->dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dist(), target);
  }

  // optional int32 depth = 13;
  if (this->depth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->depth(), target);
  }

  // repeated string displayset = 14;
  for (int i = 0; i < this->displayset_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->displayset(i).data(), this->displayset(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SystemCard.displayset");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->displayset(i), target);
  }

  // optional .CardMesType type = 15;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SystemCard)
  return target;
}

size_t SystemCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SystemCard)
  size_t total_size = 0;

  // optional string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional bool isGrid = 2;
  if (this->isgrid() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isFlower = 3;
  if (this->isflower() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isDimensional = 4;
  if (this->isdimensional() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isHOG = 5;
  if (this->ishog() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isTurnRate = 6;
  if (this->isturnrate() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 radiotype = 7;
  if (this->radiotype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radiotype());
  }

  // optional double voyage = 8;
  if (this->voyage() != 0) {
    total_size += 1 + 8;
  }

  // optional double time = 9;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 latlon = 10;
  if (this->latlon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latlon());
  }

  // optional int32 speed = 11;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->speed());
  }

  // optional int32 dist = 12;
  if (this->dist() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dist());
  }

  // optional int32 depth = 13;
  if (this->depth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->depth());
  }

  // optional .CardMesType type = 15;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // repeated string displayset = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->displayset_size());
  for (int i = 0; i < this->displayset_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->displayset(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SystemCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SystemCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SystemCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SystemCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SystemCard)
    UnsafeMergeFrom(*source);
  }
}

void SystemCard::MergeFrom(const SystemCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SystemCard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SystemCard::UnsafeMergeFrom(const SystemCard& from) {
  GOOGLE_DCHECK(&from != this);
  displayset_.UnsafeMergeFrom(from.displayset_);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.isgrid() != 0) {
    set_isgrid(from.isgrid());
  }
  if (from.isflower() != 0) {
    set_isflower(from.isflower());
  }
  if (from.isdimensional() != 0) {
    set_isdimensional(from.isdimensional());
  }
  if (from.ishog() != 0) {
    set_ishog(from.ishog());
  }
  if (from.isturnrate() != 0) {
    set_isturnrate(from.isturnrate());
  }
  if (from.radiotype() != 0) {
    set_radiotype(from.radiotype());
  }
  if (from.voyage() != 0) {
    set_voyage(from.voyage());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.latlon() != 0) {
    set_latlon(from.latlon());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.dist() != 0) {
    set_dist(from.dist());
  }
  if (from.depth() != 0) {
    set_depth(from.depth());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SystemCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SystemCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemCard::CopyFrom(const SystemCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SystemCard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SystemCard::IsInitialized() const {

  return true;
}

void SystemCard::Swap(SystemCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemCard::InternalSwap(SystemCard* other) {
  userid_.Swap(&other->userid_);
  std::swap(isgrid_, other->isgrid_);
  std::swap(isflower_, other->isflower_);
  std::swap(isdimensional_, other->isdimensional_);
  std::swap(ishog_, other->ishog_);
  std::swap(isturnrate_, other->isturnrate_);
  std::swap(radiotype_, other->radiotype_);
  std::swap(voyage_, other->voyage_);
  std::swap(time_, other->time_);
  std::swap(latlon_, other->latlon_);
  std::swap(speed_, other->speed_);
  std::swap(dist_, other->dist_);
  std::swap(depth_, other->depth_);
  displayset_.UnsafeArenaSwap(&other->displayset_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SystemCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemCard_descriptor_;
  metadata.reflection = SystemCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemCard

// optional string userid = 1;
void SystemCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SystemCard::userid() const {
  // @@protoc_insertion_point(field_get:SystemCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SystemCard.userid)
}
void SystemCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SystemCard.userid)
}
void SystemCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SystemCard.userid)
}
::std::string* SystemCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:SystemCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SystemCard::release_userid() {
  // @@protoc_insertion_point(field_release:SystemCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SystemCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:SystemCard.userid)
}

// optional bool isGrid = 2;
void SystemCard::clear_isgrid() {
  isgrid_ = false;
}
bool SystemCard::isgrid() const {
  // @@protoc_insertion_point(field_get:SystemCard.isGrid)
  return isgrid_;
}
void SystemCard::set_isgrid(bool value) {
  
  isgrid_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isGrid)
}

// optional bool isFlower = 3;
void SystemCard::clear_isflower() {
  isflower_ = false;
}
bool SystemCard::isflower() const {
  // @@protoc_insertion_point(field_get:SystemCard.isFlower)
  return isflower_;
}
void SystemCard::set_isflower(bool value) {
  
  isflower_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isFlower)
}

// optional bool isDimensional = 4;
void SystemCard::clear_isdimensional() {
  isdimensional_ = false;
}
bool SystemCard::isdimensional() const {
  // @@protoc_insertion_point(field_get:SystemCard.isDimensional)
  return isdimensional_;
}
void SystemCard::set_isdimensional(bool value) {
  
  isdimensional_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isDimensional)
}

// optional bool isHOG = 5;
void SystemCard::clear_ishog() {
  ishog_ = false;
}
bool SystemCard::ishog() const {
  // @@protoc_insertion_point(field_get:SystemCard.isHOG)
  return ishog_;
}
void SystemCard::set_ishog(bool value) {
  
  ishog_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isHOG)
}

// optional bool isTurnRate = 6;
void SystemCard::clear_isturnrate() {
  isturnrate_ = false;
}
bool SystemCard::isturnrate() const {
  // @@protoc_insertion_point(field_get:SystemCard.isTurnRate)
  return isturnrate_;
}
void SystemCard::set_isturnrate(bool value) {
  
  isturnrate_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.isTurnRate)
}

// optional int32 radiotype = 7;
void SystemCard::clear_radiotype() {
  radiotype_ = 0;
}
::google::protobuf::int32 SystemCard::radiotype() const {
  // @@protoc_insertion_point(field_get:SystemCard.radiotype)
  return radiotype_;
}
void SystemCard::set_radiotype(::google::protobuf::int32 value) {
  
  radiotype_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.radiotype)
}

// optional double voyage = 8;
void SystemCard::clear_voyage() {
  voyage_ = 0;
}
double SystemCard::voyage() const {
  // @@protoc_insertion_point(field_get:SystemCard.voyage)
  return voyage_;
}
void SystemCard::set_voyage(double value) {
  
  voyage_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.voyage)
}

// optional double time = 9;
void SystemCard::clear_time() {
  time_ = 0;
}
double SystemCard::time() const {
  // @@protoc_insertion_point(field_get:SystemCard.time)
  return time_;
}
void SystemCard::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.time)
}

// optional int32 latlon = 10;
void SystemCard::clear_latlon() {
  latlon_ = 0;
}
::google::protobuf::int32 SystemCard::latlon() const {
  // @@protoc_insertion_point(field_get:SystemCard.latlon)
  return latlon_;
}
void SystemCard::set_latlon(::google::protobuf::int32 value) {
  
  latlon_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.latlon)
}

// optional int32 speed = 11;
void SystemCard::clear_speed() {
  speed_ = 0;
}
::google::protobuf::int32 SystemCard::speed() const {
  // @@protoc_insertion_point(field_get:SystemCard.speed)
  return speed_;
}
void SystemCard::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.speed)
}

// optional int32 dist = 12;
void SystemCard::clear_dist() {
  dist_ = 0;
}
::google::protobuf::int32 SystemCard::dist() const {
  // @@protoc_insertion_point(field_get:SystemCard.dist)
  return dist_;
}
void SystemCard::set_dist(::google::protobuf::int32 value) {
  
  dist_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.dist)
}

// optional int32 depth = 13;
void SystemCard::clear_depth() {
  depth_ = 0;
}
::google::protobuf::int32 SystemCard::depth() const {
  // @@protoc_insertion_point(field_get:SystemCard.depth)
  return depth_;
}
void SystemCard::set_depth(::google::protobuf::int32 value) {
  
  depth_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.depth)
}

// repeated string displayset = 14;
int SystemCard::displayset_size() const {
  return displayset_.size();
}
void SystemCard::clear_displayset() {
  displayset_.Clear();
}
const ::std::string& SystemCard::displayset(int index) const {
  // @@protoc_insertion_point(field_get:SystemCard.displayset)
  return displayset_.Get(index);
}
::std::string* SystemCard::mutable_displayset(int index) {
  // @@protoc_insertion_point(field_mutable:SystemCard.displayset)
  return displayset_.Mutable(index);
}
void SystemCard::set_displayset(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SystemCard.displayset)
  displayset_.Mutable(index)->assign(value);
}
void SystemCard::set_displayset(int index, const char* value) {
  displayset_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SystemCard.displayset)
}
void SystemCard::set_displayset(int index, const char* value, size_t size) {
  displayset_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SystemCard.displayset)
}
::std::string* SystemCard::add_displayset() {
  // @@protoc_insertion_point(field_add_mutable:SystemCard.displayset)
  return displayset_.Add();
}
void SystemCard::add_displayset(const ::std::string& value) {
  displayset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SystemCard.displayset)
}
void SystemCard::add_displayset(const char* value) {
  displayset_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SystemCard.displayset)
}
void SystemCard::add_displayset(const char* value, size_t size) {
  displayset_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SystemCard.displayset)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SystemCard::displayset() const {
  // @@protoc_insertion_point(field_list:SystemCard.displayset)
  return displayset_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SystemCard::mutable_displayset() {
  // @@protoc_insertion_point(field_mutable_list:SystemCard.displayset)
  return &displayset_;
}

// optional .CardMesType type = 15;
void SystemCard::clear_type() {
  type_ = 0;
}
::CardMesType SystemCard::type() const {
  // @@protoc_insertion_point(field_get:SystemCard.type)
  return static_cast< ::CardMesType >(type_);
}
void SystemCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SystemCard.type)
}

inline const SystemCard* SystemCard::internal_default_instance() {
  return &SystemCard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DangerTargetCard::kUseridFieldNumber;
const int DangerTargetCard::kTargetFieldNumber;
const int DangerTargetCard::kDistFieldNumber;
const int DangerTargetCard::kMaxCPAFieldNumber;
const int DangerTargetCard::kMaxTCPAFieldNumber;
const int DangerTargetCard::kRadiotypeFieldNumber;
const int DangerTargetCard::kMinSpeedFieldNumber;
const int DangerTargetCard::kTypeFieldNumber;
const int DangerTargetCard::kPreTimeFieldNumber;
const int DangerTargetCard::kPreStarTimeFieldNumber;
const int DangerTargetCard::kPreEndTimeFieldNumber;
const int DangerTargetCard::kPreCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DangerTargetCard::DangerTargetCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_userhabit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DangerTargetCard)
}

void DangerTargetCard::InitAsDefaultInstance() {
}

DangerTargetCard::DangerTargetCard(const DangerTargetCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DangerTargetCard)
}

void DangerTargetCard::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxtcpa_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dist_, 0, reinterpret_cast<char*>(&pre_check_) -
    reinterpret_cast<char*>(&dist_) + sizeof(pre_check_));
  _cached_size_ = 0;
}

DangerTargetCard::~DangerTargetCard() {
  // @@protoc_insertion_point(destructor:DangerTargetCard)
  SharedDtor();
}

void DangerTargetCard::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxtcpa_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DangerTargetCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DangerTargetCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DangerTargetCard_descriptor_;
}

const DangerTargetCard& DangerTargetCard::default_instance() {
  protobuf_InitDefaults_userhabit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DangerTargetCard> DangerTargetCard_default_instance_;

DangerTargetCard* DangerTargetCard::New(::google::protobuf::Arena* arena) const {
  DangerTargetCard* n = new DangerTargetCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DangerTargetCard::Clear() {
// @@protoc_insertion_point(message_clear_start:DangerTargetCard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DangerTargetCard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DangerTargetCard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(dist_, type_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxtcpa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(pre_time_, pre_check_);

#undef ZR_HELPER_
#undef ZR_

}

bool DangerTargetCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DangerTargetCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DangerTargetCard.userid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Target;
        break;
      }

      // optional int32 Target = 2;
      case 2: {
        if (tag == 16) {
         parse_Target:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_dist;
        break;
      }

      // optional double dist = 3;
      case 3: {
        if (tag == 25) {
         parse_dist:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_MaxCPA;
        break;
      }

      // optional double MaxCPA = 4;
      case 4: {
        if (tag == 33) {
         parse_MaxCPA:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxcpa_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MaxTCPA;
        break;
      }

      // optional string MaxTCPA = 5;
      case 5: {
        if (tag == 42) {
         parse_MaxTCPA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maxtcpa()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maxtcpa().data(), this->maxtcpa().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DangerTargetCard.MaxTCPA"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_radiotype;
        break;
      }

      // optional int32 radiotype = 6;
      case 6: {
        if (tag == 48) {
         parse_radiotype:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiotype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_MinSpeed;
        break;
      }

      // optional double MinSpeed = 7;
      case 7: {
        if (tag == 57) {
         parse_MinSpeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // optional .CardMesType type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CardMesType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_pre_time;
        break;
      }

      // optional int32 pre_time = 9;
      case 9: {
        if (tag == 72) {
         parse_pre_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pre_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_pre_starTime;
        break;
      }

      // optional int64 pre_starTime = 10;
      case 10: {
        if (tag == 80) {
         parse_pre_starTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pre_startime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pre_endTime;
        break;
      }

      // optional int64 pre_endTime = 11;
      case 11: {
        if (tag == 88) {
         parse_pre_endTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pre_endtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_pre_check;
        break;
      }

      // optional .PreRadioType pre_check = 12;
      case 12: {
        if (tag == 96) {
         parse_pre_check:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pre_check(static_cast< ::PreRadioType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DangerTargetCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DangerTargetCard)
  return false;
#undef DO_
}

void DangerTargetCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DangerTargetCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DangerTargetCard.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional int32 Target = 2;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }

  // optional double dist = 3;
  if (this->dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dist(), output);
  }

  // optional double MaxCPA = 4;
  if (this->maxcpa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maxcpa(), output);
  }

  // optional string MaxTCPA = 5;
  if (this->maxtcpa().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxtcpa().data(), this->maxtcpa().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DangerTargetCard.MaxTCPA");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->maxtcpa(), output);
  }

  // optional int32 radiotype = 6;
  if (this->radiotype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->radiotype(), output);
  }

  // optional double MinSpeed = 7;
  if (this->minspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->minspeed(), output);
  }

  // optional .CardMesType type = 8;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  // optional int32 pre_time = 9;
  if (this->pre_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pre_time(), output);
  }

  // optional int64 pre_starTime = 10;
  if (this->pre_startime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->pre_startime(), output);
  }

  // optional int64 pre_endTime = 11;
  if (this->pre_endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->pre_endtime(), output);
  }

  // optional .PreRadioType pre_check = 12;
  if (this->pre_check() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->pre_check(), output);
  }

  // @@protoc_insertion_point(serialize_end:DangerTargetCard)
}

::google::protobuf::uint8* DangerTargetCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DangerTargetCard)
  // optional string userid = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DangerTargetCard.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional int32 Target = 2;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target(), target);
  }

  // optional double dist = 3;
  if (this->dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dist(), target);
  }

  // optional double MaxCPA = 4;
  if (this->maxcpa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maxcpa(), target);
  }

  // optional string MaxTCPA = 5;
  if (this->maxtcpa().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maxtcpa().data(), this->maxtcpa().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DangerTargetCard.MaxTCPA");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->maxtcpa(), target);
  }

  // optional int32 radiotype = 6;
  if (this->radiotype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->radiotype(), target);
  }

  // optional double MinSpeed = 7;
  if (this->minspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->minspeed(), target);
  }

  // optional .CardMesType type = 8;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  // optional int32 pre_time = 9;
  if (this->pre_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pre_time(), target);
  }

  // optional int64 pre_starTime = 10;
  if (this->pre_startime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->pre_startime(), target);
  }

  // optional int64 pre_endTime = 11;
  if (this->pre_endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->pre_endtime(), target);
  }

  // optional .PreRadioType pre_check = 12;
  if (this->pre_check() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->pre_check(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DangerTargetCard)
  return target;
}

size_t DangerTargetCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DangerTargetCard)
  size_t total_size = 0;

  // optional string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int32 Target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  // optional double dist = 3;
  if (this->dist() != 0) {
    total_size += 1 + 8;
  }

  // optional double MaxCPA = 4;
  if (this->maxcpa() != 0) {
    total_size += 1 + 8;
  }

  // optional string MaxTCPA = 5;
  if (this->maxtcpa().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maxtcpa());
  }

  // optional int32 radiotype = 6;
  if (this->radiotype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radiotype());
  }

  // optional double MinSpeed = 7;
  if (this->minspeed() != 0) {
    total_size += 1 + 8;
  }

  // optional .CardMesType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 pre_time = 9;
  if (this->pre_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pre_time());
  }

  // optional int64 pre_starTime = 10;
  if (this->pre_startime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pre_startime());
  }

  // optional int64 pre_endTime = 11;
  if (this->pre_endtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pre_endtime());
  }

  // optional .PreRadioType pre_check = 12;
  if (this->pre_check() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pre_check());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DangerTargetCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DangerTargetCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DangerTargetCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DangerTargetCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DangerTargetCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DangerTargetCard)
    UnsafeMergeFrom(*source);
  }
}

void DangerTargetCard::MergeFrom(const DangerTargetCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DangerTargetCard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DangerTargetCard::UnsafeMergeFrom(const DangerTargetCard& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.dist() != 0) {
    set_dist(from.dist());
  }
  if (from.maxcpa() != 0) {
    set_maxcpa(from.maxcpa());
  }
  if (from.maxtcpa().size() > 0) {

    maxtcpa_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maxtcpa_);
  }
  if (from.radiotype() != 0) {
    set_radiotype(from.radiotype());
  }
  if (from.minspeed() != 0) {
    set_minspeed(from.minspeed());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.pre_time() != 0) {
    set_pre_time(from.pre_time());
  }
  if (from.pre_startime() != 0) {
    set_pre_startime(from.pre_startime());
  }
  if (from.pre_endtime() != 0) {
    set_pre_endtime(from.pre_endtime());
  }
  if (from.pre_check() != 0) {
    set_pre_check(from.pre_check());
  }
}

void DangerTargetCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DangerTargetCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DangerTargetCard::CopyFrom(const DangerTargetCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DangerTargetCard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DangerTargetCard::IsInitialized() const {

  return true;
}

void DangerTargetCard::Swap(DangerTargetCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DangerTargetCard::InternalSwap(DangerTargetCard* other) {
  userid_.Swap(&other->userid_);
  std::swap(target_, other->target_);
  std::swap(dist_, other->dist_);
  std::swap(maxcpa_, other->maxcpa_);
  maxtcpa_.Swap(&other->maxtcpa_);
  std::swap(radiotype_, other->radiotype_);
  std::swap(minspeed_, other->minspeed_);
  std::swap(type_, other->type_);
  std::swap(pre_time_, other->pre_time_);
  std::swap(pre_startime_, other->pre_startime_);
  std::swap(pre_endtime_, other->pre_endtime_);
  std::swap(pre_check_, other->pre_check_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DangerTargetCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DangerTargetCard_descriptor_;
  metadata.reflection = DangerTargetCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DangerTargetCard

// optional string userid = 1;
void DangerTargetCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DangerTargetCard::userid() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DangerTargetCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DangerTargetCard.userid)
}
void DangerTargetCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DangerTargetCard.userid)
}
void DangerTargetCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DangerTargetCard.userid)
}
::std::string* DangerTargetCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:DangerTargetCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DangerTargetCard::release_userid() {
  // @@protoc_insertion_point(field_release:DangerTargetCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DangerTargetCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:DangerTargetCard.userid)
}

// optional int32 Target = 2;
void DangerTargetCard::clear_target() {
  target_ = 0;
}
::google::protobuf::int32 DangerTargetCard::target() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.Target)
  return target_;
}
void DangerTargetCard::set_target(::google::protobuf::int32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.Target)
}

// optional double dist = 3;
void DangerTargetCard::clear_dist() {
  dist_ = 0;
}
double DangerTargetCard::dist() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.dist)
  return dist_;
}
void DangerTargetCard::set_dist(double value) {
  
  dist_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.dist)
}

// optional double MaxCPA = 4;
void DangerTargetCard::clear_maxcpa() {
  maxcpa_ = 0;
}
double DangerTargetCard::maxcpa() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.MaxCPA)
  return maxcpa_;
}
void DangerTargetCard::set_maxcpa(double value) {
  
  maxcpa_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.MaxCPA)
}

// optional string MaxTCPA = 5;
void DangerTargetCard::clear_maxtcpa() {
  maxtcpa_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DangerTargetCard::maxtcpa() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.MaxTCPA)
  return maxtcpa_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DangerTargetCard::set_maxtcpa(const ::std::string& value) {
  
  maxtcpa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DangerTargetCard.MaxTCPA)
}
void DangerTargetCard::set_maxtcpa(const char* value) {
  
  maxtcpa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DangerTargetCard.MaxTCPA)
}
void DangerTargetCard::set_maxtcpa(const char* value, size_t size) {
  
  maxtcpa_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DangerTargetCard.MaxTCPA)
}
::std::string* DangerTargetCard::mutable_maxtcpa() {
  
  // @@protoc_insertion_point(field_mutable:DangerTargetCard.MaxTCPA)
  return maxtcpa_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DangerTargetCard::release_maxtcpa() {
  // @@protoc_insertion_point(field_release:DangerTargetCard.MaxTCPA)
  
  return maxtcpa_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DangerTargetCard::set_allocated_maxtcpa(::std::string* maxtcpa) {
  if (maxtcpa != NULL) {
    
  } else {
    
  }
  maxtcpa_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maxtcpa);
  // @@protoc_insertion_point(field_set_allocated:DangerTargetCard.MaxTCPA)
}

// optional int32 radiotype = 6;
void DangerTargetCard::clear_radiotype() {
  radiotype_ = 0;
}
::google::protobuf::int32 DangerTargetCard::radiotype() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.radiotype)
  return radiotype_;
}
void DangerTargetCard::set_radiotype(::google::protobuf::int32 value) {
  
  radiotype_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.radiotype)
}

// optional double MinSpeed = 7;
void DangerTargetCard::clear_minspeed() {
  minspeed_ = 0;
}
double DangerTargetCard::minspeed() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.MinSpeed)
  return minspeed_;
}
void DangerTargetCard::set_minspeed(double value) {
  
  minspeed_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.MinSpeed)
}

// optional .CardMesType type = 8;
void DangerTargetCard::clear_type() {
  type_ = 0;
}
::CardMesType DangerTargetCard::type() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.type)
  return static_cast< ::CardMesType >(type_);
}
void DangerTargetCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.type)
}

// optional int32 pre_time = 9;
void DangerTargetCard::clear_pre_time() {
  pre_time_ = 0;
}
::google::protobuf::int32 DangerTargetCard::pre_time() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_time)
  return pre_time_;
}
void DangerTargetCard::set_pre_time(::google::protobuf::int32 value) {
  
  pre_time_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_time)
}

// optional int64 pre_starTime = 10;
void DangerTargetCard::clear_pre_startime() {
  pre_startime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DangerTargetCard::pre_startime() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_starTime)
  return pre_startime_;
}
void DangerTargetCard::set_pre_startime(::google::protobuf::int64 value) {
  
  pre_startime_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_starTime)
}

// optional int64 pre_endTime = 11;
void DangerTargetCard::clear_pre_endtime() {
  pre_endtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DangerTargetCard::pre_endtime() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_endTime)
  return pre_endtime_;
}
void DangerTargetCard::set_pre_endtime(::google::protobuf::int64 value) {
  
  pre_endtime_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_endTime)
}

// optional .PreRadioType pre_check = 12;
void DangerTargetCard::clear_pre_check() {
  pre_check_ = 0;
}
::PreRadioType DangerTargetCard::pre_check() const {
  // @@protoc_insertion_point(field_get:DangerTargetCard.pre_check)
  return static_cast< ::PreRadioType >(pre_check_);
}
void DangerTargetCard::set_pre_check(::PreRadioType value) {
  
  pre_check_ = value;
  // @@protoc_insertion_point(field_set:DangerTargetCard.pre_check)
}

inline const DangerTargetCard* DangerTargetCard::internal_default_instance() {
  return &DangerTargetCard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetInfoCard::kTypeFieldNumber;
const int TargetInfoCard::kUseridFieldNumber;
const int TargetInfoCard::kTardataFieldNumber;
const int TargetInfoCard::kShowHistorFieldNumber;
const int TargetInfoCard::kTrackgapFieldNumber;
const int TargetInfoCard::kTrackgappointFieldNumber;
const int TargetInfoCard::kTrackspeedFieldNumber;
const int TargetInfoCard::kShowshipFieldNumber;
const int TargetInfoCard::kShowLigatureFieldNumber;
const int TargetInfoCard::kCountTimeFieldNumber;
const int TargetInfoCard::kPointcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetInfoCard::TargetInfoCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_userhabit_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:TargetInfoCard)
}

void TargetInfoCard::InitAsDefaultInstance() {
}

TargetInfoCard::TargetInfoCard(const TargetInfoCard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TargetInfoCard)
}

void TargetInfoCard::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&pointcount_) -
    reinterpret_cast<char*>(&type_) + sizeof(pointcount_));
  _cached_size_ = 0;
}

TargetInfoCard::~TargetInfoCard() {
  // @@protoc_insertion_point(destructor:TargetInfoCard)
  SharedDtor();
}

void TargetInfoCard::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TargetInfoCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetInfoCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetInfoCard_descriptor_;
}

const TargetInfoCard& TargetInfoCard::default_instance() {
  protobuf_InitDefaults_userhabit_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TargetInfoCard> TargetInfoCard_default_instance_;

TargetInfoCard* TargetInfoCard::New(::google::protobuf::Arena* arena) const {
  TargetInfoCard* n = new TargetInfoCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetInfoCard::Clear() {
// @@protoc_insertion_point(message_clear_start:TargetInfoCard)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TargetInfoCard, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TargetInfoCard*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, showship_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(showligature_, pointcount_);

#undef ZR_HELPER_
#undef ZR_

  tardata_.Clear();
}

bool TargetInfoCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TargetInfoCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CardMesType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::CardMesType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // optional string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TargetInfoCard.userid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tardata;
        break;
      }

      // repeated .TargetInfoData tardata = 3;
      case 3: {
        if (tag == 26) {
         parse_tardata:
          DO_(input->IncrementRecursionDepth());
         parse_loop_tardata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tardata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_tardata;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_showHistor;
        break;
      }

      // optional bool showHistor = 4;
      case 4: {
        if (tag == 32) {
         parse_showHistor:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showhistor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trackgap;
        break;
      }

      // optional int32 trackgap = 5;
      case 5: {
        if (tag == 40) {
         parse_trackgap:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trackgap_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_trackgappoint;
        break;
      }

      // optional double trackgappoint = 6;
      case 6: {
        if (tag == 49) {
         parse_trackgappoint:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trackgappoint_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_trackspeed;
        break;
      }

      // optional double trackspeed = 7;
      case 7: {
        if (tag == 57) {
         parse_trackspeed:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trackspeed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_showship;
        break;
      }

      // optional bool showship = 8;
      case 8: {
        if (tag == 64) {
         parse_showship:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showship_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_showLigature;
        break;
      }

      // optional bool showLigature = 9;
      case 9: {
        if (tag == 72) {
         parse_showLigature:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showligature_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_count_time;
        break;
      }

      // optional bool count_time = 10;
      case 10: {
        if (tag == 80) {
         parse_count_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &count_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_pointcount;
        break;
      }

      // optional int32 pointcount = 11;
      case 11: {
        if (tag == 88) {
         parse_pointcount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointcount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TargetInfoCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TargetInfoCard)
  return false;
#undef DO_
}

void TargetInfoCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TargetInfoCard)
  // optional .CardMesType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TargetInfoCard.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // repeated .TargetInfoData tardata = 3;
  for (unsigned int i = 0, n = this->tardata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tardata(i), output);
  }

  // optional bool showHistor = 4;
  if (this->showhistor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->showhistor(), output);
  }

  // optional int32 trackgap = 5;
  if (this->trackgap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->trackgap(), output);
  }

  // optional double trackgappoint = 6;
  if (this->trackgappoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->trackgappoint(), output);
  }

  // optional double trackspeed = 7;
  if (this->trackspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->trackspeed(), output);
  }

  // optional bool showship = 8;
  if (this->showship() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->showship(), output);
  }

  // optional bool showLigature = 9;
  if (this->showligature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->showligature(), output);
  }

  // optional bool count_time = 10;
  if (this->count_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->count_time(), output);
  }

  // optional int32 pointcount = 11;
  if (this->pointcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pointcount(), output);
  }

  // @@protoc_insertion_point(serialize_end:TargetInfoCard)
}

::google::protobuf::uint8* TargetInfoCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TargetInfoCard)
  // optional .CardMesType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TargetInfoCard.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // repeated .TargetInfoData tardata = 3;
  for (unsigned int i = 0, n = this->tardata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tardata(i), false, target);
  }

  // optional bool showHistor = 4;
  if (this->showhistor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->showhistor(), target);
  }

  // optional int32 trackgap = 5;
  if (this->trackgap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->trackgap(), target);
  }

  // optional double trackgappoint = 6;
  if (this->trackgappoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->trackgappoint(), target);
  }

  // optional double trackspeed = 7;
  if (this->trackspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->trackspeed(), target);
  }

  // optional bool showship = 8;
  if (this->showship() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->showship(), target);
  }

  // optional bool showLigature = 9;
  if (this->showligature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->showligature(), target);
  }

  // optional bool count_time = 10;
  if (this->count_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->count_time(), target);
  }

  // optional int32 pointcount = 11;
  if (this->pointcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pointcount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TargetInfoCard)
  return target;
}

size_t TargetInfoCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TargetInfoCard)
  size_t total_size = 0;

  // optional .CardMesType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional bool showHistor = 4;
  if (this->showhistor() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 trackgap = 5;
  if (this->trackgap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trackgap());
  }

  // optional double trackgappoint = 6;
  if (this->trackgappoint() != 0) {
    total_size += 1 + 8;
  }

  // optional double trackspeed = 7;
  if (this->trackspeed() != 0) {
    total_size += 1 + 8;
  }

  // optional bool showship = 8;
  if (this->showship() != 0) {
    total_size += 1 + 1;
  }

  // optional bool showLigature = 9;
  if (this->showligature() != 0) {
    total_size += 1 + 1;
  }

  // optional bool count_time = 10;
  if (this->count_time() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 pointcount = 11;
  if (this->pointcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pointcount());
  }

  // repeated .TargetInfoData tardata = 3;
  {
    unsigned int count = this->tardata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tardata(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetInfoCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TargetInfoCard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TargetInfoCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetInfoCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TargetInfoCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TargetInfoCard)
    UnsafeMergeFrom(*source);
  }
}

void TargetInfoCard::MergeFrom(const TargetInfoCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TargetInfoCard)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TargetInfoCard::UnsafeMergeFrom(const TargetInfoCard& from) {
  GOOGLE_DCHECK(&from != this);
  tardata_.MergeFrom(from.tardata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.showhistor() != 0) {
    set_showhistor(from.showhistor());
  }
  if (from.trackgap() != 0) {
    set_trackgap(from.trackgap());
  }
  if (from.trackgappoint() != 0) {
    set_trackgappoint(from.trackgappoint());
  }
  if (from.trackspeed() != 0) {
    set_trackspeed(from.trackspeed());
  }
  if (from.showship() != 0) {
    set_showship(from.showship());
  }
  if (from.showligature() != 0) {
    set_showligature(from.showligature());
  }
  if (from.count_time() != 0) {
    set_count_time(from.count_time());
  }
  if (from.pointcount() != 0) {
    set_pointcount(from.pointcount());
  }
}

void TargetInfoCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TargetInfoCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfoCard::CopyFrom(const TargetInfoCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TargetInfoCard)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TargetInfoCard::IsInitialized() const {

  return true;
}

void TargetInfoCard::Swap(TargetInfoCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetInfoCard::InternalSwap(TargetInfoCard* other) {
  std::swap(type_, other->type_);
  userid_.Swap(&other->userid_);
  tardata_.UnsafeArenaSwap(&other->tardata_);
  std::swap(showhistor_, other->showhistor_);
  std::swap(trackgap_, other->trackgap_);
  std::swap(trackgappoint_, other->trackgappoint_);
  std::swap(trackspeed_, other->trackspeed_);
  std::swap(showship_, other->showship_);
  std::swap(showligature_, other->showligature_);
  std::swap(count_time_, other->count_time_);
  std::swap(pointcount_, other->pointcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetInfoCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetInfoCard_descriptor_;
  metadata.reflection = TargetInfoCard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetInfoCard

// optional .CardMesType type = 1;
void TargetInfoCard::clear_type() {
  type_ = 0;
}
::CardMesType TargetInfoCard::type() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.type)
  return static_cast< ::CardMesType >(type_);
}
void TargetInfoCard::set_type(::CardMesType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.type)
}

// optional string userid = 2;
void TargetInfoCard::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TargetInfoCard::userid() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TargetInfoCard::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TargetInfoCard.userid)
}
void TargetInfoCard::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TargetInfoCard.userid)
}
void TargetInfoCard::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TargetInfoCard.userid)
}
::std::string* TargetInfoCard::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:TargetInfoCard.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TargetInfoCard::release_userid() {
  // @@protoc_insertion_point(field_release:TargetInfoCard.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TargetInfoCard::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:TargetInfoCard.userid)
}

// repeated .TargetInfoData tardata = 3;
int TargetInfoCard::tardata_size() const {
  return tardata_.size();
}
void TargetInfoCard::clear_tardata() {
  tardata_.Clear();
}
const ::TargetInfoData& TargetInfoCard::tardata(int index) const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.tardata)
  return tardata_.Get(index);
}
::TargetInfoData* TargetInfoCard::mutable_tardata(int index) {
  // @@protoc_insertion_point(field_mutable:TargetInfoCard.tardata)
  return tardata_.Mutable(index);
}
::TargetInfoData* TargetInfoCard::add_tardata() {
  // @@protoc_insertion_point(field_add:TargetInfoCard.tardata)
  return tardata_.Add();
}
::google::protobuf::RepeatedPtrField< ::TargetInfoData >*
TargetInfoCard::mutable_tardata() {
  // @@protoc_insertion_point(field_mutable_list:TargetInfoCard.tardata)
  return &tardata_;
}
const ::google::protobuf::RepeatedPtrField< ::TargetInfoData >&
TargetInfoCard::tardata() const {
  // @@protoc_insertion_point(field_list:TargetInfoCard.tardata)
  return tardata_;
}

// optional bool showHistor = 4;
void TargetInfoCard::clear_showhistor() {
  showhistor_ = false;
}
bool TargetInfoCard::showhistor() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.showHistor)
  return showhistor_;
}
void TargetInfoCard::set_showhistor(bool value) {
  
  showhistor_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.showHistor)
}

// optional int32 trackgap = 5;
void TargetInfoCard::clear_trackgap() {
  trackgap_ = 0;
}
::google::protobuf::int32 TargetInfoCard::trackgap() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.trackgap)
  return trackgap_;
}
void TargetInfoCard::set_trackgap(::google::protobuf::int32 value) {
  
  trackgap_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.trackgap)
}

// optional double trackgappoint = 6;
void TargetInfoCard::clear_trackgappoint() {
  trackgappoint_ = 0;
}
double TargetInfoCard::trackgappoint() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.trackgappoint)
  return trackgappoint_;
}
void TargetInfoCard::set_trackgappoint(double value) {
  
  trackgappoint_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.trackgappoint)
}

// optional double trackspeed = 7;
void TargetInfoCard::clear_trackspeed() {
  trackspeed_ = 0;
}
double TargetInfoCard::trackspeed() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.trackspeed)
  return trackspeed_;
}
void TargetInfoCard::set_trackspeed(double value) {
  
  trackspeed_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.trackspeed)
}

// optional bool showship = 8;
void TargetInfoCard::clear_showship() {
  showship_ = false;
}
bool TargetInfoCard::showship() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.showship)
  return showship_;
}
void TargetInfoCard::set_showship(bool value) {
  
  showship_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.showship)
}

// optional bool showLigature = 9;
void TargetInfoCard::clear_showligature() {
  showligature_ = false;
}
bool TargetInfoCard::showligature() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.showLigature)
  return showligature_;
}
void TargetInfoCard::set_showligature(bool value) {
  
  showligature_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.showLigature)
}

// optional bool count_time = 10;
void TargetInfoCard::clear_count_time() {
  count_time_ = false;
}
bool TargetInfoCard::count_time() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.count_time)
  return count_time_;
}
void TargetInfoCard::set_count_time(bool value) {
  
  count_time_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.count_time)
}

// optional int32 pointcount = 11;
void TargetInfoCard::clear_pointcount() {
  pointcount_ = 0;
}
::google::protobuf::int32 TargetInfoCard::pointcount() const {
  // @@protoc_insertion_point(field_get:TargetInfoCard.pointcount)
  return pointcount_;
}
void TargetInfoCard::set_pointcount(::google::protobuf::int32 value) {
  
  pointcount_ = value;
  // @@protoc_insertion_point(field_set:TargetInfoCard.pointcount)
}

inline const TargetInfoCard* TargetInfoCard::internal_default_instance() {
  return &TargetInfoCard_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
