// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deviceinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "deviceinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceDetail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_deviceinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_deviceinfo_2eproto() {
  protobuf_AddDesc_deviceinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "deviceinfo.proto");
  GOOGLE_CHECK(file != NULL);
  Device_descriptor_ = file->message_type(0);
  static const int Device_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, status_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::internal_default_instance(),
      Device_offsets_,
      -1,
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_));
  DeviceDetail_descriptor_ = file->message_type(1);
  static const int DeviceDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDetail, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDetail, monitorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDetail, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDetail, time_),
  };
  DeviceDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceDetail_descriptor_,
      DeviceDetail::internal_default_instance(),
      DeviceDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceDetail, _internal_metadata_));
  DeviceType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_deviceinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, Device::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceDetail_descriptor_, DeviceDetail::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_deviceinfo_2eproto() {
  Device_default_instance_.Shutdown();
  delete Device_reflection_;
  DeviceDetail_default_instance_.Shutdown();
  delete DeviceDetail_reflection_;
}

void protobuf_InitDefaults_deviceinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Device_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DeviceDetail_default_instance_.DefaultConstruct();
  Device_default_instance_.get_mutable()->InitAsDefaultInstance();
  DeviceDetail_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_deviceinfo_2eproto_once_);
void protobuf_InitDefaults_deviceinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_deviceinfo_2eproto_once_,
                 &protobuf_InitDefaults_deviceinfo_2eproto_impl);
}
void protobuf_AddDesc_deviceinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_deviceinfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020deviceinfo.proto\"3\n\006Device\022\031\n\004type\030\001 \001"
    "(\0162\013.DeviceType\022\016\n\006status\030\003 \001(\010\"U\n\014Devic"
    "eDetail\022\022\n\nDeviceName\030\001 \001(\t\022\023\n\013MonitorNa"
    "me\030\002 \001(\t\022\016\n\006status\030\003 \001(\010\022\014\n\004time\030\004 \001(\003*\216"
    "\001\n\nDeviceType\022\r\n\tDeviceAIS\020\000\022\016\n\nDeviceCC"
    "TV\020\001\022\r\n\tDeviceVHF\020\002\022\017\n\013DeviceRadar\020\003\022\017\n\013"
    "DeviceTrack\020\004\022\017\n\013DeviceMeteo\020\005\022\r\n\tDevice"
    "SQL\020\006\022\020\n\014DeviceServer\020\007b\006proto3", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "deviceinfo.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_deviceinfo_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_deviceinfo_2eproto_once_);
void protobuf_AddDesc_deviceinfo_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_deviceinfo_2eproto_once_,
                 &protobuf_AddDesc_deviceinfo_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_deviceinfo_2eproto {
  StaticDescriptorInitializer_deviceinfo_2eproto() {
    protobuf_AddDesc_deviceinfo_2eproto();
  }
} static_descriptor_initializer_deviceinfo_2eproto_;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kTypeFieldNumber;
const int Device::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_deviceinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:Device)
}

void Device::InitAsDefaultInstance() {
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Device)
}

void Device::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_) + sizeof(status_));
  _cached_size_ = 0;
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:Device)
  SharedDtor();
}

void Device::SharedDtor() {
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  protobuf_InitDefaults_deviceinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Device> Device_default_instance_;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:Device)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Device, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Device*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DeviceType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::DeviceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Device)
  // optional .DeviceType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Device)
  // optional .DeviceType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Device)
  size_t total_size = 0;

  // optional .DeviceType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bool status = 3;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Device* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Device)
    UnsafeMergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Device)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Device::UnsafeMergeFrom(const Device& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Device)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  std::swap(type_, other->type_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional .DeviceType type = 1;
void Device::clear_type() {
  type_ = 0;
}
::DeviceType Device::type() const {
  // @@protoc_insertion_point(field_get:Device.type)
  return static_cast< ::DeviceType >(type_);
}
void Device::set_type(::DeviceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Device.type)
}

// optional bool status = 3;
void Device::clear_status() {
  status_ = false;
}
bool Device::status() const {
  // @@protoc_insertion_point(field_get:Device.status)
  return status_;
}
void Device::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:Device.status)
}

inline const Device* Device::internal_default_instance() {
  return &Device_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceDetail::kDeviceNameFieldNumber;
const int DeviceDetail::kMonitorNameFieldNumber;
const int DeviceDetail::kStatusFieldNumber;
const int DeviceDetail::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceDetail::DeviceDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_deviceinfo_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeviceDetail)
}

void DeviceDetail::InitAsDefaultInstance() {
}

DeviceDetail::DeviceDetail(const DeviceDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeviceDetail)
}

void DeviceDetail::SharedCtor() {
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&time_) + sizeof(status_));
  _cached_size_ = 0;
}

DeviceDetail::~DeviceDetail() {
  // @@protoc_insertion_point(destructor:DeviceDetail)
  SharedDtor();
}

void DeviceDetail::SharedDtor() {
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceDetail_descriptor_;
}

const DeviceDetail& DeviceDetail::default_instance() {
  protobuf_InitDefaults_deviceinfo_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DeviceDetail> DeviceDetail_default_instance_;

DeviceDetail* DeviceDetail::New(::google::protobuf::Arena* arena) const {
  DeviceDetail* n = new DeviceDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:DeviceDetail)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceDetail, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceDetail*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(time_, status_);
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  monitorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool DeviceDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeviceDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string DeviceName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceDetail.DeviceName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonitorName;
        break;
      }

      // optional string MonitorName = 2;
      case 2: {
        if (tag == 18) {
         parse_MonitorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monitorname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->monitorname().data(), this->monitorname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DeviceDetail.MonitorName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional bool status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeviceDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeviceDetail)
  return false;
#undef DO_
}

void DeviceDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeviceDetail)
  // optional string DeviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceDetail.DeviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->devicename(), output);
  }

  // optional string MonitorName = 2;
  if (this->monitorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitorname().data(), this->monitorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceDetail.MonitorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->monitorname(), output);
  }

  // optional bool status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->status(), output);
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:DeviceDetail)
}

::google::protobuf::uint8* DeviceDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeviceDetail)
  // optional string DeviceName = 1;
  if (this->devicename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceDetail.DeviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->devicename(), target);
  }

  // optional string MonitorName = 2;
  if (this->monitorname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->monitorname().data(), this->monitorname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DeviceDetail.MonitorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->monitorname(), target);
  }

  // optional bool status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->status(), target);
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DeviceDetail)
  return target;
}

size_t DeviceDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeviceDetail)
  size_t total_size = 0;

  // optional string DeviceName = 1;
  if (this->devicename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicename());
  }

  // optional string MonitorName = 2;
  if (this->monitorname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->monitorname());
  }

  // optional bool status = 3;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 time = 4;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeviceDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeviceDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeviceDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeviceDetail)
    UnsafeMergeFrom(*source);
  }
}

void DeviceDetail::MergeFrom(const DeviceDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeviceDetail)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DeviceDetail::UnsafeMergeFrom(const DeviceDetail& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.devicename().size() > 0) {

    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  if (from.monitorname().size() > 0) {

    monitorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.monitorname_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void DeviceDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeviceDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceDetail::CopyFrom(const DeviceDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeviceDetail)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DeviceDetail::IsInitialized() const {

  return true;
}

void DeviceDetail::Swap(DeviceDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceDetail::InternalSwap(DeviceDetail* other) {
  devicename_.Swap(&other->devicename_);
  monitorname_.Swap(&other->monitorname_);
  std::swap(status_, other->status_);
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceDetail_descriptor_;
  metadata.reflection = DeviceDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceDetail

// optional string DeviceName = 1;
void DeviceDetail::clear_devicename() {
  devicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceDetail::devicename() const {
  // @@protoc_insertion_point(field_get:DeviceDetail.DeviceName)
  return devicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceDetail::set_devicename(const ::std::string& value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceDetail.DeviceName)
}
void DeviceDetail::set_devicename(const char* value) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceDetail.DeviceName)
}
void DeviceDetail::set_devicename(const char* value, size_t size) {
  
  devicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceDetail.DeviceName)
}
::std::string* DeviceDetail::mutable_devicename() {
  
  // @@protoc_insertion_point(field_mutable:DeviceDetail.DeviceName)
  return devicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceDetail::release_devicename() {
  // @@protoc_insertion_point(field_release:DeviceDetail.DeviceName)
  
  return devicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceDetail::set_allocated_devicename(::std::string* devicename) {
  if (devicename != NULL) {
    
  } else {
    
  }
  devicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicename);
  // @@protoc_insertion_point(field_set_allocated:DeviceDetail.DeviceName)
}

// optional string MonitorName = 2;
void DeviceDetail::clear_monitorname() {
  monitorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DeviceDetail::monitorname() const {
  // @@protoc_insertion_point(field_get:DeviceDetail.MonitorName)
  return monitorname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceDetail::set_monitorname(const ::std::string& value) {
  
  monitorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeviceDetail.MonitorName)
}
void DeviceDetail::set_monitorname(const char* value) {
  
  monitorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeviceDetail.MonitorName)
}
void DeviceDetail::set_monitorname(const char* value, size_t size) {
  
  monitorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeviceDetail.MonitorName)
}
::std::string* DeviceDetail::mutable_monitorname() {
  
  // @@protoc_insertion_point(field_mutable:DeviceDetail.MonitorName)
  return monitorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeviceDetail::release_monitorname() {
  // @@protoc_insertion_point(field_release:DeviceDetail.MonitorName)
  
  return monitorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeviceDetail::set_allocated_monitorname(::std::string* monitorname) {
  if (monitorname != NULL) {
    
  } else {
    
  }
  monitorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitorname);
  // @@protoc_insertion_point(field_set_allocated:DeviceDetail.MonitorName)
}

// optional bool status = 3;
void DeviceDetail::clear_status() {
  status_ = false;
}
bool DeviceDetail::status() const {
  // @@protoc_insertion_point(field_get:DeviceDetail.status)
  return status_;
}
void DeviceDetail::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:DeviceDetail.status)
}

// optional int64 time = 4;
void DeviceDetail::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DeviceDetail::time() const {
  // @@protoc_insertion_point(field_get:DeviceDetail.time)
  return time_;
}
void DeviceDetail::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:DeviceDetail.time)
}

inline const DeviceDetail* DeviceDetail::internal_default_instance() {
  return &DeviceDetail_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
