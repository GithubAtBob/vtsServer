// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ellipse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ellipse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EllipseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EllipseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EllipseRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EllipseRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ellipse_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ellipse_2eproto() {
  protobuf_AddDesc_ellipse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ellipse.proto");
  GOOGLE_CHECK(file != NULL);
  EllipseRequest_descriptor_ = file->message_type(0);
  static const int EllipseRequest_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, longaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, shortaxis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, linestyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, fullstyle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, linewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, waringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, waringtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, drawman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, isshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, linecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, fullcolor_),
  };
  EllipseRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EllipseRequest_descriptor_,
      EllipseRequest::internal_default_instance(),
      EllipseRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(EllipseRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRequest, _internal_metadata_));
  EllipseRepsone_descriptor_ = file->message_type(1);
  static const int EllipseRepsone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRepsone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRepsone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRepsone, ellipses_),
  };
  EllipseRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EllipseRepsone_descriptor_,
      EllipseRepsone::internal_default_instance(),
      EllipseRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(EllipseRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EllipseRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ellipse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EllipseRequest_descriptor_, EllipseRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EllipseRepsone_descriptor_, EllipseRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ellipse_2eproto() {
  EllipseRequest_default_instance_.Shutdown();
  delete EllipseRequest_reflection_;
  EllipseRepsone_default_instance_.Shutdown();
  delete EllipseRepsone_reflection_;
}

void protobuf_InitDefaults_ellipse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  EllipseRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  EllipseRepsone_default_instance_.DefaultConstruct();
  EllipseRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  EllipseRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ellipse_2eproto_once_);
void protobuf_InitDefaults_ellipse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ellipse_2eproto_once_,
                 &protobuf_InitDefaults_ellipse_2eproto_impl);
}
void protobuf_AddDesc_ellipse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ellipse_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rellipse.proto\"\236\002\n\016EllipseRequest\022\014\n\004ty"
    "pe\030\001 \001(\005\022\n\n\002ID\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003la"
    "t\030\004 \001(\001\022\013\n\003lon\030\005 \001(\001\022\020\n\010longaxis\030\006 \001(\001\022\021"
    "\n\tshortaxis\030\007 \001(\001\022\021\n\tlinestyle\030\010 \001(\005\022\021\n\t"
    "fullstyle\030\t \001(\005\022\021\n\tlinewidth\030\n \001(\005\022\020\n\010wa"
    "ringID\030\013 \003(\005\022\022\n\nwaringtype\030\014 \001(\t\022\017\n\007draw"
    "man\030\r \001(\t\022\017\n\007isshare\030\016 \001(\010\022\021\n\tlinecolor\030"
    "\017 \001(\t\022\021\n\tfullcolor\030\020 \001(\t\"Q\n\016EllipseRepso"
    "ne\022\014\n\004type\030\001 \001(\005\022\016\n\006result\030\002 \001(\t\022!\n\010elli"
    "pses\030\003 \003(\0132\017.EllipseRequestb\006proto3", 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ellipse.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ellipse_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ellipse_2eproto_once_);
void protobuf_AddDesc_ellipse_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ellipse_2eproto_once_,
                 &protobuf_AddDesc_ellipse_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ellipse_2eproto {
  StaticDescriptorInitializer_ellipse_2eproto() {
    protobuf_AddDesc_ellipse_2eproto();
  }
} static_descriptor_initializer_ellipse_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EllipseRequest::kTypeFieldNumber;
const int EllipseRequest::kIDFieldNumber;
const int EllipseRequest::kNameFieldNumber;
const int EllipseRequest::kLatFieldNumber;
const int EllipseRequest::kLonFieldNumber;
const int EllipseRequest::kLongaxisFieldNumber;
const int EllipseRequest::kShortaxisFieldNumber;
const int EllipseRequest::kLinestyleFieldNumber;
const int EllipseRequest::kFullstyleFieldNumber;
const int EllipseRequest::kLinewidthFieldNumber;
const int EllipseRequest::kWaringIDFieldNumber;
const int EllipseRequest::kWaringtypeFieldNumber;
const int EllipseRequest::kDrawmanFieldNumber;
const int EllipseRequest::kIsshareFieldNumber;
const int EllipseRequest::kLinecolorFieldNumber;
const int EllipseRequest::kFullcolorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EllipseRequest::EllipseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ellipse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EllipseRequest)
}

void EllipseRequest::InitAsDefaultInstance() {
}

EllipseRequest::EllipseRequest(const EllipseRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EllipseRequest)
}

void EllipseRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullcolor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&isshare_) -
    reinterpret_cast<char*>(&lat_) + sizeof(isshare_));
  _cached_size_ = 0;
}

EllipseRequest::~EllipseRequest() {
  // @@protoc_insertion_point(destructor:EllipseRequest)
  SharedDtor();
}

void EllipseRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  waringtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullcolor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EllipseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EllipseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EllipseRequest_descriptor_;
}

const EllipseRequest& EllipseRequest::default_instance() {
  protobuf_InitDefaults_ellipse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EllipseRequest> EllipseRequest_default_instance_;

EllipseRequest* EllipseRequest::New(::google::protobuf::Arena* arena) const {
  EllipseRequest* n = new EllipseRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EllipseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EllipseRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EllipseRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EllipseRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, shortaxis_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(fullstyle_, isshare_);
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fullcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  waringid_.Clear();
}

bool EllipseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EllipseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (tag == 18) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EllipseRequest.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EllipseRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lat;
        break;
      }

      // optional double lat = 4;
      case 4: {
        if (tag == 33) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lon;
        break;
      }

      // optional double lon = 5;
      case 5: {
        if (tag == 41) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_longaxis;
        break;
      }

      // optional double longaxis = 6;
      case 6: {
        if (tag == 49) {
         parse_longaxis:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longaxis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_shortaxis;
        break;
      }

      // optional double shortaxis = 7;
      case 7: {
        if (tag == 57) {
         parse_shortaxis:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortaxis_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_linestyle;
        break;
      }

      // optional int32 linestyle = 8;
      case 8: {
        if (tag == 64) {
         parse_linestyle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linestyle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_fullstyle;
        break;
      }

      // optional int32 fullstyle = 9;
      case 9: {
        if (tag == 72) {
         parse_fullstyle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullstyle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_linewidth;
        break;
      }

      // optional int32 linewidth = 10;
      case 10: {
        if (tag == 80) {
         parse_linewidth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linewidth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_waringID;
        break;
      }

      // repeated int32 waringID = 11;
      case 11: {
        if (tag == 90) {
         parse_waringID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_waringid())));
        } else if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90, input, this->mutable_waringid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_waringtype;
        break;
      }

      // optional string waringtype = 12;
      case 12: {
        if (tag == 98) {
         parse_waringtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_waringtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->waringtype().data(), this->waringtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EllipseRequest.waringtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_drawman;
        break;
      }

      // optional string drawman = 13;
      case 13: {
        if (tag == 106) {
         parse_drawman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawman()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drawman().data(), this->drawman().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EllipseRequest.drawman"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isshare;
        break;
      }

      // optional bool isshare = 14;
      case 14: {
        if (tag == 112) {
         parse_isshare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_linecolor;
        break;
      }

      // optional string linecolor = 15;
      case 15: {
        if (tag == 122) {
         parse_linecolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linecolor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->linecolor().data(), this->linecolor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EllipseRequest.linecolor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_fullcolor;
        break;
      }

      // optional string fullcolor = 16;
      case 16: {
        if (tag == 130) {
         parse_fullcolor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fullcolor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fullcolor().data(), this->fullcolor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EllipseRequest.fullcolor"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EllipseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EllipseRequest)
  return false;
#undef DO_
}

void EllipseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EllipseRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // optional double longaxis = 6;
  if (this->longaxis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longaxis(), output);
  }

  // optional double shortaxis = 7;
  if (this->shortaxis() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->shortaxis(), output);
  }

  // optional int32 linestyle = 8;
  if (this->linestyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->linestyle(), output);
  }

  // optional int32 fullstyle = 9;
  if (this->fullstyle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fullstyle(), output);
  }

  // optional int32 linewidth = 10;
  if (this->linewidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->linewidth(), output);
  }

  // repeated int32 waringID = 11;
  if (this->waringid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_waringid_cached_byte_size_);
  }
  for (int i = 0; i < this->waringid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->waringid(i), output);
  }

  // optional string waringtype = 12;
  if (this->waringtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringtype().data(), this->waringtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.waringtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->waringtype(), output);
  }

  // optional string drawman = 13;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.drawman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->drawman(), output);
  }

  // optional bool isshare = 14;
  if (this->isshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isshare(), output);
  }

  // optional string linecolor = 15;
  if (this->linecolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linecolor().data(), this->linecolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.linecolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->linecolor(), output);
  }

  // optional string fullcolor = 16;
  if (this->fullcolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullcolor().data(), this->fullcolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.fullcolor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->fullcolor(), output);
  }

  // @@protoc_insertion_point(serialize_end:EllipseRequest)
}

::google::protobuf::uint8* EllipseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EllipseRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // optional double longaxis = 6;
  if (this->longaxis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longaxis(), target);
  }

  // optional double shortaxis = 7;
  if (this->shortaxis() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->shortaxis(), target);
  }

  // optional int32 linestyle = 8;
  if (this->linestyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->linestyle(), target);
  }

  // optional int32 fullstyle = 9;
  if (this->fullstyle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fullstyle(), target);
  }

  // optional int32 linewidth = 10;
  if (this->linewidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->linewidth(), target);
  }

  // repeated int32 waringID = 11;
  if (this->waringid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _waringid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->waringid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->waringid(i), target);
  }

  // optional string waringtype = 12;
  if (this->waringtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->waringtype().data(), this->waringtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.waringtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->waringtype(), target);
  }

  // optional string drawman = 13;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.drawman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->drawman(), target);
  }

  // optional bool isshare = 14;
  if (this->isshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isshare(), target);
  }

  // optional string linecolor = 15;
  if (this->linecolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->linecolor().data(), this->linecolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.linecolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->linecolor(), target);
  }

  // optional string fullcolor = 16;
  if (this->fullcolor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fullcolor().data(), this->fullcolor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRequest.fullcolor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->fullcolor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:EllipseRequest)
  return target;
}

size_t EllipseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EllipseRequest)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // optional double longaxis = 6;
  if (this->longaxis() != 0) {
    total_size += 1 + 8;
  }

  // optional double shortaxis = 7;
  if (this->shortaxis() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 linestyle = 8;
  if (this->linestyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->linestyle());
  }

  // optional int32 fullstyle = 9;
  if (this->fullstyle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fullstyle());
  }

  // optional int32 linewidth = 10;
  if (this->linewidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->linewidth());
  }

  // optional string waringtype = 12;
  if (this->waringtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->waringtype());
  }

  // optional string drawman = 13;
  if (this->drawman().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drawman());
  }

  // optional bool isshare = 14;
  if (this->isshare() != 0) {
    total_size += 1 + 1;
  }

  // optional string linecolor = 15;
  if (this->linecolor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->linecolor());
  }

  // optional string fullcolor = 16;
  if (this->fullcolor().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fullcolor());
  }

  // repeated int32 waringID = 11;
  {
    size_t data_size = 0;
    unsigned int count = this->waringid_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->waringid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _waringid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EllipseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EllipseRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EllipseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EllipseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EllipseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EllipseRequest)
    UnsafeMergeFrom(*source);
  }
}

void EllipseRequest::MergeFrom(const EllipseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EllipseRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EllipseRequest::UnsafeMergeFrom(const EllipseRequest& from) {
  GOOGLE_DCHECK(&from != this);
  waringid_.UnsafeMergeFrom(from.waringid_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.longaxis() != 0) {
    set_longaxis(from.longaxis());
  }
  if (from.shortaxis() != 0) {
    set_shortaxis(from.shortaxis());
  }
  if (from.linestyle() != 0) {
    set_linestyle(from.linestyle());
  }
  if (from.fullstyle() != 0) {
    set_fullstyle(from.fullstyle());
  }
  if (from.linewidth() != 0) {
    set_linewidth(from.linewidth());
  }
  if (from.waringtype().size() > 0) {

    waringtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.waringtype_);
  }
  if (from.drawman().size() > 0) {

    drawman_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drawman_);
  }
  if (from.isshare() != 0) {
    set_isshare(from.isshare());
  }
  if (from.linecolor().size() > 0) {

    linecolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linecolor_);
  }
  if (from.fullcolor().size() > 0) {

    fullcolor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fullcolor_);
  }
}

void EllipseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EllipseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EllipseRequest::CopyFrom(const EllipseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EllipseRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EllipseRequest::IsInitialized() const {

  return true;
}

void EllipseRequest::Swap(EllipseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EllipseRequest::InternalSwap(EllipseRequest* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(longaxis_, other->longaxis_);
  std::swap(shortaxis_, other->shortaxis_);
  std::swap(linestyle_, other->linestyle_);
  std::swap(fullstyle_, other->fullstyle_);
  std::swap(linewidth_, other->linewidth_);
  waringid_.UnsafeArenaSwap(&other->waringid_);
  waringtype_.Swap(&other->waringtype_);
  drawman_.Swap(&other->drawman_);
  std::swap(isshare_, other->isshare_);
  linecolor_.Swap(&other->linecolor_);
  fullcolor_.Swap(&other->fullcolor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EllipseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EllipseRequest_descriptor_;
  metadata.reflection = EllipseRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EllipseRequest

// optional int32 type = 1;
void EllipseRequest::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 EllipseRequest::type() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.type)
  return type_;
}
void EllipseRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.type)
}

// optional string ID = 2;
void EllipseRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EllipseRequest::id() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EllipseRequest.ID)
}
void EllipseRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EllipseRequest.ID)
}
void EllipseRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EllipseRequest.ID)
}
::std::string* EllipseRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:EllipseRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EllipseRequest::release_id() {
  // @@protoc_insertion_point(field_release:EllipseRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:EllipseRequest.ID)
}

// optional string name = 3;
void EllipseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EllipseRequest::name() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EllipseRequest.name)
}
void EllipseRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EllipseRequest.name)
}
void EllipseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EllipseRequest.name)
}
::std::string* EllipseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:EllipseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EllipseRequest::release_name() {
  // @@protoc_insertion_point(field_release:EllipseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:EllipseRequest.name)
}

// optional double lat = 4;
void EllipseRequest::clear_lat() {
  lat_ = 0;
}
double EllipseRequest::lat() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.lat)
  return lat_;
}
void EllipseRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.lat)
}

// optional double lon = 5;
void EllipseRequest::clear_lon() {
  lon_ = 0;
}
double EllipseRequest::lon() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.lon)
  return lon_;
}
void EllipseRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.lon)
}

// optional double longaxis = 6;
void EllipseRequest::clear_longaxis() {
  longaxis_ = 0;
}
double EllipseRequest::longaxis() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.longaxis)
  return longaxis_;
}
void EllipseRequest::set_longaxis(double value) {
  
  longaxis_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.longaxis)
}

// optional double shortaxis = 7;
void EllipseRequest::clear_shortaxis() {
  shortaxis_ = 0;
}
double EllipseRequest::shortaxis() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.shortaxis)
  return shortaxis_;
}
void EllipseRequest::set_shortaxis(double value) {
  
  shortaxis_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.shortaxis)
}

// optional int32 linestyle = 8;
void EllipseRequest::clear_linestyle() {
  linestyle_ = 0;
}
::google::protobuf::int32 EllipseRequest::linestyle() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.linestyle)
  return linestyle_;
}
void EllipseRequest::set_linestyle(::google::protobuf::int32 value) {
  
  linestyle_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.linestyle)
}

// optional int32 fullstyle = 9;
void EllipseRequest::clear_fullstyle() {
  fullstyle_ = 0;
}
::google::protobuf::int32 EllipseRequest::fullstyle() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.fullstyle)
  return fullstyle_;
}
void EllipseRequest::set_fullstyle(::google::protobuf::int32 value) {
  
  fullstyle_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.fullstyle)
}

// optional int32 linewidth = 10;
void EllipseRequest::clear_linewidth() {
  linewidth_ = 0;
}
::google::protobuf::int32 EllipseRequest::linewidth() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.linewidth)
  return linewidth_;
}
void EllipseRequest::set_linewidth(::google::protobuf::int32 value) {
  
  linewidth_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.linewidth)
}

// repeated int32 waringID = 11;
int EllipseRequest::waringid_size() const {
  return waringid_.size();
}
void EllipseRequest::clear_waringid() {
  waringid_.Clear();
}
::google::protobuf::int32 EllipseRequest::waringid(int index) const {
  // @@protoc_insertion_point(field_get:EllipseRequest.waringID)
  return waringid_.Get(index);
}
void EllipseRequest::set_waringid(int index, ::google::protobuf::int32 value) {
  waringid_.Set(index, value);
  // @@protoc_insertion_point(field_set:EllipseRequest.waringID)
}
void EllipseRequest::add_waringid(::google::protobuf::int32 value) {
  waringid_.Add(value);
  // @@protoc_insertion_point(field_add:EllipseRequest.waringID)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EllipseRequest::waringid() const {
  // @@protoc_insertion_point(field_list:EllipseRequest.waringID)
  return waringid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EllipseRequest::mutable_waringid() {
  // @@protoc_insertion_point(field_mutable_list:EllipseRequest.waringID)
  return &waringid_;
}

// optional string waringtype = 12;
void EllipseRequest::clear_waringtype() {
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EllipseRequest::waringtype() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.waringtype)
  return waringtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_waringtype(const ::std::string& value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EllipseRequest.waringtype)
}
void EllipseRequest::set_waringtype(const char* value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EllipseRequest.waringtype)
}
void EllipseRequest::set_waringtype(const char* value, size_t size) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EllipseRequest.waringtype)
}
::std::string* EllipseRequest::mutable_waringtype() {
  
  // @@protoc_insertion_point(field_mutable:EllipseRequest.waringtype)
  return waringtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EllipseRequest::release_waringtype() {
  // @@protoc_insertion_point(field_release:EllipseRequest.waringtype)
  
  return waringtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_allocated_waringtype(::std::string* waringtype) {
  if (waringtype != NULL) {
    
  } else {
    
  }
  waringtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waringtype);
  // @@protoc_insertion_point(field_set_allocated:EllipseRequest.waringtype)
}

// optional string drawman = 13;
void EllipseRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EllipseRequest::drawman() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EllipseRequest.drawman)
}
void EllipseRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EllipseRequest.drawman)
}
void EllipseRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EllipseRequest.drawman)
}
::std::string* EllipseRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:EllipseRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EllipseRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:EllipseRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:EllipseRequest.drawman)
}

// optional bool isshare = 14;
void EllipseRequest::clear_isshare() {
  isshare_ = false;
}
bool EllipseRequest::isshare() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.isshare)
  return isshare_;
}
void EllipseRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:EllipseRequest.isshare)
}

// optional string linecolor = 15;
void EllipseRequest::clear_linecolor() {
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EllipseRequest::linecolor() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.linecolor)
  return linecolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_linecolor(const ::std::string& value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EllipseRequest.linecolor)
}
void EllipseRequest::set_linecolor(const char* value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EllipseRequest.linecolor)
}
void EllipseRequest::set_linecolor(const char* value, size_t size) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EllipseRequest.linecolor)
}
::std::string* EllipseRequest::mutable_linecolor() {
  
  // @@protoc_insertion_point(field_mutable:EllipseRequest.linecolor)
  return linecolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EllipseRequest::release_linecolor() {
  // @@protoc_insertion_point(field_release:EllipseRequest.linecolor)
  
  return linecolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_allocated_linecolor(::std::string* linecolor) {
  if (linecolor != NULL) {
    
  } else {
    
  }
  linecolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linecolor);
  // @@protoc_insertion_point(field_set_allocated:EllipseRequest.linecolor)
}

// optional string fullcolor = 16;
void EllipseRequest::clear_fullcolor() {
  fullcolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EllipseRequest::fullcolor() const {
  // @@protoc_insertion_point(field_get:EllipseRequest.fullcolor)
  return fullcolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_fullcolor(const ::std::string& value) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EllipseRequest.fullcolor)
}
void EllipseRequest::set_fullcolor(const char* value) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EllipseRequest.fullcolor)
}
void EllipseRequest::set_fullcolor(const char* value, size_t size) {
  
  fullcolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EllipseRequest.fullcolor)
}
::std::string* EllipseRequest::mutable_fullcolor() {
  
  // @@protoc_insertion_point(field_mutable:EllipseRequest.fullcolor)
  return fullcolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EllipseRequest::release_fullcolor() {
  // @@protoc_insertion_point(field_release:EllipseRequest.fullcolor)
  
  return fullcolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRequest::set_allocated_fullcolor(::std::string* fullcolor) {
  if (fullcolor != NULL) {
    
  } else {
    
  }
  fullcolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fullcolor);
  // @@protoc_insertion_point(field_set_allocated:EllipseRequest.fullcolor)
}

inline const EllipseRequest* EllipseRequest::internal_default_instance() {
  return &EllipseRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EllipseRepsone::kTypeFieldNumber;
const int EllipseRepsone::kResultFieldNumber;
const int EllipseRepsone::kEllipsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EllipseRepsone::EllipseRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ellipse_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:EllipseRepsone)
}

void EllipseRepsone::InitAsDefaultInstance() {
}

EllipseRepsone::EllipseRepsone(const EllipseRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EllipseRepsone)
}

void EllipseRepsone::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

EllipseRepsone::~EllipseRepsone() {
  // @@protoc_insertion_point(destructor:EllipseRepsone)
  SharedDtor();
}

void EllipseRepsone::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EllipseRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EllipseRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EllipseRepsone_descriptor_;
}

const EllipseRepsone& EllipseRepsone::default_instance() {
  protobuf_InitDefaults_ellipse_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EllipseRepsone> EllipseRepsone_default_instance_;

EllipseRepsone* EllipseRepsone::New(::google::protobuf::Arena* arena) const {
  EllipseRepsone* n = new EllipseRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EllipseRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:EllipseRepsone)
  type_ = 0;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ellipses_.Clear();
}

bool EllipseRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EllipseRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EllipseRepsone.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ellipses;
        break;
      }

      // repeated .EllipseRequest ellipses = 3;
      case 3: {
        if (tag == 26) {
         parse_ellipses:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ellipses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ellipses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_ellipses;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EllipseRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EllipseRepsone)
  return false;
#undef DO_
}

void EllipseRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EllipseRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRepsone.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // repeated .EllipseRequest ellipses = 3;
  for (unsigned int i = 0, n = this->ellipses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ellipses(i), output);
  }

  // @@protoc_insertion_point(serialize_end:EllipseRepsone)
}

::google::protobuf::uint8* EllipseRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EllipseRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EllipseRepsone.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // repeated .EllipseRequest ellipses = 3;
  for (unsigned int i = 0, n = this->ellipses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->ellipses(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:EllipseRepsone)
  return target;
}

size_t EllipseRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EllipseRepsone)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // repeated .EllipseRequest ellipses = 3;
  {
    unsigned int count = this->ellipses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ellipses(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EllipseRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EllipseRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EllipseRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EllipseRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EllipseRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EllipseRepsone)
    UnsafeMergeFrom(*source);
  }
}

void EllipseRepsone::MergeFrom(const EllipseRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EllipseRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EllipseRepsone::UnsafeMergeFrom(const EllipseRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  ellipses_.MergeFrom(from.ellipses_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void EllipseRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EllipseRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EllipseRepsone::CopyFrom(const EllipseRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EllipseRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EllipseRepsone::IsInitialized() const {

  return true;
}

void EllipseRepsone::Swap(EllipseRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EllipseRepsone::InternalSwap(EllipseRepsone* other) {
  std::swap(type_, other->type_);
  result_.Swap(&other->result_);
  ellipses_.UnsafeArenaSwap(&other->ellipses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EllipseRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EllipseRepsone_descriptor_;
  metadata.reflection = EllipseRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EllipseRepsone

// optional int32 type = 1;
void EllipseRepsone::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 EllipseRepsone::type() const {
  // @@protoc_insertion_point(field_get:EllipseRepsone.type)
  return type_;
}
void EllipseRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:EllipseRepsone.type)
}

// optional string result = 2;
void EllipseRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EllipseRepsone::result() const {
  // @@protoc_insertion_point(field_get:EllipseRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EllipseRepsone.result)
}
void EllipseRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EllipseRepsone.result)
}
void EllipseRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EllipseRepsone.result)
}
::std::string* EllipseRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:EllipseRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EllipseRepsone::release_result() {
  // @@protoc_insertion_point(field_release:EllipseRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EllipseRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:EllipseRepsone.result)
}

// repeated .EllipseRequest ellipses = 3;
int EllipseRepsone::ellipses_size() const {
  return ellipses_.size();
}
void EllipseRepsone::clear_ellipses() {
  ellipses_.Clear();
}
const ::EllipseRequest& EllipseRepsone::ellipses(int index) const {
  // @@protoc_insertion_point(field_get:EllipseRepsone.ellipses)
  return ellipses_.Get(index);
}
::EllipseRequest* EllipseRepsone::mutable_ellipses(int index) {
  // @@protoc_insertion_point(field_mutable:EllipseRepsone.ellipses)
  return ellipses_.Mutable(index);
}
::EllipseRequest* EllipseRepsone::add_ellipses() {
  // @@protoc_insertion_point(field_add:EllipseRepsone.ellipses)
  return ellipses_.Add();
}
::google::protobuf::RepeatedPtrField< ::EllipseRequest >*
EllipseRepsone::mutable_ellipses() {
  // @@protoc_insertion_point(field_mutable_list:EllipseRepsone.ellipses)
  return &ellipses_;
}
const ::google::protobuf::RepeatedPtrField< ::EllipseRequest >&
EllipseRepsone::ellipses() const {
  // @@protoc_insertion_point(field_list:EllipseRepsone.ellipses)
  return ellipses_;
}

inline const EllipseRepsone* EllipseRepsone::internal_default_instance() {
  return &EllipseRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
