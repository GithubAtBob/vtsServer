// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PointMes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PointMes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PointMes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointMes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PointMes_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_PointMes_2eproto() {
  protobuf_AddDesc_PointMes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PointMes.proto");
  GOOGLE_CHECK(file != NULL);
  PointMes_descriptor_ = file->message_type(0);
  static const int PointMes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMes, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMes, lon_),
  };
  PointMes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointMes_descriptor_,
      PointMes::internal_default_instance(),
      PointMes_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointMes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointMes, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PointMes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointMes_descriptor_, PointMes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PointMes_2eproto() {
  PointMes_default_instance_.Shutdown();
  delete PointMes_reflection_;
}

void protobuf_InitDefaults_PointMes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  PointMes_default_instance_.DefaultConstruct();
  PointMes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_PointMes_2eproto_once_);
void protobuf_InitDefaults_PointMes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_PointMes_2eproto_once_,
                 &protobuf_InitDefaults_PointMes_2eproto_impl);
}
void protobuf_AddDesc_PointMes_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_PointMes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016PointMes.proto\"$\n\010PointMes\022\013\n\003lat\030\001 \001("
    "\001\022\013\n\003lon\030\002 \001(\001b\006proto3", 62);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PointMes.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PointMes_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PointMes_2eproto_once_);
void protobuf_AddDesc_PointMes_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PointMes_2eproto_once_,
                 &protobuf_AddDesc_PointMes_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PointMes_2eproto {
  StaticDescriptorInitializer_PointMes_2eproto() {
    protobuf_AddDesc_PointMes_2eproto();
  }
} static_descriptor_initializer_PointMes_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointMes::kLatFieldNumber;
const int PointMes::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointMes::PointMes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_PointMes_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:PointMes)
}

void PointMes::InitAsDefaultInstance() {
}

PointMes::PointMes(const PointMes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PointMes)
}

void PointMes::SharedCtor() {
  ::memset(&lat_, 0, reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_) + sizeof(lon_));
  _cached_size_ = 0;
}

PointMes::~PointMes() {
  // @@protoc_insertion_point(destructor:PointMes)
  SharedDtor();
}

void PointMes::SharedDtor() {
}

void PointMes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointMes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointMes_descriptor_;
}

const PointMes& PointMes::default_instance() {
  protobuf_InitDefaults_PointMes_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PointMes> PointMes_default_instance_;

PointMes* PointMes::New(::google::protobuf::Arena* arena) const {
  PointMes* n = new PointMes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointMes::Clear() {
// @@protoc_insertion_point(message_clear_start:PointMes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointMes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointMes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, lon_);

#undef ZR_HELPER_
#undef ZR_

}

bool PointMes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PointMes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lat = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lon;
        break;
      }

      // optional double lon = 2;
      case 2: {
        if (tag == 17) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PointMes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PointMes)
  return false;
#undef DO_
}

void PointMes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PointMes)
  // optional double lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // @@protoc_insertion_point(serialize_end:PointMes)
}

::google::protobuf::uint8* PointMes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PointMes)
  // optional double lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // optional double lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PointMes)
  return target;
}

size_t PointMes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PointMes)
  size_t total_size = 0;

  // optional double lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointMes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PointMes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PointMes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointMes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PointMes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PointMes)
    UnsafeMergeFrom(*source);
  }
}

void PointMes::MergeFrom(const PointMes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PointMes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PointMes::UnsafeMergeFrom(const PointMes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void PointMes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PointMes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointMes::CopyFrom(const PointMes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PointMes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PointMes::IsInitialized() const {

  return true;
}

void PointMes::Swap(PointMes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointMes::InternalSwap(PointMes* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointMes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointMes_descriptor_;
  metadata.reflection = PointMes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointMes

// optional double lat = 1;
void PointMes::clear_lat() {
  lat_ = 0;
}
double PointMes::lat() const {
  // @@protoc_insertion_point(field_get:PointMes.lat)
  return lat_;
}
void PointMes::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:PointMes.lat)
}

// optional double lon = 2;
void PointMes::clear_lon() {
  lon_ = 0;
}
double PointMes::lon() const {
  // @@protoc_insertion_point(field_get:PointMes.lon)
  return lon_;
}
void PointMes::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:PointMes.lon)
}

inline const PointMes* PointMes::internal_default_instance() {
  return &PointMes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
