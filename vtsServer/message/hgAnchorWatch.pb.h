// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgAnchorWatch.proto

#ifndef PROTOBUF_hgAnchorWatch_2eproto__INCLUDED
#define PROTOBUF_hgAnchorWatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgAnchorWatch_2eproto();
void protobuf_InitDefaults_hgAnchorWatch_2eproto();
void protobuf_AssignDesc_hgAnchorWatch_2eproto();
void protobuf_ShutdownFile_hgAnchorWatch_2eproto();

class hgAnchorWatch;
class hgAnchorWatchRepsone;

// ===================================================================

class hgAnchorWatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgAnchorWatch) */ {
 public:
  hgAnchorWatch();
  virtual ~hgAnchorWatch();

  hgAnchorWatch(const hgAnchorWatch& from);

  inline hgAnchorWatch& operator=(const hgAnchorWatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgAnchorWatch& default_instance();

  static const hgAnchorWatch* internal_default_instance();

  void Swap(hgAnchorWatch* other);

  // implements Message ----------------------------------------------

  inline hgAnchorWatch* New() const { return New(NULL); }

  hgAnchorWatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgAnchorWatch& from);
  void MergeFrom(const hgAnchorWatch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgAnchorWatch* other);
  void UnsafeMergeFrom(const hgAnchorWatch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MMSI = 1;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 1;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional bool AnchorWatch = 2;
  void clear_anchorwatch();
  static const int kAnchorWatchFieldNumber = 2;
  bool anchorwatch() const;
  void set_anchorwatch(bool value);

  // optional double Clubbing = 3;
  void clear_clubbing();
  static const int kClubbingFieldNumber = 3;
  double clubbing() const;
  void set_clubbing(double value);

  // optional double Dragging = 4;
  void clear_dragging();
  static const int kDraggingFieldNumber = 4;
  double dragging() const;
  void set_dragging(double value);

  // optional double Lat = 5;
  void clear_lat();
  static const int kLatFieldNumber = 5;
  double lat() const;
  void set_lat(double value);

  // optional double Lon = 6;
  void clear_lon();
  static const int kLonFieldNumber = 6;
  double lon() const;
  void set_lon(double value);

  // @@protoc_insertion_point(class_scope:hgAnchorWatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  double clubbing_;
  double dragging_;
  double lat_;
  double lon_;
  bool anchorwatch_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgAnchorWatch_2eproto_impl();
  friend void  protobuf_AddDesc_hgAnchorWatch_2eproto_impl();
  friend void protobuf_AssignDesc_hgAnchorWatch_2eproto();
  friend void protobuf_ShutdownFile_hgAnchorWatch_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgAnchorWatch> hgAnchorWatch_default_instance_;

// -------------------------------------------------------------------

class hgAnchorWatchRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgAnchorWatchRepsone) */ {
 public:
  hgAnchorWatchRepsone();
  virtual ~hgAnchorWatchRepsone();

  hgAnchorWatchRepsone(const hgAnchorWatchRepsone& from);

  inline hgAnchorWatchRepsone& operator=(const hgAnchorWatchRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgAnchorWatchRepsone& default_instance();

  static const hgAnchorWatchRepsone* internal_default_instance();

  void Swap(hgAnchorWatchRepsone* other);

  // implements Message ----------------------------------------------

  inline hgAnchorWatchRepsone* New() const { return New(NULL); }

  hgAnchorWatchRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgAnchorWatchRepsone& from);
  void MergeFrom(const hgAnchorWatchRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgAnchorWatchRepsone* other);
  void UnsafeMergeFrom(const hgAnchorWatchRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hgAnchorWatchRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgAnchorWatch_2eproto_impl();
  friend void  protobuf_AddDesc_hgAnchorWatch_2eproto_impl();
  friend void protobuf_AssignDesc_hgAnchorWatch_2eproto();
  friend void protobuf_ShutdownFile_hgAnchorWatch_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgAnchorWatchRepsone> hgAnchorWatchRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgAnchorWatch

// optional string MMSI = 1;
inline void hgAnchorWatch::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgAnchorWatch::mmsi() const {
  // @@protoc_insertion_point(field_get:hgAnchorWatch.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAnchorWatch::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgAnchorWatch.MMSI)
}
inline void hgAnchorWatch::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgAnchorWatch.MMSI)
}
inline void hgAnchorWatch::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgAnchorWatch.MMSI)
}
inline ::std::string* hgAnchorWatch::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgAnchorWatch.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgAnchorWatch::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgAnchorWatch.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgAnchorWatch::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgAnchorWatch.MMSI)
}

// optional bool AnchorWatch = 2;
inline void hgAnchorWatch::clear_anchorwatch() {
  anchorwatch_ = false;
}
inline bool hgAnchorWatch::anchorwatch() const {
  // @@protoc_insertion_point(field_get:hgAnchorWatch.AnchorWatch)
  return anchorwatch_;
}
inline void hgAnchorWatch::set_anchorwatch(bool value) {
  
  anchorwatch_ = value;
  // @@protoc_insertion_point(field_set:hgAnchorWatch.AnchorWatch)
}

// optional double Clubbing = 3;
inline void hgAnchorWatch::clear_clubbing() {
  clubbing_ = 0;
}
inline double hgAnchorWatch::clubbing() const {
  // @@protoc_insertion_point(field_get:hgAnchorWatch.Clubbing)
  return clubbing_;
}
inline void hgAnchorWatch::set_clubbing(double value) {
  
  clubbing_ = value;
  // @@protoc_insertion_point(field_set:hgAnchorWatch.Clubbing)
}

// optional double Dragging = 4;
inline void hgAnchorWatch::clear_dragging() {
  dragging_ = 0;
}
inline double hgAnchorWatch::dragging() const {
  // @@protoc_insertion_point(field_get:hgAnchorWatch.Dragging)
  return dragging_;
}
inline void hgAnchorWatch::set_dragging(double value) {
  
  dragging_ = value;
  // @@protoc_insertion_point(field_set:hgAnchorWatch.Dragging)
}

// optional double Lat = 5;
inline void hgAnchorWatch::clear_lat() {
  lat_ = 0;
}
inline double hgAnchorWatch::lat() const {
  // @@protoc_insertion_point(field_get:hgAnchorWatch.Lat)
  return lat_;
}
inline void hgAnchorWatch::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgAnchorWatch.Lat)
}

// optional double Lon = 6;
inline void hgAnchorWatch::clear_lon() {
  lon_ = 0;
}
inline double hgAnchorWatch::lon() const {
  // @@protoc_insertion_point(field_get:hgAnchorWatch.Lon)
  return lon_;
}
inline void hgAnchorWatch::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgAnchorWatch.Lon)
}

inline const hgAnchorWatch* hgAnchorWatch::internal_default_instance() {
  return &hgAnchorWatch_default_instance_.get();
}
// -------------------------------------------------------------------

// hgAnchorWatchRepsone

inline const hgAnchorWatchRepsone* hgAnchorWatchRepsone::internal_default_instance() {
  return &hgAnchorWatchRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgAnchorWatch_2eproto__INCLUDED
