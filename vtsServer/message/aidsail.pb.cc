// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aidsail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "aidsail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AidSailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AidSailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AidSailRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AidSailRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_aidsail_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_aidsail_2eproto() {
  protobuf_AddDesc_aidsail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "aidsail.proto");
  GOOGLE_CHECK(file != NULL);
  AidSailRequest_descriptor_ = file->message_type(0);
  static const int AidSailRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, remarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, iconurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, drawman_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, isshare_),
  };
  AidSailRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AidSailRequest_descriptor_,
      AidSailRequest::internal_default_instance(),
      AidSailRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AidSailRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRequest, _internal_metadata_));
  AidSailRepsone_descriptor_ = file->message_type(1);
  static const int AidSailRepsone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRepsone, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRepsone, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRepsone, aidsails_),
  };
  AidSailRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AidSailRepsone_descriptor_,
      AidSailRepsone::internal_default_instance(),
      AidSailRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(AidSailRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidSailRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_aidsail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AidSailRequest_descriptor_, AidSailRequest::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AidSailRepsone_descriptor_, AidSailRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_aidsail_2eproto() {
  AidSailRequest_default_instance_.Shutdown();
  delete AidSailRequest_reflection_;
  AidSailRepsone_default_instance_.Shutdown();
  delete AidSailRepsone_reflection_;
}

void protobuf_InitDefaults_aidsail_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  AidSailRequest_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AidSailRepsone_default_instance_.DefaultConstruct();
  AidSailRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
  AidSailRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_aidsail_2eproto_once_);
void protobuf_InitDefaults_aidsail_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_aidsail_2eproto_once_,
                 &protobuf_InitDefaults_aidsail_2eproto_impl);
}
void protobuf_AddDesc_aidsail_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_aidsail_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\raidsail.proto\"\226\001\n\016AidSailRequest\022\014\n\004ty"
    "pe\030\001 \001(\005\022\n\n\002ID\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\013\n\003la"
    "t\030\004 \001(\001\022\013\n\003lon\030\005 \001(\001\022\017\n\007remarks\030\006 \001(\t\022\017\n"
    "\007iconURL\030\007 \001(\t\022\017\n\007drawman\030\010 \001(\t\022\017\n\007issha"
    "re\030\t \001(\010\"Q\n\016AidSailRepsone\022\014\n\004type\030\001 \001(\005"
    "\022\016\n\006result\030\002 \001(\t\022!\n\010aidsails\030\003 \003(\0132\017.Aid"
    "SailRequestb\006proto3", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aidsail.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_aidsail_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_aidsail_2eproto_once_);
void protobuf_AddDesc_aidsail_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_aidsail_2eproto_once_,
                 &protobuf_AddDesc_aidsail_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_aidsail_2eproto {
  StaticDescriptorInitializer_aidsail_2eproto() {
    protobuf_AddDesc_aidsail_2eproto();
  }
} static_descriptor_initializer_aidsail_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AidSailRequest::kTypeFieldNumber;
const int AidSailRequest::kIDFieldNumber;
const int AidSailRequest::kNameFieldNumber;
const int AidSailRequest::kLatFieldNumber;
const int AidSailRequest::kLonFieldNumber;
const int AidSailRequest::kRemarksFieldNumber;
const int AidSailRequest::kIconURLFieldNumber;
const int AidSailRequest::kDrawmanFieldNumber;
const int AidSailRequest::kIsshareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AidSailRequest::AidSailRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aidsail_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:AidSailRequest)
}

void AidSailRequest::InitAsDefaultInstance() {
}

AidSailRequest::AidSailRequest(const AidSailRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AidSailRequest)
}

void AidSailRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lat_, 0, reinterpret_cast<char*>(&isshare_) -
    reinterpret_cast<char*>(&lat_) + sizeof(isshare_));
  _cached_size_ = 0;
}

AidSailRequest::~AidSailRequest() {
  // @@protoc_insertion_point(destructor:AidSailRequest)
  SharedDtor();
}

void AidSailRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AidSailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AidSailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AidSailRequest_descriptor_;
}

const AidSailRequest& AidSailRequest::default_instance() {
  protobuf_InitDefaults_aidsail_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AidSailRequest> AidSailRequest_default_instance_;

AidSailRequest* AidSailRequest::New(::google::protobuf::Arena* arena) const {
  AidSailRequest* n = new AidSailRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AidSailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AidSailRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AidSailRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AidSailRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, type_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isshare_ = false;

#undef ZR_HELPER_
#undef ZR_

}

bool AidSailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AidSailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ID;
        break;
      }

      // optional string ID = 2;
      case 2: {
        if (tag == 18) {
         parse_ID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AidSailRequest.ID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AidSailRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lat;
        break;
      }

      // optional double lat = 4;
      case 4: {
        if (tag == 33) {
         parse_lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lon;
        break;
      }

      // optional double lon = 5;
      case 5: {
        if (tag == 41) {
         parse_lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_remarks;
        break;
      }

      // optional string remarks = 6;
      case 6: {
        if (tag == 50) {
         parse_remarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remarks()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remarks().data(), this->remarks().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AidSailRequest.remarks"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_iconURL;
        break;
      }

      // optional string iconURL = 7;
      case 7: {
        if (tag == 58) {
         parse_iconURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AidSailRequest.iconURL"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_drawman;
        break;
      }

      // optional string drawman = 8;
      case 8: {
        if (tag == 66) {
         parse_drawman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drawman()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drawman().data(), this->drawman().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AidSailRequest.drawman"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_isshare;
        break;
      }

      // optional bool isshare = 9;
      case 9: {
        if (tag == 72) {
         parse_isshare:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AidSailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AidSailRequest)
  return false;
#undef DO_
}

void AidSailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AidSailRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.ID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lat(), output);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // optional string remarks = 6;
  if (this->remarks().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remarks().data(), this->remarks().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.remarks");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->remarks(), output);
  }

  // optional string iconURL = 7;
  if (this->iconurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.iconURL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->iconurl(), output);
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.drawman");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->drawman(), output);
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isshare(), output);
  }

  // @@protoc_insertion_point(serialize_end:AidSailRequest)
}

::google::protobuf::uint8* AidSailRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AidSailRequest)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.ID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lat(), target);
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // optional string remarks = 6;
  if (this->remarks().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remarks().data(), this->remarks().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.remarks");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->remarks(), target);
  }

  // optional string iconURL = 7;
  if (this->iconurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.iconURL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->iconurl(), target);
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drawman().data(), this->drawman().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRequest.drawman");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->drawman(), target);
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isshare(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AidSailRequest)
  return target;
}

size_t AidSailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AidSailRequest)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string ID = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional double lat = 4;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double lon = 5;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  // optional string remarks = 6;
  if (this->remarks().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remarks());
  }

  // optional string iconURL = 7;
  if (this->iconurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iconurl());
  }

  // optional string drawman = 8;
  if (this->drawman().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drawman());
  }

  // optional bool isshare = 9;
  if (this->isshare() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AidSailRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AidSailRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AidSailRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AidSailRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AidSailRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AidSailRequest)
    UnsafeMergeFrom(*source);
  }
}

void AidSailRequest::MergeFrom(const AidSailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AidSailRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AidSailRequest::UnsafeMergeFrom(const AidSailRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.remarks().size() > 0) {

    remarks_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remarks_);
  }
  if (from.iconurl().size() > 0) {

    iconurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconurl_);
  }
  if (from.drawman().size() > 0) {

    drawman_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drawman_);
  }
  if (from.isshare() != 0) {
    set_isshare(from.isshare());
  }
}

void AidSailRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AidSailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidSailRequest::CopyFrom(const AidSailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AidSailRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AidSailRequest::IsInitialized() const {

  return true;
}

void AidSailRequest::Swap(AidSailRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AidSailRequest::InternalSwap(AidSailRequest* other) {
  std::swap(type_, other->type_);
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  remarks_.Swap(&other->remarks_);
  iconurl_.Swap(&other->iconurl_);
  drawman_.Swap(&other->drawman_);
  std::swap(isshare_, other->isshare_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AidSailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AidSailRequest_descriptor_;
  metadata.reflection = AidSailRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AidSailRequest

// optional int32 type = 1;
void AidSailRequest::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 AidSailRequest::type() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.type)
  return type_;
}
void AidSailRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AidSailRequest.type)
}

// optional string ID = 2;
void AidSailRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AidSailRequest::id() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AidSailRequest.ID)
}
void AidSailRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AidSailRequest.ID)
}
void AidSailRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AidSailRequest.ID)
}
::std::string* AidSailRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:AidSailRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AidSailRequest::release_id() {
  // @@protoc_insertion_point(field_release:AidSailRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AidSailRequest.ID)
}

// optional string name = 3;
void AidSailRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AidSailRequest::name() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AidSailRequest.name)
}
void AidSailRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AidSailRequest.name)
}
void AidSailRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AidSailRequest.name)
}
::std::string* AidSailRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AidSailRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AidSailRequest::release_name() {
  // @@protoc_insertion_point(field_release:AidSailRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AidSailRequest.name)
}

// optional double lat = 4;
void AidSailRequest::clear_lat() {
  lat_ = 0;
}
double AidSailRequest::lat() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.lat)
  return lat_;
}
void AidSailRequest::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:AidSailRequest.lat)
}

// optional double lon = 5;
void AidSailRequest::clear_lon() {
  lon_ = 0;
}
double AidSailRequest::lon() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.lon)
  return lon_;
}
void AidSailRequest::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:AidSailRequest.lon)
}

// optional string remarks = 6;
void AidSailRequest::clear_remarks() {
  remarks_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AidSailRequest::remarks() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.remarks)
  return remarks_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_remarks(const ::std::string& value) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AidSailRequest.remarks)
}
void AidSailRequest::set_remarks(const char* value) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AidSailRequest.remarks)
}
void AidSailRequest::set_remarks(const char* value, size_t size) {
  
  remarks_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AidSailRequest.remarks)
}
::std::string* AidSailRequest::mutable_remarks() {
  
  // @@protoc_insertion_point(field_mutable:AidSailRequest.remarks)
  return remarks_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AidSailRequest::release_remarks() {
  // @@protoc_insertion_point(field_release:AidSailRequest.remarks)
  
  return remarks_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_allocated_remarks(::std::string* remarks) {
  if (remarks != NULL) {
    
  } else {
    
  }
  remarks_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remarks);
  // @@protoc_insertion_point(field_set_allocated:AidSailRequest.remarks)
}

// optional string iconURL = 7;
void AidSailRequest::clear_iconurl() {
  iconurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AidSailRequest::iconurl() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.iconURL)
  return iconurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_iconurl(const ::std::string& value) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AidSailRequest.iconURL)
}
void AidSailRequest::set_iconurl(const char* value) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AidSailRequest.iconURL)
}
void AidSailRequest::set_iconurl(const char* value, size_t size) {
  
  iconurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AidSailRequest.iconURL)
}
::std::string* AidSailRequest::mutable_iconurl() {
  
  // @@protoc_insertion_point(field_mutable:AidSailRequest.iconURL)
  return iconurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AidSailRequest::release_iconurl() {
  // @@protoc_insertion_point(field_release:AidSailRequest.iconURL)
  
  return iconurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_allocated_iconurl(::std::string* iconurl) {
  if (iconurl != NULL) {
    
  } else {
    
  }
  iconurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconurl);
  // @@protoc_insertion_point(field_set_allocated:AidSailRequest.iconURL)
}

// optional string drawman = 8;
void AidSailRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AidSailRequest::drawman() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AidSailRequest.drawman)
}
void AidSailRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AidSailRequest.drawman)
}
void AidSailRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AidSailRequest.drawman)
}
::std::string* AidSailRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:AidSailRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AidSailRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:AidSailRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:AidSailRequest.drawman)
}

// optional bool isshare = 9;
void AidSailRequest::clear_isshare() {
  isshare_ = false;
}
bool AidSailRequest::isshare() const {
  // @@protoc_insertion_point(field_get:AidSailRequest.isshare)
  return isshare_;
}
void AidSailRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:AidSailRequest.isshare)
}

inline const AidSailRequest* AidSailRequest::internal_default_instance() {
  return &AidSailRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AidSailRepsone::kTypeFieldNumber;
const int AidSailRepsone::kResultFieldNumber;
const int AidSailRepsone::kAidsailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AidSailRepsone::AidSailRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_aidsail_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:AidSailRepsone)
}

void AidSailRepsone::InitAsDefaultInstance() {
}

AidSailRepsone::AidSailRepsone(const AidSailRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AidSailRepsone)
}

void AidSailRepsone::SharedCtor() {
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

AidSailRepsone::~AidSailRepsone() {
  // @@protoc_insertion_point(destructor:AidSailRepsone)
  SharedDtor();
}

void AidSailRepsone::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AidSailRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AidSailRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AidSailRepsone_descriptor_;
}

const AidSailRepsone& AidSailRepsone::default_instance() {
  protobuf_InitDefaults_aidsail_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AidSailRepsone> AidSailRepsone_default_instance_;

AidSailRepsone* AidSailRepsone::New(::google::protobuf::Arena* arena) const {
  AidSailRepsone* n = new AidSailRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AidSailRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:AidSailRepsone)
  type_ = 0;
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  aidsails_.Clear();
}

bool AidSailRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AidSailRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "AidSailRepsone.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_aidsails;
        break;
      }

      // repeated .AidSailRequest aidsails = 3;
      case 3: {
        if (tag == 26) {
         parse_aidsails:
          DO_(input->IncrementRecursionDepth());
         parse_loop_aidsails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_aidsails()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_aidsails;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AidSailRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AidSailRepsone)
  return false;
#undef DO_
}

void AidSailRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AidSailRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRepsone.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  // repeated .AidSailRequest aidsails = 3;
  for (unsigned int i = 0, n = this->aidsails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->aidsails(i), output);
  }

  // @@protoc_insertion_point(serialize_end:AidSailRepsone)
}

::google::protobuf::uint8* AidSailRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AidSailRepsone)
  // optional int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "AidSailRepsone.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  // repeated .AidSailRequest aidsails = 3;
  for (unsigned int i = 0, n = this->aidsails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->aidsails(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AidSailRepsone)
  return target;
}

size_t AidSailRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AidSailRepsone)
  size_t total_size = 0;

  // optional int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // optional string result = 2;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // repeated .AidSailRequest aidsails = 3;
  {
    unsigned int count = this->aidsails_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aidsails(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AidSailRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AidSailRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AidSailRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AidSailRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AidSailRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AidSailRepsone)
    UnsafeMergeFrom(*source);
  }
}

void AidSailRepsone::MergeFrom(const AidSailRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AidSailRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AidSailRepsone::UnsafeMergeFrom(const AidSailRepsone& from) {
  GOOGLE_DCHECK(&from != this);
  aidsails_.MergeFrom(from.aidsails_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void AidSailRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AidSailRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidSailRepsone::CopyFrom(const AidSailRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AidSailRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AidSailRepsone::IsInitialized() const {

  return true;
}

void AidSailRepsone::Swap(AidSailRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AidSailRepsone::InternalSwap(AidSailRepsone* other) {
  std::swap(type_, other->type_);
  result_.Swap(&other->result_);
  aidsails_.UnsafeArenaSwap(&other->aidsails_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AidSailRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AidSailRepsone_descriptor_;
  metadata.reflection = AidSailRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AidSailRepsone

// optional int32 type = 1;
void AidSailRepsone::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 AidSailRepsone::type() const {
  // @@protoc_insertion_point(field_get:AidSailRepsone.type)
  return type_;
}
void AidSailRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:AidSailRepsone.type)
}

// optional string result = 2;
void AidSailRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AidSailRepsone::result() const {
  // @@protoc_insertion_point(field_get:AidSailRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AidSailRepsone.result)
}
void AidSailRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AidSailRepsone.result)
}
void AidSailRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AidSailRepsone.result)
}
::std::string* AidSailRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:AidSailRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AidSailRepsone::release_result() {
  // @@protoc_insertion_point(field_release:AidSailRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AidSailRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:AidSailRepsone.result)
}

// repeated .AidSailRequest aidsails = 3;
int AidSailRepsone::aidsails_size() const {
  return aidsails_.size();
}
void AidSailRepsone::clear_aidsails() {
  aidsails_.Clear();
}
const ::AidSailRequest& AidSailRepsone::aidsails(int index) const {
  // @@protoc_insertion_point(field_get:AidSailRepsone.aidsails)
  return aidsails_.Get(index);
}
::AidSailRequest* AidSailRepsone::mutable_aidsails(int index) {
  // @@protoc_insertion_point(field_mutable:AidSailRepsone.aidsails)
  return aidsails_.Mutable(index);
}
::AidSailRequest* AidSailRepsone::add_aidsails() {
  // @@protoc_insertion_point(field_add:AidSailRepsone.aidsails)
  return aidsails_.Add();
}
::google::protobuf::RepeatedPtrField< ::AidSailRequest >*
AidSailRepsone::mutable_aidsails() {
  // @@protoc_insertion_point(field_mutable_list:AidSailRepsone.aidsails)
  return &aidsails_;
}
const ::google::protobuf::RepeatedPtrField< ::AidSailRequest >&
AidSailRepsone::aidsails() const {
  // @@protoc_insertion_point(field_list:AidSailRepsone.aidsails)
  return aidsails_;
}

inline const AidSailRepsone* AidSailRepsone::internal_default_instance() {
  return &AidSailRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
