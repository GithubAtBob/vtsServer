// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgCellularShip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgCellularShip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgCellularShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgCellularShip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CellType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgCellularShip_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgCellularShip_2eproto() {
  protobuf_AddDesc_hgCellularShip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgCellularShip.proto");
  GOOGLE_CHECK(file != NULL);
  hgCellularShip_descriptor_ = file->message_type(0);
  static const int hgCellularShip_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, shiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, hdg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, goodstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, cellularcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, firstline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, firstrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, lastline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, lastrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, overtakingnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, acrossnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, headonnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, intersectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, obstructnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, danger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, avsog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, sendtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, tonnage_),
  };
  hgCellularShip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgCellularShip_descriptor_,
      hgCellularShip::internal_default_instance(),
      hgCellularShip_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgCellularShip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgCellularShip, _internal_metadata_));
  CellType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgCellularShip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgCellularShip_descriptor_, hgCellularShip::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgCellularShip_2eproto() {
  hgCellularShip_default_instance_.Shutdown();
  delete hgCellularShip_reflection_;
}

void protobuf_InitDefaults_hgCellularShip_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgCellularShip_default_instance_.DefaultConstruct();
  hgCellularShip_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgCellularShip_2eproto_once_);
void protobuf_InitDefaults_hgCellularShip_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgCellularShip_2eproto_once_,
                 &protobuf_InitDefaults_hgCellularShip_2eproto_impl);
}
void protobuf_AddDesc_hgCellularShip_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgCellularShip_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024hgCellularShip.proto\"\332\003\n\016hgCellularShi"
    "p\022\014\n\004MMSI\030\001 \001(\t\022\016\n\006Length\030\002 \001(\005\022\r\n\005Width"
    "\030\003 \001(\005\022\020\n\010ShipType\030\004 \001(\t\022\013\n\003SOG\030\005 \001(\005\022\013\n"
    "\003HDG\030\006 \001(\001\022\021\n\tGoodsType\030\007 \001(\t\022\025\n\rCellula"
    "rCount\030\010 \001(\005\022\021\n\tFirstLine\030\t \001(\005\022\020\n\010First"
    "Row\030\n \001(\005\022\020\n\010LastLine\030\013 \001(\005\022\017\n\007LastRow\030\014"
    " \001(\005\022\025\n\rOvertakingNum\030\r \001(\005\022\021\n\tAcrossNum"
    "\030\016 \001(\005\022\021\n\tHeadonNum\030\017 \001(\005\022\024\n\014IntersectNu"
    "m\030\020 \001(\005\022\023\n\013ObstructNum\030\021 \001(\005\022\021\n\tStartTim"
    "e\030\022 \001(\005\022\017\n\007EndTime\030\023 \001(\005\022\016\n\006Danger\030\024 \001(\001"
    "\022\r\n\005AvSOG\030\025 \001(\001\022\013\n\003Lat\030\026 \001(\001\022\013\n\003Lon\030\027 \001("
    "\001\022\033\n\010SendType\030\030 \001(\0162\t.CellType\022\n\n\002In\030\031 \001"
    "(\010\022\017\n\007Tonnage\030\032 \001(\001*M\n\010CellType\022\016\n\nNorma"
    "lShip\020\000\022\017\n\013BarrierShip\020\001\022\017\n\013ThroughShip\020"
    "\002\022\017\n\013VirtualShip\020\003b\006proto3", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgCellularShip.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgCellularShip_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgCellularShip_2eproto_once_);
void protobuf_AddDesc_hgCellularShip_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgCellularShip_2eproto_once_,
                 &protobuf_AddDesc_hgCellularShip_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgCellularShip_2eproto {
  StaticDescriptorInitializer_hgCellularShip_2eproto() {
    protobuf_AddDesc_hgCellularShip_2eproto();
  }
} static_descriptor_initializer_hgCellularShip_2eproto_;
const ::google::protobuf::EnumDescriptor* CellType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellType_descriptor_;
}
bool CellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgCellularShip::kMMSIFieldNumber;
const int hgCellularShip::kLengthFieldNumber;
const int hgCellularShip::kWidthFieldNumber;
const int hgCellularShip::kShipTypeFieldNumber;
const int hgCellularShip::kSOGFieldNumber;
const int hgCellularShip::kHDGFieldNumber;
const int hgCellularShip::kGoodsTypeFieldNumber;
const int hgCellularShip::kCellularCountFieldNumber;
const int hgCellularShip::kFirstLineFieldNumber;
const int hgCellularShip::kFirstRowFieldNumber;
const int hgCellularShip::kLastLineFieldNumber;
const int hgCellularShip::kLastRowFieldNumber;
const int hgCellularShip::kOvertakingNumFieldNumber;
const int hgCellularShip::kAcrossNumFieldNumber;
const int hgCellularShip::kHeadonNumFieldNumber;
const int hgCellularShip::kIntersectNumFieldNumber;
const int hgCellularShip::kObstructNumFieldNumber;
const int hgCellularShip::kStartTimeFieldNumber;
const int hgCellularShip::kEndTimeFieldNumber;
const int hgCellularShip::kDangerFieldNumber;
const int hgCellularShip::kAvSOGFieldNumber;
const int hgCellularShip::kLatFieldNumber;
const int hgCellularShip::kLonFieldNumber;
const int hgCellularShip::kSendTypeFieldNumber;
const int hgCellularShip::kInFieldNumber;
const int hgCellularShip::kTonnageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgCellularShip::hgCellularShip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgCellularShip_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgCellularShip)
}

void hgCellularShip::InitAsDefaultInstance() {
}

hgCellularShip::hgCellularShip(const hgCellularShip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgCellularShip)
}

void hgCellularShip::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shiptype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goodstype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, reinterpret_cast<char*>(&in_) -
    reinterpret_cast<char*>(&length_) + sizeof(in_));
  _cached_size_ = 0;
}

hgCellularShip::~hgCellularShip() {
  // @@protoc_insertion_point(destructor:hgCellularShip)
  SharedDtor();
}

void hgCellularShip::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shiptype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goodstype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgCellularShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgCellularShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgCellularShip_descriptor_;
}

const hgCellularShip& hgCellularShip::default_instance() {
  protobuf_InitDefaults_hgCellularShip_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgCellularShip> hgCellularShip_default_instance_;

hgCellularShip* hgCellularShip::New(::google::protobuf::Arena* arena) const {
  hgCellularShip* n = new hgCellularShip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgCellularShip::Clear() {
// @@protoc_insertion_point(message_clear_start:hgCellularShip)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgCellularShip, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgCellularShip*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(length_, cellularcount_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shiptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  goodstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(firstline_, intersectnum_);
  ZR_(obstructnum_, lon_);
  ZR_(tonnage_, in_);

#undef ZR_HELPER_
#undef ZR_

}

bool hgCellularShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgCellularShip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgCellularShip.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Length;
        break;
      }

      // optional int32 Length = 2;
      case 2: {
        if (tag == 16) {
         parse_Length:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Width;
        break;
      }

      // optional int32 Width = 3;
      case 3: {
        if (tag == 24) {
         parse_Width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ShipType;
        break;
      }

      // optional string ShipType = 4;
      case 4: {
        if (tag == 34) {
         parse_ShipType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shiptype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shiptype().data(), this->shiptype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgCellularShip.ShipType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SOG;
        break;
      }

      // optional int32 SOG = 5;
      case 5: {
        if (tag == 40) {
         parse_SOG:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_HDG;
        break;
      }

      // optional double HDG = 6;
      case 6: {
        if (tag == 49) {
         parse_HDG:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdg_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_GoodsType;
        break;
      }

      // optional string GoodsType = 7;
      case 7: {
        if (tag == 58) {
         parse_GoodsType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goodstype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->goodstype().data(), this->goodstype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgCellularShip.GoodsType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CellularCount;
        break;
      }

      // optional int32 CellularCount = 8;
      case 8: {
        if (tag == 64) {
         parse_CellularCount:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellularcount_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_FirstLine;
        break;
      }

      // optional int32 FirstLine = 9;
      case 9: {
        if (tag == 72) {
         parse_FirstLine:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_FirstRow;
        break;
      }

      // optional int32 FirstRow = 10;
      case 10: {
        if (tag == 80) {
         parse_FirstRow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstrow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LastLine;
        break;
      }

      // optional int32 LastLine = 11;
      case 11: {
        if (tag == 88) {
         parse_LastLine:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_LastRow;
        break;
      }

      // optional int32 LastRow = 12;
      case 12: {
        if (tag == 96) {
         parse_LastRow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_OvertakingNum;
        break;
      }

      // optional int32 OvertakingNum = 13;
      case 13: {
        if (tag == 104) {
         parse_OvertakingNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overtakingnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_AcrossNum;
        break;
      }

      // optional int32 AcrossNum = 14;
      case 14: {
        if (tag == 112) {
         parse_AcrossNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acrossnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_HeadonNum;
        break;
      }

      // optional int32 HeadonNum = 15;
      case 15: {
        if (tag == 120) {
         parse_HeadonNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headonnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_IntersectNum;
        break;
      }

      // optional int32 IntersectNum = 16;
      case 16: {
        if (tag == 128) {
         parse_IntersectNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intersectnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ObstructNum;
        break;
      }

      // optional int32 ObstructNum = 17;
      case 17: {
        if (tag == 136) {
         parse_ObstructNum:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstructnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_StartTime;
        break;
      }

      // optional int32 StartTime = 18;
      case 18: {
        if (tag == 144) {
         parse_StartTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_EndTime;
        break;
      }

      // optional int32 EndTime = 19;
      case 19: {
        if (tag == 152) {
         parse_EndTime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_Danger;
        break;
      }

      // optional double Danger = 20;
      case 20: {
        if (tag == 161) {
         parse_Danger:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &danger_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_AvSOG;
        break;
      }

      // optional double AvSOG = 21;
      case 21: {
        if (tag == 169) {
         parse_AvSOG:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avsog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_Lat;
        break;
      }

      // optional double Lat = 22;
      case 22: {
        if (tag == 177) {
         parse_Lat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_Lon;
        break;
      }

      // optional double Lon = 23;
      case 23: {
        if (tag == 185) {
         parse_Lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_SendType;
        break;
      }

      // optional .CellType SendType = 24;
      case 24: {
        if (tag == 192) {
         parse_SendType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sendtype(static_cast< ::CellType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_In;
        break;
      }

      // optional bool In = 25;
      case 25: {
        if (tag == 200) {
         parse_In:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_Tonnage;
        break;
      }

      // optional double Tonnage = 26;
      case 26: {
        if (tag == 209) {
         parse_Tonnage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tonnage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgCellularShip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgCellularShip)
  return false;
#undef DO_
}

void hgCellularShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgCellularShip)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCellularShip.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional int32 Length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional string ShipType = 4;
  if (this->shiptype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCellularShip.ShipType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->shiptype(), output);
  }

  // optional int32 SOG = 5;
  if (this->sog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sog(), output);
  }

  // optional double HDG = 6;
  if (this->hdg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->hdg(), output);
  }

  // optional string GoodsType = 7;
  if (this->goodstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->goodstype().data(), this->goodstype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCellularShip.GoodsType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->goodstype(), output);
  }

  // optional int32 CellularCount = 8;
  if (this->cellularcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cellularcount(), output);
  }

  // optional int32 FirstLine = 9;
  if (this->firstline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->firstline(), output);
  }

  // optional int32 FirstRow = 10;
  if (this->firstrow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->firstrow(), output);
  }

  // optional int32 LastLine = 11;
  if (this->lastline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lastline(), output);
  }

  // optional int32 LastRow = 12;
  if (this->lastrow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lastrow(), output);
  }

  // optional int32 OvertakingNum = 13;
  if (this->overtakingnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->overtakingnum(), output);
  }

  // optional int32 AcrossNum = 14;
  if (this->acrossnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->acrossnum(), output);
  }

  // optional int32 HeadonNum = 15;
  if (this->headonnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->headonnum(), output);
  }

  // optional int32 IntersectNum = 16;
  if (this->intersectnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->intersectnum(), output);
  }

  // optional int32 ObstructNum = 17;
  if (this->obstructnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->obstructnum(), output);
  }

  // optional int32 StartTime = 18;
  if (this->starttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->starttime(), output);
  }

  // optional int32 EndTime = 19;
  if (this->endtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->endtime(), output);
  }

  // optional double Danger = 20;
  if (this->danger() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->danger(), output);
  }

  // optional double AvSOG = 21;
  if (this->avsog() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->avsog(), output);
  }

  // optional double Lat = 22;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->lat(), output);
  }

  // optional double Lon = 23;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->lon(), output);
  }

  // optional .CellType SendType = 24;
  if (this->sendtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->sendtype(), output);
  }

  // optional bool In = 25;
  if (this->in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->in(), output);
  }

  // optional double Tonnage = 26;
  if (this->tonnage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->tonnage(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgCellularShip)
}

::google::protobuf::uint8* hgCellularShip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgCellularShip)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCellularShip.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional int32 Length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional string ShipType = 4;
  if (this->shiptype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCellularShip.ShipType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->shiptype(), target);
  }

  // optional int32 SOG = 5;
  if (this->sog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sog(), target);
  }

  // optional double HDG = 6;
  if (this->hdg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->hdg(), target);
  }

  // optional string GoodsType = 7;
  if (this->goodstype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->goodstype().data(), this->goodstype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgCellularShip.GoodsType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->goodstype(), target);
  }

  // optional int32 CellularCount = 8;
  if (this->cellularcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cellularcount(), target);
  }

  // optional int32 FirstLine = 9;
  if (this->firstline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->firstline(), target);
  }

  // optional int32 FirstRow = 10;
  if (this->firstrow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->firstrow(), target);
  }

  // optional int32 LastLine = 11;
  if (this->lastline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lastline(), target);
  }

  // optional int32 LastRow = 12;
  if (this->lastrow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lastrow(), target);
  }

  // optional int32 OvertakingNum = 13;
  if (this->overtakingnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->overtakingnum(), target);
  }

  // optional int32 AcrossNum = 14;
  if (this->acrossnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->acrossnum(), target);
  }

  // optional int32 HeadonNum = 15;
  if (this->headonnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->headonnum(), target);
  }

  // optional int32 IntersectNum = 16;
  if (this->intersectnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->intersectnum(), target);
  }

  // optional int32 ObstructNum = 17;
  if (this->obstructnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->obstructnum(), target);
  }

  // optional int32 StartTime = 18;
  if (this->starttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->starttime(), target);
  }

  // optional int32 EndTime = 19;
  if (this->endtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->endtime(), target);
  }

  // optional double Danger = 20;
  if (this->danger() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->danger(), target);
  }

  // optional double AvSOG = 21;
  if (this->avsog() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->avsog(), target);
  }

  // optional double Lat = 22;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->lat(), target);
  }

  // optional double Lon = 23;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->lon(), target);
  }

  // optional .CellType SendType = 24;
  if (this->sendtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->sendtype(), target);
  }

  // optional bool In = 25;
  if (this->in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->in(), target);
  }

  // optional double Tonnage = 26;
  if (this->tonnage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->tonnage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgCellularShip)
  return target;
}

size_t hgCellularShip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgCellularShip)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional int32 Length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // optional int32 Width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional string ShipType = 4;
  if (this->shiptype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shiptype());
  }

  // optional int32 SOG = 5;
  if (this->sog() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sog());
  }

  // optional double HDG = 6;
  if (this->hdg() != 0) {
    total_size += 1 + 8;
  }

  // optional string GoodsType = 7;
  if (this->goodstype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->goodstype());
  }

  // optional int32 CellularCount = 8;
  if (this->cellularcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cellularcount());
  }

  // optional int32 FirstLine = 9;
  if (this->firstline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->firstline());
  }

  // optional int32 FirstRow = 10;
  if (this->firstrow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->firstrow());
  }

  // optional int32 LastLine = 11;
  if (this->lastline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastline());
  }

  // optional int32 LastRow = 12;
  if (this->lastrow() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastrow());
  }

  // optional int32 OvertakingNum = 13;
  if (this->overtakingnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->overtakingnum());
  }

  // optional int32 AcrossNum = 14;
  if (this->acrossnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acrossnum());
  }

  // optional int32 HeadonNum = 15;
  if (this->headonnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->headonnum());
  }

  // optional int32 IntersectNum = 16;
  if (this->intersectnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->intersectnum());
  }

  // optional int32 ObstructNum = 17;
  if (this->obstructnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->obstructnum());
  }

  // optional int32 StartTime = 18;
  if (this->starttime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->starttime());
  }

  // optional int32 EndTime = 19;
  if (this->endtime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endtime());
  }

  // optional double Danger = 20;
  if (this->danger() != 0) {
    total_size += 2 + 8;
  }

  // optional double AvSOG = 21;
  if (this->avsog() != 0) {
    total_size += 2 + 8;
  }

  // optional double Lat = 22;
  if (this->lat() != 0) {
    total_size += 2 + 8;
  }

  // optional double Lon = 23;
  if (this->lon() != 0) {
    total_size += 2 + 8;
  }

  // optional .CellType SendType = 24;
  if (this->sendtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sendtype());
  }

  // optional bool In = 25;
  if (this->in() != 0) {
    total_size += 2 + 1;
  }

  // optional double Tonnage = 26;
  if (this->tonnage() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgCellularShip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgCellularShip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgCellularShip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgCellularShip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgCellularShip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgCellularShip)
    UnsafeMergeFrom(*source);
  }
}

void hgCellularShip::MergeFrom(const hgCellularShip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgCellularShip)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgCellularShip::UnsafeMergeFrom(const hgCellularShip& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.shiptype().size() > 0) {

    shiptype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shiptype_);
  }
  if (from.sog() != 0) {
    set_sog(from.sog());
  }
  if (from.hdg() != 0) {
    set_hdg(from.hdg());
  }
  if (from.goodstype().size() > 0) {

    goodstype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.goodstype_);
  }
  if (from.cellularcount() != 0) {
    set_cellularcount(from.cellularcount());
  }
  if (from.firstline() != 0) {
    set_firstline(from.firstline());
  }
  if (from.firstrow() != 0) {
    set_firstrow(from.firstrow());
  }
  if (from.lastline() != 0) {
    set_lastline(from.lastline());
  }
  if (from.lastrow() != 0) {
    set_lastrow(from.lastrow());
  }
  if (from.overtakingnum() != 0) {
    set_overtakingnum(from.overtakingnum());
  }
  if (from.acrossnum() != 0) {
    set_acrossnum(from.acrossnum());
  }
  if (from.headonnum() != 0) {
    set_headonnum(from.headonnum());
  }
  if (from.intersectnum() != 0) {
    set_intersectnum(from.intersectnum());
  }
  if (from.obstructnum() != 0) {
    set_obstructnum(from.obstructnum());
  }
  if (from.starttime() != 0) {
    set_starttime(from.starttime());
  }
  if (from.endtime() != 0) {
    set_endtime(from.endtime());
  }
  if (from.danger() != 0) {
    set_danger(from.danger());
  }
  if (from.avsog() != 0) {
    set_avsog(from.avsog());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.sendtype() != 0) {
    set_sendtype(from.sendtype());
  }
  if (from.in() != 0) {
    set_in(from.in());
  }
  if (from.tonnage() != 0) {
    set_tonnage(from.tonnage());
  }
}

void hgCellularShip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgCellularShip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgCellularShip::CopyFrom(const hgCellularShip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgCellularShip)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgCellularShip::IsInitialized() const {

  return true;
}

void hgCellularShip::Swap(hgCellularShip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgCellularShip::InternalSwap(hgCellularShip* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  shiptype_.Swap(&other->shiptype_);
  std::swap(sog_, other->sog_);
  std::swap(hdg_, other->hdg_);
  goodstype_.Swap(&other->goodstype_);
  std::swap(cellularcount_, other->cellularcount_);
  std::swap(firstline_, other->firstline_);
  std::swap(firstrow_, other->firstrow_);
  std::swap(lastline_, other->lastline_);
  std::swap(lastrow_, other->lastrow_);
  std::swap(overtakingnum_, other->overtakingnum_);
  std::swap(acrossnum_, other->acrossnum_);
  std::swap(headonnum_, other->headonnum_);
  std::swap(intersectnum_, other->intersectnum_);
  std::swap(obstructnum_, other->obstructnum_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(danger_, other->danger_);
  std::swap(avsog_, other->avsog_);
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(sendtype_, other->sendtype_);
  std::swap(in_, other->in_);
  std::swap(tonnage_, other->tonnage_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgCellularShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgCellularShip_descriptor_;
  metadata.reflection = hgCellularShip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgCellularShip

// optional string MMSI = 1;
void hgCellularShip::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgCellularShip::mmsi() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCellularShip::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCellularShip.MMSI)
}
void hgCellularShip::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCellularShip.MMSI)
}
void hgCellularShip::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCellularShip.MMSI)
}
::std::string* hgCellularShip::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgCellularShip.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgCellularShip::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgCellularShip.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCellularShip::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgCellularShip.MMSI)
}

// optional int32 Length = 2;
void hgCellularShip::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 hgCellularShip::length() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Length)
  return length_;
}
void hgCellularShip::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Length)
}

// optional int32 Width = 3;
void hgCellularShip::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 hgCellularShip::width() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Width)
  return width_;
}
void hgCellularShip::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Width)
}

// optional string ShipType = 4;
void hgCellularShip::clear_shiptype() {
  shiptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgCellularShip::shiptype() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.ShipType)
  return shiptype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCellularShip::set_shiptype(const ::std::string& value) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCellularShip.ShipType)
}
void hgCellularShip::set_shiptype(const char* value) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCellularShip.ShipType)
}
void hgCellularShip::set_shiptype(const char* value, size_t size) {
  
  shiptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCellularShip.ShipType)
}
::std::string* hgCellularShip::mutable_shiptype() {
  
  // @@protoc_insertion_point(field_mutable:hgCellularShip.ShipType)
  return shiptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgCellularShip::release_shiptype() {
  // @@protoc_insertion_point(field_release:hgCellularShip.ShipType)
  
  return shiptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCellularShip::set_allocated_shiptype(::std::string* shiptype) {
  if (shiptype != NULL) {
    
  } else {
    
  }
  shiptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shiptype);
  // @@protoc_insertion_point(field_set_allocated:hgCellularShip.ShipType)
}

// optional int32 SOG = 5;
void hgCellularShip::clear_sog() {
  sog_ = 0;
}
::google::protobuf::int32 hgCellularShip::sog() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.SOG)
  return sog_;
}
void hgCellularShip::set_sog(::google::protobuf::int32 value) {
  
  sog_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.SOG)
}

// optional double HDG = 6;
void hgCellularShip::clear_hdg() {
  hdg_ = 0;
}
double hgCellularShip::hdg() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.HDG)
  return hdg_;
}
void hgCellularShip::set_hdg(double value) {
  
  hdg_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.HDG)
}

// optional string GoodsType = 7;
void hgCellularShip::clear_goodstype() {
  goodstype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgCellularShip::goodstype() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.GoodsType)
  return goodstype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCellularShip::set_goodstype(const ::std::string& value) {
  
  goodstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgCellularShip.GoodsType)
}
void hgCellularShip::set_goodstype(const char* value) {
  
  goodstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgCellularShip.GoodsType)
}
void hgCellularShip::set_goodstype(const char* value, size_t size) {
  
  goodstype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgCellularShip.GoodsType)
}
::std::string* hgCellularShip::mutable_goodstype() {
  
  // @@protoc_insertion_point(field_mutable:hgCellularShip.GoodsType)
  return goodstype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgCellularShip::release_goodstype() {
  // @@protoc_insertion_point(field_release:hgCellularShip.GoodsType)
  
  return goodstype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgCellularShip::set_allocated_goodstype(::std::string* goodstype) {
  if (goodstype != NULL) {
    
  } else {
    
  }
  goodstype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), goodstype);
  // @@protoc_insertion_point(field_set_allocated:hgCellularShip.GoodsType)
}

// optional int32 CellularCount = 8;
void hgCellularShip::clear_cellularcount() {
  cellularcount_ = 0;
}
::google::protobuf::int32 hgCellularShip::cellularcount() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.CellularCount)
  return cellularcount_;
}
void hgCellularShip::set_cellularcount(::google::protobuf::int32 value) {
  
  cellularcount_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.CellularCount)
}

// optional int32 FirstLine = 9;
void hgCellularShip::clear_firstline() {
  firstline_ = 0;
}
::google::protobuf::int32 hgCellularShip::firstline() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.FirstLine)
  return firstline_;
}
void hgCellularShip::set_firstline(::google::protobuf::int32 value) {
  
  firstline_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.FirstLine)
}

// optional int32 FirstRow = 10;
void hgCellularShip::clear_firstrow() {
  firstrow_ = 0;
}
::google::protobuf::int32 hgCellularShip::firstrow() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.FirstRow)
  return firstrow_;
}
void hgCellularShip::set_firstrow(::google::protobuf::int32 value) {
  
  firstrow_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.FirstRow)
}

// optional int32 LastLine = 11;
void hgCellularShip::clear_lastline() {
  lastline_ = 0;
}
::google::protobuf::int32 hgCellularShip::lastline() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.LastLine)
  return lastline_;
}
void hgCellularShip::set_lastline(::google::protobuf::int32 value) {
  
  lastline_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.LastLine)
}

// optional int32 LastRow = 12;
void hgCellularShip::clear_lastrow() {
  lastrow_ = 0;
}
::google::protobuf::int32 hgCellularShip::lastrow() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.LastRow)
  return lastrow_;
}
void hgCellularShip::set_lastrow(::google::protobuf::int32 value) {
  
  lastrow_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.LastRow)
}

// optional int32 OvertakingNum = 13;
void hgCellularShip::clear_overtakingnum() {
  overtakingnum_ = 0;
}
::google::protobuf::int32 hgCellularShip::overtakingnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.OvertakingNum)
  return overtakingnum_;
}
void hgCellularShip::set_overtakingnum(::google::protobuf::int32 value) {
  
  overtakingnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.OvertakingNum)
}

// optional int32 AcrossNum = 14;
void hgCellularShip::clear_acrossnum() {
  acrossnum_ = 0;
}
::google::protobuf::int32 hgCellularShip::acrossnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.AcrossNum)
  return acrossnum_;
}
void hgCellularShip::set_acrossnum(::google::protobuf::int32 value) {
  
  acrossnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.AcrossNum)
}

// optional int32 HeadonNum = 15;
void hgCellularShip::clear_headonnum() {
  headonnum_ = 0;
}
::google::protobuf::int32 hgCellularShip::headonnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.HeadonNum)
  return headonnum_;
}
void hgCellularShip::set_headonnum(::google::protobuf::int32 value) {
  
  headonnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.HeadonNum)
}

// optional int32 IntersectNum = 16;
void hgCellularShip::clear_intersectnum() {
  intersectnum_ = 0;
}
::google::protobuf::int32 hgCellularShip::intersectnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.IntersectNum)
  return intersectnum_;
}
void hgCellularShip::set_intersectnum(::google::protobuf::int32 value) {
  
  intersectnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.IntersectNum)
}

// optional int32 ObstructNum = 17;
void hgCellularShip::clear_obstructnum() {
  obstructnum_ = 0;
}
::google::protobuf::int32 hgCellularShip::obstructnum() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.ObstructNum)
  return obstructnum_;
}
void hgCellularShip::set_obstructnum(::google::protobuf::int32 value) {
  
  obstructnum_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.ObstructNum)
}

// optional int32 StartTime = 18;
void hgCellularShip::clear_starttime() {
  starttime_ = 0;
}
::google::protobuf::int32 hgCellularShip::starttime() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.StartTime)
  return starttime_;
}
void hgCellularShip::set_starttime(::google::protobuf::int32 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.StartTime)
}

// optional int32 EndTime = 19;
void hgCellularShip::clear_endtime() {
  endtime_ = 0;
}
::google::protobuf::int32 hgCellularShip::endtime() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.EndTime)
  return endtime_;
}
void hgCellularShip::set_endtime(::google::protobuf::int32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.EndTime)
}

// optional double Danger = 20;
void hgCellularShip::clear_danger() {
  danger_ = 0;
}
double hgCellularShip::danger() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Danger)
  return danger_;
}
void hgCellularShip::set_danger(double value) {
  
  danger_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Danger)
}

// optional double AvSOG = 21;
void hgCellularShip::clear_avsog() {
  avsog_ = 0;
}
double hgCellularShip::avsog() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.AvSOG)
  return avsog_;
}
void hgCellularShip::set_avsog(double value) {
  
  avsog_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.AvSOG)
}

// optional double Lat = 22;
void hgCellularShip::clear_lat() {
  lat_ = 0;
}
double hgCellularShip::lat() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Lat)
  return lat_;
}
void hgCellularShip::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Lat)
}

// optional double Lon = 23;
void hgCellularShip::clear_lon() {
  lon_ = 0;
}
double hgCellularShip::lon() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Lon)
  return lon_;
}
void hgCellularShip::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Lon)
}

// optional .CellType SendType = 24;
void hgCellularShip::clear_sendtype() {
  sendtype_ = 0;
}
::CellType hgCellularShip::sendtype() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.SendType)
  return static_cast< ::CellType >(sendtype_);
}
void hgCellularShip::set_sendtype(::CellType value) {
  
  sendtype_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.SendType)
}

// optional bool In = 25;
void hgCellularShip::clear_in() {
  in_ = false;
}
bool hgCellularShip::in() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.In)
  return in_;
}
void hgCellularShip::set_in(bool value) {
  
  in_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.In)
}

// optional double Tonnage = 26;
void hgCellularShip::clear_tonnage() {
  tonnage_ = 0;
}
double hgCellularShip::tonnage() const {
  // @@protoc_insertion_point(field_get:hgCellularShip.Tonnage)
  return tonnage_;
}
void hgCellularShip::set_tonnage(double value) {
  
  tonnage_ = value;
  // @@protoc_insertion_point(field_set:hgCellularShip.Tonnage)
}

inline const hgCellularShip* hgCellularShip::internal_default_instance() {
  return &hgCellularShip_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
