// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_login_2eproto();
void protobuf_InitDefaults_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class LoginRepsone;
class LoginRequest;

// ===================================================================

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static const LoginRequest* internal_default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRequest* other);
  void UnsafeMergeFrom(const LoginRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_login_2eproto_impl();
  friend void  protobuf_AddDesc_login_2eproto_impl();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> LoginRequest_default_instance_;

// -------------------------------------------------------------------

class LoginRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LoginRepsone) */ {
 public:
  LoginRepsone();
  virtual ~LoginRepsone();

  LoginRepsone(const LoginRepsone& from);

  inline LoginRepsone& operator=(const LoginRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRepsone& default_instance();

  static const LoginRepsone* internal_default_instance();

  void Swap(LoginRepsone* other);

  // implements Message ----------------------------------------------

  inline LoginRepsone* New() const { return New(NULL); }

  LoginRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRepsone& from);
  void MergeFrom(const LoginRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRepsone* other);
  void UnsafeMergeFrom(const LoginRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // optional string loginrole = 2;
  void clear_loginrole();
  static const int kLoginroleFieldNumber = 2;
  const ::std::string& loginrole() const;
  void set_loginrole(const ::std::string& value);
  void set_loginrole(const char* value);
  void set_loginrole(const char* value, size_t size);
  ::std::string* mutable_loginrole();
  ::std::string* release_loginrole();
  void set_allocated_loginrole(::std::string* loginrole);

  // optional string allgroup = 3;
  void clear_allgroup();
  static const int kAllgroupFieldNumber = 3;
  const ::std::string& allgroup() const;
  void set_allgroup(const ::std::string& value);
  void set_allgroup(const char* value);
  void set_allgroup(const char* value, size_t size);
  ::std::string* mutable_allgroup();
  ::std::string* release_allgroup();
  void set_allocated_allgroup(::std::string* allgroup);

  // optional string alluser = 4;
  void clear_alluser();
  static const int kAlluserFieldNumber = 4;
  const ::std::string& alluser() const;
  void set_alluser(const ::std::string& value);
  void set_alluser(const char* value);
  void set_alluser(const char* value, size_t size);
  ::std::string* mutable_alluser();
  ::std::string* release_alluser();
  void set_allocated_alluser(::std::string* alluser);

  // optional string allnotes = 5;
  void clear_allnotes();
  static const int kAllnotesFieldNumber = 5;
  const ::std::string& allnotes() const;
  void set_allnotes(const ::std::string& value);
  void set_allnotes(const char* value);
  void set_allnotes(const char* value, size_t size);
  ::std::string* mutable_allnotes();
  ::std::string* release_allnotes();
  void set_allocated_allnotes(::std::string* allnotes);

  // optional string allfixedobject = 6;
  void clear_allfixedobject();
  static const int kAllfixedobjectFieldNumber = 6;
  const ::std::string& allfixedobject() const;
  void set_allfixedobject(const ::std::string& value);
  void set_allfixedobject(const char* value);
  void set_allfixedobject(const char* value, size_t size);
  ::std::string* mutable_allfixedobject();
  ::std::string* release_allfixedobject();
  void set_allocated_allfixedobject(::std::string* allfixedobject);

  // optional string allaidsail = 7;
  void clear_allaidsail();
  static const int kAllaidsailFieldNumber = 7;
  const ::std::string& allaidsail() const;
  void set_allaidsail(const ::std::string& value);
  void set_allaidsail(const char* value);
  void set_allaidsail(const char* value, size_t size);
  ::std::string* mutable_allaidsail();
  ::std::string* release_allaidsail();
  void set_allocated_allaidsail(::std::string* allaidsail);

  // optional int32 grouptype = 8;
  void clear_grouptype();
  static const int kGrouptypeFieldNumber = 8;
  ::google::protobuf::int32 grouptype() const;
  void set_grouptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LoginRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::internal::ArenaStringPtr loginrole_;
  ::google::protobuf::internal::ArenaStringPtr allgroup_;
  ::google::protobuf::internal::ArenaStringPtr alluser_;
  ::google::protobuf::internal::ArenaStringPtr allnotes_;
  ::google::protobuf::internal::ArenaStringPtr allfixedobject_;
  ::google::protobuf::internal::ArenaStringPtr allaidsail_;
  ::google::protobuf::int32 grouptype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_login_2eproto_impl();
  friend void  protobuf_AddDesc_login_2eproto_impl();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoginRepsone> LoginRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// optional string userName = 1;
inline void LoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:LoginRequest.userName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequest.userName)
}
inline void LoginRequest::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequest.userName)
}
inline void LoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.userName)
}
inline ::std::string* LoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequest.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:LoginRequest.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.userName)
}

// optional string password = 2;
inline void LoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:LoginRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequest.password)
}
inline void LoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequest.password)
}
inline ::std::string* LoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:LoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LoginRequest.password)
}

inline const LoginRequest* LoginRequest::internal_default_instance() {
  return &LoginRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// LoginRepsone

// optional string result = 1;
inline void LoginRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRepsone::result() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRepsone.result)
}
inline void LoginRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRepsone.result)
}
inline void LoginRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRepsone.result)
}
inline ::std::string* LoginRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:LoginRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRepsone::release_result() {
  // @@protoc_insertion_point(field_release:LoginRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:LoginRepsone.result)
}

// optional string loginrole = 2;
inline void LoginRepsone::clear_loginrole() {
  loginrole_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRepsone::loginrole() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.loginrole)
  return loginrole_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_loginrole(const ::std::string& value) {
  
  loginrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRepsone.loginrole)
}
inline void LoginRepsone::set_loginrole(const char* value) {
  
  loginrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRepsone.loginrole)
}
inline void LoginRepsone::set_loginrole(const char* value, size_t size) {
  
  loginrole_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRepsone.loginrole)
}
inline ::std::string* LoginRepsone::mutable_loginrole() {
  
  // @@protoc_insertion_point(field_mutable:LoginRepsone.loginrole)
  return loginrole_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRepsone::release_loginrole() {
  // @@protoc_insertion_point(field_release:LoginRepsone.loginrole)
  
  return loginrole_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allocated_loginrole(::std::string* loginrole) {
  if (loginrole != NULL) {
    
  } else {
    
  }
  loginrole_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginrole);
  // @@protoc_insertion_point(field_set_allocated:LoginRepsone.loginrole)
}

// optional string allgroup = 3;
inline void LoginRepsone::clear_allgroup() {
  allgroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRepsone::allgroup() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.allgroup)
  return allgroup_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allgroup(const ::std::string& value) {
  
  allgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRepsone.allgroup)
}
inline void LoginRepsone::set_allgroup(const char* value) {
  
  allgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRepsone.allgroup)
}
inline void LoginRepsone::set_allgroup(const char* value, size_t size) {
  
  allgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRepsone.allgroup)
}
inline ::std::string* LoginRepsone::mutable_allgroup() {
  
  // @@protoc_insertion_point(field_mutable:LoginRepsone.allgroup)
  return allgroup_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRepsone::release_allgroup() {
  // @@protoc_insertion_point(field_release:LoginRepsone.allgroup)
  
  return allgroup_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allocated_allgroup(::std::string* allgroup) {
  if (allgroup != NULL) {
    
  } else {
    
  }
  allgroup_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allgroup);
  // @@protoc_insertion_point(field_set_allocated:LoginRepsone.allgroup)
}

// optional string alluser = 4;
inline void LoginRepsone::clear_alluser() {
  alluser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRepsone::alluser() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.alluser)
  return alluser_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_alluser(const ::std::string& value) {
  
  alluser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRepsone.alluser)
}
inline void LoginRepsone::set_alluser(const char* value) {
  
  alluser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRepsone.alluser)
}
inline void LoginRepsone::set_alluser(const char* value, size_t size) {
  
  alluser_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRepsone.alluser)
}
inline ::std::string* LoginRepsone::mutable_alluser() {
  
  // @@protoc_insertion_point(field_mutable:LoginRepsone.alluser)
  return alluser_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRepsone::release_alluser() {
  // @@protoc_insertion_point(field_release:LoginRepsone.alluser)
  
  return alluser_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allocated_alluser(::std::string* alluser) {
  if (alluser != NULL) {
    
  } else {
    
  }
  alluser_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alluser);
  // @@protoc_insertion_point(field_set_allocated:LoginRepsone.alluser)
}

// optional string allnotes = 5;
inline void LoginRepsone::clear_allnotes() {
  allnotes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRepsone::allnotes() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.allnotes)
  return allnotes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allnotes(const ::std::string& value) {
  
  allnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRepsone.allnotes)
}
inline void LoginRepsone::set_allnotes(const char* value) {
  
  allnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRepsone.allnotes)
}
inline void LoginRepsone::set_allnotes(const char* value, size_t size) {
  
  allnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRepsone.allnotes)
}
inline ::std::string* LoginRepsone::mutable_allnotes() {
  
  // @@protoc_insertion_point(field_mutable:LoginRepsone.allnotes)
  return allnotes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRepsone::release_allnotes() {
  // @@protoc_insertion_point(field_release:LoginRepsone.allnotes)
  
  return allnotes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allocated_allnotes(::std::string* allnotes) {
  if (allnotes != NULL) {
    
  } else {
    
  }
  allnotes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allnotes);
  // @@protoc_insertion_point(field_set_allocated:LoginRepsone.allnotes)
}

// optional string allfixedobject = 6;
inline void LoginRepsone::clear_allfixedobject() {
  allfixedobject_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRepsone::allfixedobject() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.allfixedobject)
  return allfixedobject_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allfixedobject(const ::std::string& value) {
  
  allfixedobject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRepsone.allfixedobject)
}
inline void LoginRepsone::set_allfixedobject(const char* value) {
  
  allfixedobject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRepsone.allfixedobject)
}
inline void LoginRepsone::set_allfixedobject(const char* value, size_t size) {
  
  allfixedobject_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRepsone.allfixedobject)
}
inline ::std::string* LoginRepsone::mutable_allfixedobject() {
  
  // @@protoc_insertion_point(field_mutable:LoginRepsone.allfixedobject)
  return allfixedobject_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRepsone::release_allfixedobject() {
  // @@protoc_insertion_point(field_release:LoginRepsone.allfixedobject)
  
  return allfixedobject_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allocated_allfixedobject(::std::string* allfixedobject) {
  if (allfixedobject != NULL) {
    
  } else {
    
  }
  allfixedobject_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allfixedobject);
  // @@protoc_insertion_point(field_set_allocated:LoginRepsone.allfixedobject)
}

// optional string allaidsail = 7;
inline void LoginRepsone::clear_allaidsail() {
  allaidsail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRepsone::allaidsail() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.allaidsail)
  return allaidsail_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allaidsail(const ::std::string& value) {
  
  allaidsail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRepsone.allaidsail)
}
inline void LoginRepsone::set_allaidsail(const char* value) {
  
  allaidsail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRepsone.allaidsail)
}
inline void LoginRepsone::set_allaidsail(const char* value, size_t size) {
  
  allaidsail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRepsone.allaidsail)
}
inline ::std::string* LoginRepsone::mutable_allaidsail() {
  
  // @@protoc_insertion_point(field_mutable:LoginRepsone.allaidsail)
  return allaidsail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRepsone::release_allaidsail() {
  // @@protoc_insertion_point(field_release:LoginRepsone.allaidsail)
  
  return allaidsail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRepsone::set_allocated_allaidsail(::std::string* allaidsail) {
  if (allaidsail != NULL) {
    
  } else {
    
  }
  allaidsail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), allaidsail);
  // @@protoc_insertion_point(field_set_allocated:LoginRepsone.allaidsail)
}

// optional int32 grouptype = 8;
inline void LoginRepsone::clear_grouptype() {
  grouptype_ = 0;
}
inline ::google::protobuf::int32 LoginRepsone::grouptype() const {
  // @@protoc_insertion_point(field_get:LoginRepsone.grouptype)
  return grouptype_;
}
inline void LoginRepsone::set_grouptype(::google::protobuf::int32 value) {
  
  grouptype_ = value;
  // @@protoc_insertion_point(field_set:LoginRepsone.grouptype)
}

inline const LoginRepsone* LoginRepsone::internal_default_instance() {
  return &LoginRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
