// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgChannelMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgChannelMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgChannelPont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgChannelPont_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgSimChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgSimChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgChannelMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgChannelMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgChannelMsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgChannelMsg_2eproto() {
  protobuf_AddDesc_hgChannelMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgChannelMsg.proto");
  GOOGLE_CHECK(file != NULL);
  hgChannelPont_descriptor_ = file->message_type(0);
  static const int hgChannelPont_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgChannelPont, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgChannelPont, lon_),
  };
  hgChannelPont_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgChannelPont_descriptor_,
      hgChannelPont::internal_default_instance(),
      hgChannelPont_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgChannelPont),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgChannelPont, _internal_metadata_));
  hgSimChannel_descriptor_ = file->message_type(1);
  static const int hgSimChannel_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, leftbeginlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, leftendlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, midbeginlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, midendlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, rightbeginlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, rightendlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, leftbeginlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, leftendlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, midbeginlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, midendlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, rightbeginlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, rightendlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, widthbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, widthend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, alllength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, angle_),
  };
  hgSimChannel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgSimChannel_descriptor_,
      hgSimChannel::internal_default_instance(),
      hgSimChannel_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgSimChannel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgSimChannel, _internal_metadata_));
  hgChannelMsg_descriptor_ = file->message_type(2);
  static const int hgChannelMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgChannelMsg, channel_),
  };
  hgChannelMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgChannelMsg_descriptor_,
      hgChannelMsg::internal_default_instance(),
      hgChannelMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgChannelMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgChannelMsg, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgChannelMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgChannelPont_descriptor_, hgChannelPont::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgSimChannel_descriptor_, hgSimChannel::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgChannelMsg_descriptor_, hgChannelMsg::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgChannelMsg_2eproto() {
  hgChannelPont_default_instance_.Shutdown();
  delete hgChannelPont_reflection_;
  hgSimChannel_default_instance_.Shutdown();
  delete hgSimChannel_reflection_;
  hgChannelMsg_default_instance_.Shutdown();
  delete hgChannelMsg_reflection_;
}

void protobuf_InitDefaults_hgChannelMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  hgChannelPont_default_instance_.DefaultConstruct();
  hgSimChannel_default_instance_.DefaultConstruct();
  hgChannelMsg_default_instance_.DefaultConstruct();
  hgChannelPont_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgSimChannel_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgChannelMsg_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgChannelMsg_2eproto_once_);
void protobuf_InitDefaults_hgChannelMsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgChannelMsg_2eproto_once_,
                 &protobuf_InitDefaults_hgChannelMsg_2eproto_impl);
}
void protobuf_AddDesc_hgChannelMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgChannelMsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022hgChannelMsg.proto\")\n\rhgChannelPont\022\013\n"
    "\003Lat\030\001 \001(\001\022\013\n\003Lon\030\002 \001(\001\"\342\002\n\014hgSimChannel"
    "\022\024\n\014LeftBeginLat\030\001 \001(\001\022\022\n\nLeftEndLat\030\002 \001"
    "(\001\022\023\n\013MidBeginLat\030\003 \001(\001\022\021\n\tMidEndLat\030\004 \001"
    "(\001\022\025\n\rRightBeginLat\030\005 \001(\001\022\023\n\013RightEndLat"
    "\030\006 \001(\001\022\024\n\014LeftBeginLon\030\007 \001(\001\022\022\n\nLeftEndL"
    "on\030\010 \001(\001\022\023\n\013MidBeginLon\030\t \001(\001\022\021\n\tMidEndL"
    "on\030\n \001(\001\022\025\n\rRightBeginLon\030\013 \001(\001\022\023\n\013Right"
    "EndLon\030\014 \001(\001\022\016\n\006Length\030\r \001(\001\022\022\n\nWidthBeg"
    "in\030\016 \001(\001\022\020\n\010WidthEnd\030\017 \001(\001\022\021\n\tAllLength\030"
    "\020 \001(\001\022\r\n\005Angle\030\021 \001(\001\".\n\014hgChannelMsg\022\036\n\007"
    "Channel\030\001 \003(\0132\r.hgSimChannelb\006proto3", 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgChannelMsg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgChannelMsg_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgChannelMsg_2eproto_once_);
void protobuf_AddDesc_hgChannelMsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgChannelMsg_2eproto_once_,
                 &protobuf_AddDesc_hgChannelMsg_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgChannelMsg_2eproto {
  StaticDescriptorInitializer_hgChannelMsg_2eproto() {
    protobuf_AddDesc_hgChannelMsg_2eproto();
  }
} static_descriptor_initializer_hgChannelMsg_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgChannelPont::kLatFieldNumber;
const int hgChannelPont::kLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgChannelPont::hgChannelPont()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgChannelMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgChannelPont)
}

void hgChannelPont::InitAsDefaultInstance() {
}

hgChannelPont::hgChannelPont(const hgChannelPont& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgChannelPont)
}

void hgChannelPont::SharedCtor() {
  ::memset(&lat_, 0, reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_) + sizeof(lon_));
  _cached_size_ = 0;
}

hgChannelPont::~hgChannelPont() {
  // @@protoc_insertion_point(destructor:hgChannelPont)
  SharedDtor();
}

void hgChannelPont::SharedDtor() {
}

void hgChannelPont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgChannelPont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgChannelPont_descriptor_;
}

const hgChannelPont& hgChannelPont::default_instance() {
  protobuf_InitDefaults_hgChannelMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgChannelPont> hgChannelPont_default_instance_;

hgChannelPont* hgChannelPont::New(::google::protobuf::Arena* arena) const {
  hgChannelPont* n = new hgChannelPont;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgChannelPont::Clear() {
// @@protoc_insertion_point(message_clear_start:hgChannelPont)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgChannelPont, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgChannelPont*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lat_, lon_);

#undef ZR_HELPER_
#undef ZR_

}

bool hgChannelPont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgChannelPont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Lat = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Lon;
        break;
      }

      // optional double Lon = 2;
      case 2: {
        if (tag == 17) {
         parse_Lon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgChannelPont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgChannelPont)
  return false;
#undef DO_
}

void hgChannelPont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgChannelPont)
  // optional double Lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // optional double Lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgChannelPont)
}

::google::protobuf::uint8* hgChannelPont::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgChannelPont)
  // optional double Lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // optional double Lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgChannelPont)
  return target;
}

size_t hgChannelPont::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgChannelPont)
  size_t total_size = 0;

  // optional double Lat = 1;
  if (this->lat() != 0) {
    total_size += 1 + 8;
  }

  // optional double Lon = 2;
  if (this->lon() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgChannelPont::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgChannelPont)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgChannelPont* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgChannelPont>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgChannelPont)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgChannelPont)
    UnsafeMergeFrom(*source);
  }
}

void hgChannelPont::MergeFrom(const hgChannelPont& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgChannelPont)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgChannelPont::UnsafeMergeFrom(const hgChannelPont& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
}

void hgChannelPont::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgChannelPont)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgChannelPont::CopyFrom(const hgChannelPont& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgChannelPont)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgChannelPont::IsInitialized() const {

  return true;
}

void hgChannelPont::Swap(hgChannelPont* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgChannelPont::InternalSwap(hgChannelPont* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgChannelPont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgChannelPont_descriptor_;
  metadata.reflection = hgChannelPont_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgChannelPont

// optional double Lat = 1;
void hgChannelPont::clear_lat() {
  lat_ = 0;
}
double hgChannelPont::lat() const {
  // @@protoc_insertion_point(field_get:hgChannelPont.Lat)
  return lat_;
}
void hgChannelPont::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:hgChannelPont.Lat)
}

// optional double Lon = 2;
void hgChannelPont::clear_lon() {
  lon_ = 0;
}
double hgChannelPont::lon() const {
  // @@protoc_insertion_point(field_get:hgChannelPont.Lon)
  return lon_;
}
void hgChannelPont::set_lon(double value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:hgChannelPont.Lon)
}

inline const hgChannelPont* hgChannelPont::internal_default_instance() {
  return &hgChannelPont_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgSimChannel::kLeftBeginLatFieldNumber;
const int hgSimChannel::kLeftEndLatFieldNumber;
const int hgSimChannel::kMidBeginLatFieldNumber;
const int hgSimChannel::kMidEndLatFieldNumber;
const int hgSimChannel::kRightBeginLatFieldNumber;
const int hgSimChannel::kRightEndLatFieldNumber;
const int hgSimChannel::kLeftBeginLonFieldNumber;
const int hgSimChannel::kLeftEndLonFieldNumber;
const int hgSimChannel::kMidBeginLonFieldNumber;
const int hgSimChannel::kMidEndLonFieldNumber;
const int hgSimChannel::kRightBeginLonFieldNumber;
const int hgSimChannel::kRightEndLonFieldNumber;
const int hgSimChannel::kLengthFieldNumber;
const int hgSimChannel::kWidthBeginFieldNumber;
const int hgSimChannel::kWidthEndFieldNumber;
const int hgSimChannel::kAllLengthFieldNumber;
const int hgSimChannel::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgSimChannel::hgSimChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgChannelMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgSimChannel)
}

void hgSimChannel::InitAsDefaultInstance() {
}

hgSimChannel::hgSimChannel(const hgSimChannel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgSimChannel)
}

void hgSimChannel::SharedCtor() {
  ::memset(&leftbeginlat_, 0, reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&leftbeginlat_) + sizeof(angle_));
  _cached_size_ = 0;
}

hgSimChannel::~hgSimChannel() {
  // @@protoc_insertion_point(destructor:hgSimChannel)
  SharedDtor();
}

void hgSimChannel::SharedDtor() {
}

void hgSimChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgSimChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgSimChannel_descriptor_;
}

const hgSimChannel& hgSimChannel::default_instance() {
  protobuf_InitDefaults_hgChannelMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgSimChannel> hgSimChannel_default_instance_;

hgSimChannel* hgSimChannel::New(::google::protobuf::Arena* arena) const {
  hgSimChannel* n = new hgSimChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgSimChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:hgSimChannel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgSimChannel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgSimChannel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(leftbeginlat_, leftendlon_);
  ZR_(midbeginlon_, alllength_);
  angle_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool hgSimChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgSimChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double LeftBeginLat = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftbeginlat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_LeftEndLat;
        break;
      }

      // optional double LeftEndLat = 2;
      case 2: {
        if (tag == 17) {
         parse_LeftEndLat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftendlat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_MidBeginLat;
        break;
      }

      // optional double MidBeginLat = 3;
      case 3: {
        if (tag == 25) {
         parse_MidBeginLat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &midbeginlat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_MidEndLat;
        break;
      }

      // optional double MidEndLat = 4;
      case 4: {
        if (tag == 33) {
         parse_MidEndLat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &midendlat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_RightBeginLat;
        break;
      }

      // optional double RightBeginLat = 5;
      case 5: {
        if (tag == 41) {
         parse_RightBeginLat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightbeginlat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_RightEndLat;
        break;
      }

      // optional double RightEndLat = 6;
      case 6: {
        if (tag == 49) {
         parse_RightEndLat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightendlat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_LeftBeginLon;
        break;
      }

      // optional double LeftBeginLon = 7;
      case 7: {
        if (tag == 57) {
         parse_LeftBeginLon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftbeginlon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_LeftEndLon;
        break;
      }

      // optional double LeftEndLon = 8;
      case 8: {
        if (tag == 65) {
         parse_LeftEndLon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leftendlon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_MidBeginLon;
        break;
      }

      // optional double MidBeginLon = 9;
      case 9: {
        if (tag == 73) {
         parse_MidBeginLon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &midbeginlon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_MidEndLon;
        break;
      }

      // optional double MidEndLon = 10;
      case 10: {
        if (tag == 81) {
         parse_MidEndLon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &midendlon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_RightBeginLon;
        break;
      }

      // optional double RightBeginLon = 11;
      case 11: {
        if (tag == 89) {
         parse_RightBeginLon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightbeginlon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_RightEndLon;
        break;
      }

      // optional double RightEndLon = 12;
      case 12: {
        if (tag == 97) {
         parse_RightEndLon:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightendlon_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_Length;
        break;
      }

      // optional double Length = 13;
      case 13: {
        if (tag == 105) {
         parse_Length:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_WidthBegin;
        break;
      }

      // optional double WidthBegin = 14;
      case 14: {
        if (tag == 113) {
         parse_WidthBegin:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthbegin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_WidthEnd;
        break;
      }

      // optional double WidthEnd = 15;
      case 15: {
        if (tag == 121) {
         parse_WidthEnd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthend_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_AllLength;
        break;
      }

      // optional double AllLength = 16;
      case 16: {
        if (tag == 129) {
         parse_AllLength:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alllength_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_Angle;
        break;
      }

      // optional double Angle = 17;
      case 17: {
        if (tag == 137) {
         parse_Angle:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgSimChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgSimChannel)
  return false;
#undef DO_
}

void hgSimChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgSimChannel)
  // optional double LeftBeginLat = 1;
  if (this->leftbeginlat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->leftbeginlat(), output);
  }

  // optional double LeftEndLat = 2;
  if (this->leftendlat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->leftendlat(), output);
  }

  // optional double MidBeginLat = 3;
  if (this->midbeginlat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->midbeginlat(), output);
  }

  // optional double MidEndLat = 4;
  if (this->midendlat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->midendlat(), output);
  }

  // optional double RightBeginLat = 5;
  if (this->rightbeginlat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rightbeginlat(), output);
  }

  // optional double RightEndLat = 6;
  if (this->rightendlat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rightendlat(), output);
  }

  // optional double LeftBeginLon = 7;
  if (this->leftbeginlon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->leftbeginlon(), output);
  }

  // optional double LeftEndLon = 8;
  if (this->leftendlon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->leftendlon(), output);
  }

  // optional double MidBeginLon = 9;
  if (this->midbeginlon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->midbeginlon(), output);
  }

  // optional double MidEndLon = 10;
  if (this->midendlon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->midendlon(), output);
  }

  // optional double RightBeginLon = 11;
  if (this->rightbeginlon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->rightbeginlon(), output);
  }

  // optional double RightEndLon = 12;
  if (this->rightendlon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->rightendlon(), output);
  }

  // optional double Length = 13;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->length(), output);
  }

  // optional double WidthBegin = 14;
  if (this->widthbegin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->widthbegin(), output);
  }

  // optional double WidthEnd = 15;
  if (this->widthend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->widthend(), output);
  }

  // optional double AllLength = 16;
  if (this->alllength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->alllength(), output);
  }

  // optional double Angle = 17;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgSimChannel)
}

::google::protobuf::uint8* hgSimChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgSimChannel)
  // optional double LeftBeginLat = 1;
  if (this->leftbeginlat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->leftbeginlat(), target);
  }

  // optional double LeftEndLat = 2;
  if (this->leftendlat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->leftendlat(), target);
  }

  // optional double MidBeginLat = 3;
  if (this->midbeginlat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->midbeginlat(), target);
  }

  // optional double MidEndLat = 4;
  if (this->midendlat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->midendlat(), target);
  }

  // optional double RightBeginLat = 5;
  if (this->rightbeginlat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rightbeginlat(), target);
  }

  // optional double RightEndLat = 6;
  if (this->rightendlat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rightendlat(), target);
  }

  // optional double LeftBeginLon = 7;
  if (this->leftbeginlon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->leftbeginlon(), target);
  }

  // optional double LeftEndLon = 8;
  if (this->leftendlon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->leftendlon(), target);
  }

  // optional double MidBeginLon = 9;
  if (this->midbeginlon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->midbeginlon(), target);
  }

  // optional double MidEndLon = 10;
  if (this->midendlon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->midendlon(), target);
  }

  // optional double RightBeginLon = 11;
  if (this->rightbeginlon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->rightbeginlon(), target);
  }

  // optional double RightEndLon = 12;
  if (this->rightendlon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->rightendlon(), target);
  }

  // optional double Length = 13;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->length(), target);
  }

  // optional double WidthBegin = 14;
  if (this->widthbegin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->widthbegin(), target);
  }

  // optional double WidthEnd = 15;
  if (this->widthend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->widthend(), target);
  }

  // optional double AllLength = 16;
  if (this->alllength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->alllength(), target);
  }

  // optional double Angle = 17;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->angle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgSimChannel)
  return target;
}

size_t hgSimChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgSimChannel)
  size_t total_size = 0;

  // optional double LeftBeginLat = 1;
  if (this->leftbeginlat() != 0) {
    total_size += 1 + 8;
  }

  // optional double LeftEndLat = 2;
  if (this->leftendlat() != 0) {
    total_size += 1 + 8;
  }

  // optional double MidBeginLat = 3;
  if (this->midbeginlat() != 0) {
    total_size += 1 + 8;
  }

  // optional double MidEndLat = 4;
  if (this->midendlat() != 0) {
    total_size += 1 + 8;
  }

  // optional double RightBeginLat = 5;
  if (this->rightbeginlat() != 0) {
    total_size += 1 + 8;
  }

  // optional double RightEndLat = 6;
  if (this->rightendlat() != 0) {
    total_size += 1 + 8;
  }

  // optional double LeftBeginLon = 7;
  if (this->leftbeginlon() != 0) {
    total_size += 1 + 8;
  }

  // optional double LeftEndLon = 8;
  if (this->leftendlon() != 0) {
    total_size += 1 + 8;
  }

  // optional double MidBeginLon = 9;
  if (this->midbeginlon() != 0) {
    total_size += 1 + 8;
  }

  // optional double MidEndLon = 10;
  if (this->midendlon() != 0) {
    total_size += 1 + 8;
  }

  // optional double RightBeginLon = 11;
  if (this->rightbeginlon() != 0) {
    total_size += 1 + 8;
  }

  // optional double RightEndLon = 12;
  if (this->rightendlon() != 0) {
    total_size += 1 + 8;
  }

  // optional double Length = 13;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // optional double WidthBegin = 14;
  if (this->widthbegin() != 0) {
    total_size += 1 + 8;
  }

  // optional double WidthEnd = 15;
  if (this->widthend() != 0) {
    total_size += 1 + 8;
  }

  // optional double AllLength = 16;
  if (this->alllength() != 0) {
    total_size += 2 + 8;
  }

  // optional double Angle = 17;
  if (this->angle() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgSimChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgSimChannel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgSimChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgSimChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgSimChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgSimChannel)
    UnsafeMergeFrom(*source);
  }
}

void hgSimChannel::MergeFrom(const hgSimChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgSimChannel)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgSimChannel::UnsafeMergeFrom(const hgSimChannel& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.leftbeginlat() != 0) {
    set_leftbeginlat(from.leftbeginlat());
  }
  if (from.leftendlat() != 0) {
    set_leftendlat(from.leftendlat());
  }
  if (from.midbeginlat() != 0) {
    set_midbeginlat(from.midbeginlat());
  }
  if (from.midendlat() != 0) {
    set_midendlat(from.midendlat());
  }
  if (from.rightbeginlat() != 0) {
    set_rightbeginlat(from.rightbeginlat());
  }
  if (from.rightendlat() != 0) {
    set_rightendlat(from.rightendlat());
  }
  if (from.leftbeginlon() != 0) {
    set_leftbeginlon(from.leftbeginlon());
  }
  if (from.leftendlon() != 0) {
    set_leftendlon(from.leftendlon());
  }
  if (from.midbeginlon() != 0) {
    set_midbeginlon(from.midbeginlon());
  }
  if (from.midendlon() != 0) {
    set_midendlon(from.midendlon());
  }
  if (from.rightbeginlon() != 0) {
    set_rightbeginlon(from.rightbeginlon());
  }
  if (from.rightendlon() != 0) {
    set_rightendlon(from.rightendlon());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.widthbegin() != 0) {
    set_widthbegin(from.widthbegin());
  }
  if (from.widthend() != 0) {
    set_widthend(from.widthend());
  }
  if (from.alllength() != 0) {
    set_alllength(from.alllength());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void hgSimChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgSimChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgSimChannel::CopyFrom(const hgSimChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgSimChannel)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgSimChannel::IsInitialized() const {

  return true;
}

void hgSimChannel::Swap(hgSimChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgSimChannel::InternalSwap(hgSimChannel* other) {
  std::swap(leftbeginlat_, other->leftbeginlat_);
  std::swap(leftendlat_, other->leftendlat_);
  std::swap(midbeginlat_, other->midbeginlat_);
  std::swap(midendlat_, other->midendlat_);
  std::swap(rightbeginlat_, other->rightbeginlat_);
  std::swap(rightendlat_, other->rightendlat_);
  std::swap(leftbeginlon_, other->leftbeginlon_);
  std::swap(leftendlon_, other->leftendlon_);
  std::swap(midbeginlon_, other->midbeginlon_);
  std::swap(midendlon_, other->midendlon_);
  std::swap(rightbeginlon_, other->rightbeginlon_);
  std::swap(rightendlon_, other->rightendlon_);
  std::swap(length_, other->length_);
  std::swap(widthbegin_, other->widthbegin_);
  std::swap(widthend_, other->widthend_);
  std::swap(alllength_, other->alllength_);
  std::swap(angle_, other->angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgSimChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgSimChannel_descriptor_;
  metadata.reflection = hgSimChannel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgSimChannel

// optional double LeftBeginLat = 1;
void hgSimChannel::clear_leftbeginlat() {
  leftbeginlat_ = 0;
}
double hgSimChannel::leftbeginlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftBeginLat)
  return leftbeginlat_;
}
void hgSimChannel::set_leftbeginlat(double value) {
  
  leftbeginlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftBeginLat)
}

// optional double LeftEndLat = 2;
void hgSimChannel::clear_leftendlat() {
  leftendlat_ = 0;
}
double hgSimChannel::leftendlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftEndLat)
  return leftendlat_;
}
void hgSimChannel::set_leftendlat(double value) {
  
  leftendlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftEndLat)
}

// optional double MidBeginLat = 3;
void hgSimChannel::clear_midbeginlat() {
  midbeginlat_ = 0;
}
double hgSimChannel::midbeginlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidBeginLat)
  return midbeginlat_;
}
void hgSimChannel::set_midbeginlat(double value) {
  
  midbeginlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidBeginLat)
}

// optional double MidEndLat = 4;
void hgSimChannel::clear_midendlat() {
  midendlat_ = 0;
}
double hgSimChannel::midendlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidEndLat)
  return midendlat_;
}
void hgSimChannel::set_midendlat(double value) {
  
  midendlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidEndLat)
}

// optional double RightBeginLat = 5;
void hgSimChannel::clear_rightbeginlat() {
  rightbeginlat_ = 0;
}
double hgSimChannel::rightbeginlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightBeginLat)
  return rightbeginlat_;
}
void hgSimChannel::set_rightbeginlat(double value) {
  
  rightbeginlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightBeginLat)
}

// optional double RightEndLat = 6;
void hgSimChannel::clear_rightendlat() {
  rightendlat_ = 0;
}
double hgSimChannel::rightendlat() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightEndLat)
  return rightendlat_;
}
void hgSimChannel::set_rightendlat(double value) {
  
  rightendlat_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightEndLat)
}

// optional double LeftBeginLon = 7;
void hgSimChannel::clear_leftbeginlon() {
  leftbeginlon_ = 0;
}
double hgSimChannel::leftbeginlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftBeginLon)
  return leftbeginlon_;
}
void hgSimChannel::set_leftbeginlon(double value) {
  
  leftbeginlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftBeginLon)
}

// optional double LeftEndLon = 8;
void hgSimChannel::clear_leftendlon() {
  leftendlon_ = 0;
}
double hgSimChannel::leftendlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.LeftEndLon)
  return leftendlon_;
}
void hgSimChannel::set_leftendlon(double value) {
  
  leftendlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.LeftEndLon)
}

// optional double MidBeginLon = 9;
void hgSimChannel::clear_midbeginlon() {
  midbeginlon_ = 0;
}
double hgSimChannel::midbeginlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidBeginLon)
  return midbeginlon_;
}
void hgSimChannel::set_midbeginlon(double value) {
  
  midbeginlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidBeginLon)
}

// optional double MidEndLon = 10;
void hgSimChannel::clear_midendlon() {
  midendlon_ = 0;
}
double hgSimChannel::midendlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.MidEndLon)
  return midendlon_;
}
void hgSimChannel::set_midendlon(double value) {
  
  midendlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.MidEndLon)
}

// optional double RightBeginLon = 11;
void hgSimChannel::clear_rightbeginlon() {
  rightbeginlon_ = 0;
}
double hgSimChannel::rightbeginlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightBeginLon)
  return rightbeginlon_;
}
void hgSimChannel::set_rightbeginlon(double value) {
  
  rightbeginlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightBeginLon)
}

// optional double RightEndLon = 12;
void hgSimChannel::clear_rightendlon() {
  rightendlon_ = 0;
}
double hgSimChannel::rightendlon() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.RightEndLon)
  return rightendlon_;
}
void hgSimChannel::set_rightendlon(double value) {
  
  rightendlon_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.RightEndLon)
}

// optional double Length = 13;
void hgSimChannel::clear_length() {
  length_ = 0;
}
double hgSimChannel::length() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.Length)
  return length_;
}
void hgSimChannel::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.Length)
}

// optional double WidthBegin = 14;
void hgSimChannel::clear_widthbegin() {
  widthbegin_ = 0;
}
double hgSimChannel::widthbegin() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.WidthBegin)
  return widthbegin_;
}
void hgSimChannel::set_widthbegin(double value) {
  
  widthbegin_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.WidthBegin)
}

// optional double WidthEnd = 15;
void hgSimChannel::clear_widthend() {
  widthend_ = 0;
}
double hgSimChannel::widthend() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.WidthEnd)
  return widthend_;
}
void hgSimChannel::set_widthend(double value) {
  
  widthend_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.WidthEnd)
}

// optional double AllLength = 16;
void hgSimChannel::clear_alllength() {
  alllength_ = 0;
}
double hgSimChannel::alllength() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.AllLength)
  return alllength_;
}
void hgSimChannel::set_alllength(double value) {
  
  alllength_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.AllLength)
}

// optional double Angle = 17;
void hgSimChannel::clear_angle() {
  angle_ = 0;
}
double hgSimChannel::angle() const {
  // @@protoc_insertion_point(field_get:hgSimChannel.Angle)
  return angle_;
}
void hgSimChannel::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:hgSimChannel.Angle)
}

inline const hgSimChannel* hgSimChannel::internal_default_instance() {
  return &hgSimChannel_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgChannelMsg::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgChannelMsg::hgChannelMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgChannelMsg_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgChannelMsg)
}

void hgChannelMsg::InitAsDefaultInstance() {
}

hgChannelMsg::hgChannelMsg(const hgChannelMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgChannelMsg)
}

void hgChannelMsg::SharedCtor() {
  _cached_size_ = 0;
}

hgChannelMsg::~hgChannelMsg() {
  // @@protoc_insertion_point(destructor:hgChannelMsg)
  SharedDtor();
}

void hgChannelMsg::SharedDtor() {
}

void hgChannelMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgChannelMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgChannelMsg_descriptor_;
}

const hgChannelMsg& hgChannelMsg::default_instance() {
  protobuf_InitDefaults_hgChannelMsg_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgChannelMsg> hgChannelMsg_default_instance_;

hgChannelMsg* hgChannelMsg::New(::google::protobuf::Arena* arena) const {
  hgChannelMsg* n = new hgChannelMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgChannelMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hgChannelMsg)
  channel_.Clear();
}

bool hgChannelMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgChannelMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hgSimChannel Channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_channel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Channel;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgChannelMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgChannelMsg)
  return false;
#undef DO_
}

void hgChannelMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgChannelMsg)
  // repeated .hgSimChannel Channel = 1;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel(i), output);
  }

  // @@protoc_insertion_point(serialize_end:hgChannelMsg)
}

::google::protobuf::uint8* hgChannelMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgChannelMsg)
  // repeated .hgSimChannel Channel = 1;
  for (unsigned int i = 0, n = this->channel_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->channel(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgChannelMsg)
  return target;
}

size_t hgChannelMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgChannelMsg)
  size_t total_size = 0;

  // repeated .hgSimChannel Channel = 1;
  {
    unsigned int count = this->channel_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgChannelMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgChannelMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgChannelMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgChannelMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgChannelMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgChannelMsg)
    UnsafeMergeFrom(*source);
  }
}

void hgChannelMsg::MergeFrom(const hgChannelMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgChannelMsg)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgChannelMsg::UnsafeMergeFrom(const hgChannelMsg& from) {
  GOOGLE_DCHECK(&from != this);
  channel_.MergeFrom(from.channel_);
}

void hgChannelMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgChannelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgChannelMsg::CopyFrom(const hgChannelMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgChannelMsg)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgChannelMsg::IsInitialized() const {

  return true;
}

void hgChannelMsg::Swap(hgChannelMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgChannelMsg::InternalSwap(hgChannelMsg* other) {
  channel_.UnsafeArenaSwap(&other->channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgChannelMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgChannelMsg_descriptor_;
  metadata.reflection = hgChannelMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgChannelMsg

// repeated .hgSimChannel Channel = 1;
int hgChannelMsg::channel_size() const {
  return channel_.size();
}
void hgChannelMsg::clear_channel() {
  channel_.Clear();
}
const ::hgSimChannel& hgChannelMsg::channel(int index) const {
  // @@protoc_insertion_point(field_get:hgChannelMsg.Channel)
  return channel_.Get(index);
}
::hgSimChannel* hgChannelMsg::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:hgChannelMsg.Channel)
  return channel_.Mutable(index);
}
::hgSimChannel* hgChannelMsg::add_channel() {
  // @@protoc_insertion_point(field_add:hgChannelMsg.Channel)
  return channel_.Add();
}
::google::protobuf::RepeatedPtrField< ::hgSimChannel >*
hgChannelMsg::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:hgChannelMsg.Channel)
  return &channel_;
}
const ::google::protobuf::RepeatedPtrField< ::hgSimChannel >&
hgChannelMsg::channel() const {
  // @@protoc_insertion_point(field_list:hgChannelMsg.Channel)
  return channel_;
}

inline const hgChannelMsg* hgChannelMsg::internal_default_instance() {
  return &hgChannelMsg_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
