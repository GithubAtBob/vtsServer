// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto

#ifndef PROTOBUF_channel_2eproto__INCLUDED
#define PROTOBUF_channel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "PointMes.pb.h"
#include "channelwarinfo.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_channel_2eproto();
void protobuf_InitDefaults_channel_2eproto();
void protobuf_AssignDesc_channel_2eproto();
void protobuf_ShutdownFile_channel_2eproto();

class ChannelRepsone;
class ChannelRequest;
class ChannelWay;

// ===================================================================

class ChannelWay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChannelWay) */ {
 public:
  ChannelWay();
  virtual ~ChannelWay();

  ChannelWay(const ChannelWay& from);

  inline ChannelWay& operator=(const ChannelWay& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelWay& default_instance();

  static const ChannelWay* internal_default_instance();

  void Swap(ChannelWay* other);

  // implements Message ----------------------------------------------

  inline ChannelWay* New() const { return New(NULL); }

  ChannelWay* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelWay& from);
  void MergeFrom(const ChannelWay& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelWay* other);
  void UnsafeMergeFrom(const ChannelWay& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PointMes point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::PointMes& point(int index) const;
  ::PointMes* mutable_point(int index);
  ::PointMes* add_point();
  ::google::protobuf::RepeatedPtrField< ::PointMes >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::PointMes >&
      point() const;

  // @@protoc_insertion_point(class_scope:ChannelWay)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::PointMes > point_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channel_2eproto_impl();
  friend void  protobuf_AddDesc_channel_2eproto_impl();
  friend void protobuf_AssignDesc_channel_2eproto();
  friend void protobuf_ShutdownFile_channel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChannelWay> ChannelWay_default_instance_;

// -------------------------------------------------------------------

class ChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChannelRequest) */ {
 public:
  ChannelRequest();
  virtual ~ChannelRequest();

  ChannelRequest(const ChannelRequest& from);

  inline ChannelRequest& operator=(const ChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelRequest& default_instance();

  static const ChannelRequest* internal_default_instance();

  void Swap(ChannelRequest* other);

  // implements Message ----------------------------------------------

  inline ChannelRequest* New() const { return New(NULL); }

  ChannelRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelRequest& from);
  void MergeFrom(const ChannelRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelRequest* other);
  void UnsafeMergeFrom(const ChannelRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string annotation = 4;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 4;
  const ::std::string& annotation() const;
  void set_annotation(const ::std::string& value);
  void set_annotation(const char* value);
  void set_annotation(const char* value, size_t size);
  ::std::string* mutable_annotation();
  ::std::string* release_annotation();
  void set_allocated_annotation(::std::string* annotation);

  // optional int32 channeltype = 5;
  void clear_channeltype();
  static const int kChanneltypeFieldNumber = 5;
  ::google::protobuf::int32 channeltype() const;
  void set_channeltype(::google::protobuf::int32 value);

  // optional double width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // repeated .ChannelWay channel = 7;
  int channel_size() const;
  void clear_channel();
  static const int kChannelFieldNumber = 7;
  const ::ChannelWay& channel(int index) const;
  ::ChannelWay* mutable_channel(int index);
  ::ChannelWay* add_channel();
  ::google::protobuf::RepeatedPtrField< ::ChannelWay >*
      mutable_channel();
  const ::google::protobuf::RepeatedPtrField< ::ChannelWay >&
      channel() const;

  // optional int32 linestyle = 8;
  void clear_linestyle();
  static const int kLinestyleFieldNumber = 8;
  ::google::protobuf::int32 linestyle() const;
  void set_linestyle(::google::protobuf::int32 value);

  // optional string linecolor = 9;
  void clear_linecolor();
  static const int kLinecolorFieldNumber = 9;
  const ::std::string& linecolor() const;
  void set_linecolor(const ::std::string& value);
  void set_linecolor(const char* value);
  void set_linecolor(const char* value, size_t size);
  ::std::string* mutable_linecolor();
  ::std::string* release_linecolor();
  void set_allocated_linecolor(::std::string* linecolor);

  // optional string waringID = 10;
  void clear_waringid();
  static const int kWaringIDFieldNumber = 10;
  const ::std::string& waringid() const;
  void set_waringid(const ::std::string& value);
  void set_waringid(const char* value);
  void set_waringid(const char* value, size_t size);
  ::std::string* mutable_waringid();
  ::std::string* release_waringid();
  void set_allocated_waringid(::std::string* waringid);

  // optional string waringtype = 11;
  void clear_waringtype();
  static const int kWaringtypeFieldNumber = 11;
  const ::std::string& waringtype() const;
  void set_waringtype(const ::std::string& value);
  void set_waringtype(const char* value);
  void set_waringtype(const char* value, size_t size);
  ::std::string* mutable_waringtype();
  ::std::string* release_waringtype();
  void set_allocated_waringtype(::std::string* waringtype);

  // optional string drawman = 12;
  void clear_drawman();
  static const int kDrawmanFieldNumber = 12;
  const ::std::string& drawman() const;
  void set_drawman(const ::std::string& value);
  void set_drawman(const char* value);
  void set_drawman(const char* value, size_t size);
  ::std::string* mutable_drawman();
  ::std::string* release_drawman();
  void set_allocated_drawman(::std::string* drawman);

  // optional bool isshare = 13;
  void clear_isshare();
  static const int kIsshareFieldNumber = 13;
  bool isshare() const;
  void set_isshare(bool value);

  // repeated .ChannelWarInfo info = 14;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 14;
  const ::ChannelWarInfo& info(int index) const;
  ::ChannelWarInfo* mutable_info(int index);
  ::ChannelWarInfo* add_info();
  ::google::protobuf::RepeatedPtrField< ::ChannelWarInfo >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::ChannelWarInfo >&
      info() const;

  // @@protoc_insertion_point(class_scope:ChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChannelWay > channel_;
  ::google::protobuf::RepeatedPtrField< ::ChannelWarInfo > info_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr annotation_;
  ::google::protobuf::internal::ArenaStringPtr linecolor_;
  ::google::protobuf::internal::ArenaStringPtr waringid_;
  ::google::protobuf::internal::ArenaStringPtr waringtype_;
  ::google::protobuf::internal::ArenaStringPtr drawman_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 channeltype_;
  double width_;
  ::google::protobuf::int32 linestyle_;
  bool isshare_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channel_2eproto_impl();
  friend void  protobuf_AddDesc_channel_2eproto_impl();
  friend void protobuf_AssignDesc_channel_2eproto();
  friend void protobuf_ShutdownFile_channel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChannelRequest> ChannelRequest_default_instance_;

// -------------------------------------------------------------------

class ChannelRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChannelRepsone) */ {
 public:
  ChannelRepsone();
  virtual ~ChannelRepsone();

  ChannelRepsone(const ChannelRepsone& from);

  inline ChannelRepsone& operator=(const ChannelRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelRepsone& default_instance();

  static const ChannelRepsone* internal_default_instance();

  void Swap(ChannelRepsone* other);

  // implements Message ----------------------------------------------

  inline ChannelRepsone* New() const { return New(NULL); }

  ChannelRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelRepsone& from);
  void MergeFrom(const ChannelRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelRepsone* other);
  void UnsafeMergeFrom(const ChannelRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional string result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // repeated .ChannelRequest channels = 3;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 3;
  const ::ChannelRequest& channels(int index) const;
  ::ChannelRequest* mutable_channels(int index);
  ::ChannelRequest* add_channels();
  ::google::protobuf::RepeatedPtrField< ::ChannelRequest >*
      mutable_channels();
  const ::google::protobuf::RepeatedPtrField< ::ChannelRequest >&
      channels() const;

  // @@protoc_insertion_point(class_scope:ChannelRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ChannelRequest > channels_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_channel_2eproto_impl();
  friend void  protobuf_AddDesc_channel_2eproto_impl();
  friend void protobuf_AssignDesc_channel_2eproto();
  friend void protobuf_ShutdownFile_channel_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ChannelRepsone> ChannelRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelWay

// repeated .PointMes point = 1;
inline int ChannelWay::point_size() const {
  return point_.size();
}
inline void ChannelWay::clear_point() {
  point_.Clear();
}
inline const ::PointMes& ChannelWay::point(int index) const {
  // @@protoc_insertion_point(field_get:ChannelWay.point)
  return point_.Get(index);
}
inline ::PointMes* ChannelWay::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelWay.point)
  return point_.Mutable(index);
}
inline ::PointMes* ChannelWay::add_point() {
  // @@protoc_insertion_point(field_add:ChannelWay.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::PointMes >*
ChannelWay::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:ChannelWay.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::PointMes >&
ChannelWay::point() const {
  // @@protoc_insertion_point(field_list:ChannelWay.point)
  return point_;
}

inline const ChannelWay* ChannelWay::internal_default_instance() {
  return &ChannelWay_default_instance_.get();
}
// -------------------------------------------------------------------

// ChannelRequest

// optional int32 type = 1;
inline void ChannelRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ChannelRequest::type() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.type)
  return type_;
}
inline void ChannelRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.type)
}

// optional string ID = 2;
inline void ChannelRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRequest::id() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.ID)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.ID)
}
inline void ChannelRequest::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.ID)
}
inline void ChannelRequest::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.ID)
}
inline ::std::string* ChannelRequest::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRequest::release_id() {
  // @@protoc_insertion_point(field_release:ChannelRequest.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.ID)
}

// optional string name = 3;
inline void ChannelRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRequest::name() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.name)
}
inline void ChannelRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.name)
}
inline void ChannelRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.name)
}
inline ::std::string* ChannelRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRequest::release_name() {
  // @@protoc_insertion_point(field_release:ChannelRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.name)
}

// optional string annotation = 4;
inline void ChannelRequest::clear_annotation() {
  annotation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRequest::annotation() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.annotation)
  return annotation_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_annotation(const ::std::string& value) {
  
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.annotation)
}
inline void ChannelRequest::set_annotation(const char* value) {
  
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.annotation)
}
inline void ChannelRequest::set_annotation(const char* value, size_t size) {
  
  annotation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.annotation)
}
inline ::std::string* ChannelRequest::mutable_annotation() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.annotation)
  return annotation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRequest::release_annotation() {
  // @@protoc_insertion_point(field_release:ChannelRequest.annotation)
  
  return annotation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_allocated_annotation(::std::string* annotation) {
  if (annotation != NULL) {
    
  } else {
    
  }
  annotation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), annotation);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.annotation)
}

// optional int32 channeltype = 5;
inline void ChannelRequest::clear_channeltype() {
  channeltype_ = 0;
}
inline ::google::protobuf::int32 ChannelRequest::channeltype() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.channeltype)
  return channeltype_;
}
inline void ChannelRequest::set_channeltype(::google::protobuf::int32 value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.channeltype)
}

// optional double width = 6;
inline void ChannelRequest::clear_width() {
  width_ = 0;
}
inline double ChannelRequest::width() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.width)
  return width_;
}
inline void ChannelRequest::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.width)
}

// repeated .ChannelWay channel = 7;
inline int ChannelRequest::channel_size() const {
  return channel_.size();
}
inline void ChannelRequest::clear_channel() {
  channel_.Clear();
}
inline const ::ChannelWay& ChannelRequest::channel(int index) const {
  // @@protoc_insertion_point(field_get:ChannelRequest.channel)
  return channel_.Get(index);
}
inline ::ChannelWay* ChannelRequest::mutable_channel(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelRequest.channel)
  return channel_.Mutable(index);
}
inline ::ChannelWay* ChannelRequest::add_channel() {
  // @@protoc_insertion_point(field_add:ChannelRequest.channel)
  return channel_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ChannelWay >*
ChannelRequest::mutable_channel() {
  // @@protoc_insertion_point(field_mutable_list:ChannelRequest.channel)
  return &channel_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ChannelWay >&
ChannelRequest::channel() const {
  // @@protoc_insertion_point(field_list:ChannelRequest.channel)
  return channel_;
}

// optional int32 linestyle = 8;
inline void ChannelRequest::clear_linestyle() {
  linestyle_ = 0;
}
inline ::google::protobuf::int32 ChannelRequest::linestyle() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.linestyle)
  return linestyle_;
}
inline void ChannelRequest::set_linestyle(::google::protobuf::int32 value) {
  
  linestyle_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.linestyle)
}

// optional string linecolor = 9;
inline void ChannelRequest::clear_linecolor() {
  linecolor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRequest::linecolor() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.linecolor)
  return linecolor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_linecolor(const ::std::string& value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.linecolor)
}
inline void ChannelRequest::set_linecolor(const char* value) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.linecolor)
}
inline void ChannelRequest::set_linecolor(const char* value, size_t size) {
  
  linecolor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.linecolor)
}
inline ::std::string* ChannelRequest::mutable_linecolor() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.linecolor)
  return linecolor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRequest::release_linecolor() {
  // @@protoc_insertion_point(field_release:ChannelRequest.linecolor)
  
  return linecolor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_allocated_linecolor(::std::string* linecolor) {
  if (linecolor != NULL) {
    
  } else {
    
  }
  linecolor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linecolor);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.linecolor)
}

// optional string waringID = 10;
inline void ChannelRequest::clear_waringid() {
  waringid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRequest::waringid() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.waringID)
  return waringid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_waringid(const ::std::string& value) {
  
  waringid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.waringID)
}
inline void ChannelRequest::set_waringid(const char* value) {
  
  waringid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.waringID)
}
inline void ChannelRequest::set_waringid(const char* value, size_t size) {
  
  waringid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.waringID)
}
inline ::std::string* ChannelRequest::mutable_waringid() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.waringID)
  return waringid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRequest::release_waringid() {
  // @@protoc_insertion_point(field_release:ChannelRequest.waringID)
  
  return waringid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_allocated_waringid(::std::string* waringid) {
  if (waringid != NULL) {
    
  } else {
    
  }
  waringid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waringid);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.waringID)
}

// optional string waringtype = 11;
inline void ChannelRequest::clear_waringtype() {
  waringtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRequest::waringtype() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.waringtype)
  return waringtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_waringtype(const ::std::string& value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.waringtype)
}
inline void ChannelRequest::set_waringtype(const char* value) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.waringtype)
}
inline void ChannelRequest::set_waringtype(const char* value, size_t size) {
  
  waringtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.waringtype)
}
inline ::std::string* ChannelRequest::mutable_waringtype() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.waringtype)
  return waringtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRequest::release_waringtype() {
  // @@protoc_insertion_point(field_release:ChannelRequest.waringtype)
  
  return waringtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_allocated_waringtype(::std::string* waringtype) {
  if (waringtype != NULL) {
    
  } else {
    
  }
  waringtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), waringtype);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.waringtype)
}

// optional string drawman = 12;
inline void ChannelRequest::clear_drawman() {
  drawman_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRequest::drawman() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.drawman)
  return drawman_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_drawman(const ::std::string& value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRequest.drawman)
}
inline void ChannelRequest::set_drawman(const char* value) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRequest.drawman)
}
inline void ChannelRequest::set_drawman(const char* value, size_t size) {
  
  drawman_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRequest.drawman)
}
inline ::std::string* ChannelRequest::mutable_drawman() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRequest.drawman)
  return drawman_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRequest::release_drawman() {
  // @@protoc_insertion_point(field_release:ChannelRequest.drawman)
  
  return drawman_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRequest::set_allocated_drawman(::std::string* drawman) {
  if (drawman != NULL) {
    
  } else {
    
  }
  drawman_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drawman);
  // @@protoc_insertion_point(field_set_allocated:ChannelRequest.drawman)
}

// optional bool isshare = 13;
inline void ChannelRequest::clear_isshare() {
  isshare_ = false;
}
inline bool ChannelRequest::isshare() const {
  // @@protoc_insertion_point(field_get:ChannelRequest.isshare)
  return isshare_;
}
inline void ChannelRequest::set_isshare(bool value) {
  
  isshare_ = value;
  // @@protoc_insertion_point(field_set:ChannelRequest.isshare)
}

// repeated .ChannelWarInfo info = 14;
inline int ChannelRequest::info_size() const {
  return info_.size();
}
inline void ChannelRequest::clear_info() {
  info_.Clear();
}
inline const ::ChannelWarInfo& ChannelRequest::info(int index) const {
  // @@protoc_insertion_point(field_get:ChannelRequest.info)
  return info_.Get(index);
}
inline ::ChannelWarInfo* ChannelRequest::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelRequest.info)
  return info_.Mutable(index);
}
inline ::ChannelWarInfo* ChannelRequest::add_info() {
  // @@protoc_insertion_point(field_add:ChannelRequest.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ChannelWarInfo >*
ChannelRequest::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:ChannelRequest.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ChannelWarInfo >&
ChannelRequest::info() const {
  // @@protoc_insertion_point(field_list:ChannelRequest.info)
  return info_;
}

inline const ChannelRequest* ChannelRequest::internal_default_instance() {
  return &ChannelRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// ChannelRepsone

// optional int32 type = 1;
inline void ChannelRepsone::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ChannelRepsone::type() const {
  // @@protoc_insertion_point(field_get:ChannelRepsone.type)
  return type_;
}
inline void ChannelRepsone::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChannelRepsone.type)
}

// optional string result = 2;
inline void ChannelRepsone::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelRepsone::result() const {
  // @@protoc_insertion_point(field_get:ChannelRepsone.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRepsone::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelRepsone.result)
}
inline void ChannelRepsone::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelRepsone.result)
}
inline void ChannelRepsone::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelRepsone.result)
}
inline ::std::string* ChannelRepsone::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:ChannelRepsone.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelRepsone::release_result() {
  // @@protoc_insertion_point(field_release:ChannelRepsone.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelRepsone::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:ChannelRepsone.result)
}

// repeated .ChannelRequest channels = 3;
inline int ChannelRepsone::channels_size() const {
  return channels_.size();
}
inline void ChannelRepsone::clear_channels() {
  channels_.Clear();
}
inline const ::ChannelRequest& ChannelRepsone::channels(int index) const {
  // @@protoc_insertion_point(field_get:ChannelRepsone.channels)
  return channels_.Get(index);
}
inline ::ChannelRequest* ChannelRepsone::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ChannelRepsone.channels)
  return channels_.Mutable(index);
}
inline ::ChannelRequest* ChannelRepsone::add_channels() {
  // @@protoc_insertion_point(field_add:ChannelRepsone.channels)
  return channels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ChannelRequest >*
ChannelRepsone::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:ChannelRepsone.channels)
  return &channels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ChannelRequest >&
ChannelRepsone::channels() const {
  // @@protoc_insertion_point(field_list:ChannelRepsone.channels)
  return channels_;
}

inline const ChannelRepsone* ChannelRepsone::internal_default_instance() {
  return &ChannelRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_channel_2eproto__INCLUDED
