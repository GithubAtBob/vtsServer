// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgSpeedWatch.proto

#ifndef PROTOBUF_hgSpeedWatch_2eproto__INCLUDED
#define PROTOBUF_hgSpeedWatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_hgSpeedWatch_2eproto();
void protobuf_InitDefaults_hgSpeedWatch_2eproto();
void protobuf_AssignDesc_hgSpeedWatch_2eproto();
void protobuf_ShutdownFile_hgSpeedWatch_2eproto();

class hgSpeedWatch;
class hgSpeedWatchRepsone;

// ===================================================================

class hgSpeedWatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgSpeedWatch) */ {
 public:
  hgSpeedWatch();
  virtual ~hgSpeedWatch();

  hgSpeedWatch(const hgSpeedWatch& from);

  inline hgSpeedWatch& operator=(const hgSpeedWatch& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgSpeedWatch& default_instance();

  static const hgSpeedWatch* internal_default_instance();

  void Swap(hgSpeedWatch* other);

  // implements Message ----------------------------------------------

  inline hgSpeedWatch* New() const { return New(NULL); }

  hgSpeedWatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgSpeedWatch& from);
  void MergeFrom(const hgSpeedWatch& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgSpeedWatch* other);
  void UnsafeMergeFrom(const hgSpeedWatch& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string MMSI = 1;
  void clear_mmsi();
  static const int kMMSIFieldNumber = 1;
  const ::std::string& mmsi() const;
  void set_mmsi(const ::std::string& value);
  void set_mmsi(const char* value);
  void set_mmsi(const char* value, size_t size);
  ::std::string* mutable_mmsi();
  ::std::string* release_mmsi();
  void set_allocated_mmsi(::std::string* mmsi);

  // optional bool SpeedWatch = 2;
  void clear_speedwatch();
  static const int kSpeedWatchFieldNumber = 2;
  bool speedwatch() const;
  void set_speedwatch(bool value);

  // optional double MinSpeed = 3;
  void clear_minspeed();
  static const int kMinSpeedFieldNumber = 3;
  double minspeed() const;
  void set_minspeed(double value);

  // optional double MinDuration = 4;
  void clear_minduration();
  static const int kMinDurationFieldNumber = 4;
  double minduration() const;
  void set_minduration(double value);

  // optional double MaxSpeed = 5;
  void clear_maxspeed();
  static const int kMaxSpeedFieldNumber = 5;
  double maxspeed() const;
  void set_maxspeed(double value);

  // optional double MaxDuration = 6;
  void clear_maxduration();
  static const int kMaxDurationFieldNumber = 6;
  double maxduration() const;
  void set_maxduration(double value);

  // @@protoc_insertion_point(class_scope:hgSpeedWatch)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mmsi_;
  double minspeed_;
  double minduration_;
  double maxspeed_;
  double maxduration_;
  bool speedwatch_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgSpeedWatch_2eproto_impl();
  friend void  protobuf_AddDesc_hgSpeedWatch_2eproto_impl();
  friend void protobuf_AssignDesc_hgSpeedWatch_2eproto();
  friend void protobuf_ShutdownFile_hgSpeedWatch_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgSpeedWatch> hgSpeedWatch_default_instance_;

// -------------------------------------------------------------------

class hgSpeedWatchRepsone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hgSpeedWatchRepsone) */ {
 public:
  hgSpeedWatchRepsone();
  virtual ~hgSpeedWatchRepsone();

  hgSpeedWatchRepsone(const hgSpeedWatchRepsone& from);

  inline hgSpeedWatchRepsone& operator=(const hgSpeedWatchRepsone& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hgSpeedWatchRepsone& default_instance();

  static const hgSpeedWatchRepsone* internal_default_instance();

  void Swap(hgSpeedWatchRepsone* other);

  // implements Message ----------------------------------------------

  inline hgSpeedWatchRepsone* New() const { return New(NULL); }

  hgSpeedWatchRepsone* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hgSpeedWatchRepsone& from);
  void MergeFrom(const hgSpeedWatchRepsone& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(hgSpeedWatchRepsone* other);
  void UnsafeMergeFrom(const hgSpeedWatchRepsone& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hgSpeedWatchRepsone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_hgSpeedWatch_2eproto_impl();
  friend void  protobuf_AddDesc_hgSpeedWatch_2eproto_impl();
  friend void protobuf_AssignDesc_hgSpeedWatch_2eproto();
  friend void protobuf_ShutdownFile_hgSpeedWatch_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<hgSpeedWatchRepsone> hgSpeedWatchRepsone_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// hgSpeedWatch

// optional string MMSI = 1;
inline void hgSpeedWatch::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& hgSpeedWatch::mmsi() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgSpeedWatch::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MMSI)
}
inline void hgSpeedWatch::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgSpeedWatch.MMSI)
}
inline void hgSpeedWatch::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgSpeedWatch.MMSI)
}
inline ::std::string* hgSpeedWatch::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgSpeedWatch.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* hgSpeedWatch::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgSpeedWatch.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void hgSpeedWatch::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgSpeedWatch.MMSI)
}

// optional bool SpeedWatch = 2;
inline void hgSpeedWatch::clear_speedwatch() {
  speedwatch_ = false;
}
inline bool hgSpeedWatch::speedwatch() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.SpeedWatch)
  return speedwatch_;
}
inline void hgSpeedWatch::set_speedwatch(bool value) {
  
  speedwatch_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.SpeedWatch)
}

// optional double MinSpeed = 3;
inline void hgSpeedWatch::clear_minspeed() {
  minspeed_ = 0;
}
inline double hgSpeedWatch::minspeed() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MinSpeed)
  return minspeed_;
}
inline void hgSpeedWatch::set_minspeed(double value) {
  
  minspeed_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MinSpeed)
}

// optional double MinDuration = 4;
inline void hgSpeedWatch::clear_minduration() {
  minduration_ = 0;
}
inline double hgSpeedWatch::minduration() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MinDuration)
  return minduration_;
}
inline void hgSpeedWatch::set_minduration(double value) {
  
  minduration_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MinDuration)
}

// optional double MaxSpeed = 5;
inline void hgSpeedWatch::clear_maxspeed() {
  maxspeed_ = 0;
}
inline double hgSpeedWatch::maxspeed() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MaxSpeed)
  return maxspeed_;
}
inline void hgSpeedWatch::set_maxspeed(double value) {
  
  maxspeed_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MaxSpeed)
}

// optional double MaxDuration = 6;
inline void hgSpeedWatch::clear_maxduration() {
  maxduration_ = 0;
}
inline double hgSpeedWatch::maxduration() const {
  // @@protoc_insertion_point(field_get:hgSpeedWatch.MaxDuration)
  return maxduration_;
}
inline void hgSpeedWatch::set_maxduration(double value) {
  
  maxduration_ = value;
  // @@protoc_insertion_point(field_set:hgSpeedWatch.MaxDuration)
}

inline const hgSpeedWatch* hgSpeedWatch::internal_default_instance() {
  return &hgSpeedWatch_default_instance_.get();
}
// -------------------------------------------------------------------

// hgSpeedWatchRepsone

inline const hgSpeedWatchRepsone* hgSpeedWatchRepsone::internal_default_instance() {
  return &hgSpeedWatchRepsone_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hgSpeedWatch_2eproto__INCLUDED
