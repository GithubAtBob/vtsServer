// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hgDomain.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hgDomain.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* hgDomain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgDomain_reflection_ = NULL;
const ::google::protobuf::Descriptor* hgDomainRepsone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hgDomainRepsone_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hgDomain_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hgDomain_2eproto() {
  protobuf_AddDesc_hgDomain_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hgDomain.proto");
  GOOGLE_CHECK(file != NULL);
  hgDomain_descriptor_ = file->message_type(0);
  static const int hgDomain_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, domainwatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, domainradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, domaincolorr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, domaincolorg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, domaincolorb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, domainshow_),
  };
  hgDomain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgDomain_descriptor_,
      hgDomain::internal_default_instance(),
      hgDomain_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgDomain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomain, _internal_metadata_));
  hgDomainRepsone_descriptor_ = file->message_type(1);
  static const int hgDomainRepsone_offsets_[1] = {
  };
  hgDomainRepsone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      hgDomainRepsone_descriptor_,
      hgDomainRepsone::internal_default_instance(),
      hgDomainRepsone_offsets_,
      -1,
      -1,
      -1,
      sizeof(hgDomainRepsone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hgDomainRepsone, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hgDomain_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgDomain_descriptor_, hgDomain::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      hgDomainRepsone_descriptor_, hgDomainRepsone::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hgDomain_2eproto() {
  hgDomain_default_instance_.Shutdown();
  delete hgDomain_reflection_;
  hgDomainRepsone_default_instance_.Shutdown();
  delete hgDomainRepsone_reflection_;
}

void protobuf_InitDefaults_hgDomain_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  hgDomain_default_instance_.DefaultConstruct();
  hgDomainRepsone_default_instance_.DefaultConstruct();
  hgDomain_default_instance_.get_mutable()->InitAsDefaultInstance();
  hgDomainRepsone_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_hgDomain_2eproto_once_);
void protobuf_InitDefaults_hgDomain_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_hgDomain_2eproto_once_,
                 &protobuf_InitDefaults_hgDomain_2eproto_impl);
}
void protobuf_AddDesc_hgDomain_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_hgDomain_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016hgDomain.proto\"\231\001\n\010hgDomain\022\014\n\004MMSI\030\001 "
    "\001(\t\022\023\n\013DomainWatch\030\002 \001(\010\022\024\n\014DomainRadius"
    "\030\003 \001(\001\022\024\n\014DomainColorR\030\004 \001(\005\022\024\n\014DomainCo"
    "lorG\030\005 \001(\005\022\024\n\014DomainColorB\030\006 \001(\005\022\022\n\nDoma"
    "inShow\030\007 \001(\010\"\021\n\017hgDomainRepsoneb\006proto3", 199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hgDomain.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hgDomain_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_hgDomain_2eproto_once_);
void protobuf_AddDesc_hgDomain_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_hgDomain_2eproto_once_,
                 &protobuf_AddDesc_hgDomain_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hgDomain_2eproto {
  StaticDescriptorInitializer_hgDomain_2eproto() {
    protobuf_AddDesc_hgDomain_2eproto();
  }
} static_descriptor_initializer_hgDomain_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hgDomain::kMMSIFieldNumber;
const int hgDomain::kDomainWatchFieldNumber;
const int hgDomain::kDomainRadiusFieldNumber;
const int hgDomain::kDomainColorRFieldNumber;
const int hgDomain::kDomainColorGFieldNumber;
const int hgDomain::kDomainColorBFieldNumber;
const int hgDomain::kDomainShowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgDomain::hgDomain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgDomain_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgDomain)
}

void hgDomain::InitAsDefaultInstance() {
}

hgDomain::hgDomain(const hgDomain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgDomain)
}

void hgDomain::SharedCtor() {
  mmsi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&domainradius_, 0, reinterpret_cast<char*>(&domaincolorb_) -
    reinterpret_cast<char*>(&domainradius_) + sizeof(domaincolorb_));
  _cached_size_ = 0;
}

hgDomain::~hgDomain() {
  // @@protoc_insertion_point(destructor:hgDomain)
  SharedDtor();
}

void hgDomain::SharedDtor() {
  mmsi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void hgDomain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgDomain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgDomain_descriptor_;
}

const hgDomain& hgDomain::default_instance() {
  protobuf_InitDefaults_hgDomain_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgDomain> hgDomain_default_instance_;

hgDomain* hgDomain::New(::google::protobuf::Arena* arena) const {
  hgDomain* n = new hgDomain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgDomain::Clear() {
// @@protoc_insertion_point(message_clear_start:hgDomain)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(hgDomain, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<hgDomain*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(domainradius_, domaincolorb_);
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool hgDomain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgDomain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string MMSI = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mmsi()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mmsi().data(), this->mmsi().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "hgDomain.MMSI"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DomainWatch;
        break;
      }

      // optional bool DomainWatch = 2;
      case 2: {
        if (tag == 16) {
         parse_DomainWatch:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &domainwatch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_DomainRadius;
        break;
      }

      // optional double DomainRadius = 3;
      case 3: {
        if (tag == 25) {
         parse_DomainRadius:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &domainradius_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DomainColorR;
        break;
      }

      // optional int32 DomainColorR = 4;
      case 4: {
        if (tag == 32) {
         parse_DomainColorR:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &domaincolorr_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DomainColorG;
        break;
      }

      // optional int32 DomainColorG = 5;
      case 5: {
        if (tag == 40) {
         parse_DomainColorG:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &domaincolorg_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DomainColorB;
        break;
      }

      // optional int32 DomainColorB = 6;
      case 6: {
        if (tag == 48) {
         parse_DomainColorB:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &domaincolorb_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DomainShow;
        break;
      }

      // optional bool DomainShow = 7;
      case 7: {
        if (tag == 56) {
         parse_DomainShow:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &domainshow_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hgDomain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgDomain)
  return false;
#undef DO_
}

void hgDomain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgDomain)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgDomain.MMSI");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mmsi(), output);
  }

  // optional bool DomainWatch = 2;
  if (this->domainwatch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->domainwatch(), output);
  }

  // optional double DomainRadius = 3;
  if (this->domainradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->domainradius(), output);
  }

  // optional int32 DomainColorR = 4;
  if (this->domaincolorr() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->domaincolorr(), output);
  }

  // optional int32 DomainColorG = 5;
  if (this->domaincolorg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->domaincolorg(), output);
  }

  // optional int32 DomainColorB = 6;
  if (this->domaincolorb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->domaincolorb(), output);
  }

  // optional bool DomainShow = 7;
  if (this->domainshow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->domainshow(), output);
  }

  // @@protoc_insertion_point(serialize_end:hgDomain)
}

::google::protobuf::uint8* hgDomain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgDomain)
  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mmsi().data(), this->mmsi().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "hgDomain.MMSI");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mmsi(), target);
  }

  // optional bool DomainWatch = 2;
  if (this->domainwatch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->domainwatch(), target);
  }

  // optional double DomainRadius = 3;
  if (this->domainradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->domainradius(), target);
  }

  // optional int32 DomainColorR = 4;
  if (this->domaincolorr() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->domaincolorr(), target);
  }

  // optional int32 DomainColorG = 5;
  if (this->domaincolorg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->domaincolorg(), target);
  }

  // optional int32 DomainColorB = 6;
  if (this->domaincolorb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->domaincolorb(), target);
  }

  // optional bool DomainShow = 7;
  if (this->domainshow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->domainshow(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:hgDomain)
  return target;
}

size_t hgDomain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgDomain)
  size_t total_size = 0;

  // optional string MMSI = 1;
  if (this->mmsi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mmsi());
  }

  // optional bool DomainWatch = 2;
  if (this->domainwatch() != 0) {
    total_size += 1 + 1;
  }

  // optional double DomainRadius = 3;
  if (this->domainradius() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 DomainColorR = 4;
  if (this->domaincolorr() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->domaincolorr());
  }

  // optional int32 DomainColorG = 5;
  if (this->domaincolorg() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->domaincolorg());
  }

  // optional int32 DomainColorB = 6;
  if (this->domaincolorb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->domaincolorb());
  }

  // optional bool DomainShow = 7;
  if (this->domainshow() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgDomain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgDomain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgDomain* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgDomain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgDomain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgDomain)
    UnsafeMergeFrom(*source);
  }
}

void hgDomain::MergeFrom(const hgDomain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgDomain)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgDomain::UnsafeMergeFrom(const hgDomain& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.mmsi().size() > 0) {

    mmsi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mmsi_);
  }
  if (from.domainwatch() != 0) {
    set_domainwatch(from.domainwatch());
  }
  if (from.domainradius() != 0) {
    set_domainradius(from.domainradius());
  }
  if (from.domaincolorr() != 0) {
    set_domaincolorr(from.domaincolorr());
  }
  if (from.domaincolorg() != 0) {
    set_domaincolorg(from.domaincolorg());
  }
  if (from.domaincolorb() != 0) {
    set_domaincolorb(from.domaincolorb());
  }
  if (from.domainshow() != 0) {
    set_domainshow(from.domainshow());
  }
}

void hgDomain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgDomain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgDomain::CopyFrom(const hgDomain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgDomain)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgDomain::IsInitialized() const {

  return true;
}

void hgDomain::Swap(hgDomain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgDomain::InternalSwap(hgDomain* other) {
  mmsi_.Swap(&other->mmsi_);
  std::swap(domainwatch_, other->domainwatch_);
  std::swap(domainradius_, other->domainradius_);
  std::swap(domaincolorr_, other->domaincolorr_);
  std::swap(domaincolorg_, other->domaincolorg_);
  std::swap(domaincolorb_, other->domaincolorb_);
  std::swap(domainshow_, other->domainshow_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgDomain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgDomain_descriptor_;
  metadata.reflection = hgDomain_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgDomain

// optional string MMSI = 1;
void hgDomain::clear_mmsi() {
  mmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& hgDomain::mmsi() const {
  // @@protoc_insertion_point(field_get:hgDomain.MMSI)
  return mmsi_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgDomain::set_mmsi(const ::std::string& value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hgDomain.MMSI)
}
void hgDomain::set_mmsi(const char* value) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hgDomain.MMSI)
}
void hgDomain::set_mmsi(const char* value, size_t size) {
  
  mmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hgDomain.MMSI)
}
::std::string* hgDomain::mutable_mmsi() {
  
  // @@protoc_insertion_point(field_mutable:hgDomain.MMSI)
  return mmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* hgDomain::release_mmsi() {
  // @@protoc_insertion_point(field_release:hgDomain.MMSI)
  
  return mmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void hgDomain::set_allocated_mmsi(::std::string* mmsi) {
  if (mmsi != NULL) {
    
  } else {
    
  }
  mmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mmsi);
  // @@protoc_insertion_point(field_set_allocated:hgDomain.MMSI)
}

// optional bool DomainWatch = 2;
void hgDomain::clear_domainwatch() {
  domainwatch_ = false;
}
bool hgDomain::domainwatch() const {
  // @@protoc_insertion_point(field_get:hgDomain.DomainWatch)
  return domainwatch_;
}
void hgDomain::set_domainwatch(bool value) {
  
  domainwatch_ = value;
  // @@protoc_insertion_point(field_set:hgDomain.DomainWatch)
}

// optional double DomainRadius = 3;
void hgDomain::clear_domainradius() {
  domainradius_ = 0;
}
double hgDomain::domainradius() const {
  // @@protoc_insertion_point(field_get:hgDomain.DomainRadius)
  return domainradius_;
}
void hgDomain::set_domainradius(double value) {
  
  domainradius_ = value;
  // @@protoc_insertion_point(field_set:hgDomain.DomainRadius)
}

// optional int32 DomainColorR = 4;
void hgDomain::clear_domaincolorr() {
  domaincolorr_ = 0;
}
::google::protobuf::int32 hgDomain::domaincolorr() const {
  // @@protoc_insertion_point(field_get:hgDomain.DomainColorR)
  return domaincolorr_;
}
void hgDomain::set_domaincolorr(::google::protobuf::int32 value) {
  
  domaincolorr_ = value;
  // @@protoc_insertion_point(field_set:hgDomain.DomainColorR)
}

// optional int32 DomainColorG = 5;
void hgDomain::clear_domaincolorg() {
  domaincolorg_ = 0;
}
::google::protobuf::int32 hgDomain::domaincolorg() const {
  // @@protoc_insertion_point(field_get:hgDomain.DomainColorG)
  return domaincolorg_;
}
void hgDomain::set_domaincolorg(::google::protobuf::int32 value) {
  
  domaincolorg_ = value;
  // @@protoc_insertion_point(field_set:hgDomain.DomainColorG)
}

// optional int32 DomainColorB = 6;
void hgDomain::clear_domaincolorb() {
  domaincolorb_ = 0;
}
::google::protobuf::int32 hgDomain::domaincolorb() const {
  // @@protoc_insertion_point(field_get:hgDomain.DomainColorB)
  return domaincolorb_;
}
void hgDomain::set_domaincolorb(::google::protobuf::int32 value) {
  
  domaincolorb_ = value;
  // @@protoc_insertion_point(field_set:hgDomain.DomainColorB)
}

// optional bool DomainShow = 7;
void hgDomain::clear_domainshow() {
  domainshow_ = false;
}
bool hgDomain::domainshow() const {
  // @@protoc_insertion_point(field_get:hgDomain.DomainShow)
  return domainshow_;
}
void hgDomain::set_domainshow(bool value) {
  
  domainshow_ = value;
  // @@protoc_insertion_point(field_set:hgDomain.DomainShow)
}

inline const hgDomain* hgDomain::internal_default_instance() {
  return &hgDomain_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hgDomainRepsone::hgDomainRepsone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_hgDomain_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:hgDomainRepsone)
}

void hgDomainRepsone::InitAsDefaultInstance() {
}

hgDomainRepsone::hgDomainRepsone(const hgDomainRepsone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:hgDomainRepsone)
}

void hgDomainRepsone::SharedCtor() {
  _cached_size_ = 0;
}

hgDomainRepsone::~hgDomainRepsone() {
  // @@protoc_insertion_point(destructor:hgDomainRepsone)
  SharedDtor();
}

void hgDomainRepsone::SharedDtor() {
}

void hgDomainRepsone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hgDomainRepsone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hgDomainRepsone_descriptor_;
}

const hgDomainRepsone& hgDomainRepsone::default_instance() {
  protobuf_InitDefaults_hgDomain_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<hgDomainRepsone> hgDomainRepsone_default_instance_;

hgDomainRepsone* hgDomainRepsone::New(::google::protobuf::Arena* arena) const {
  hgDomainRepsone* n = new hgDomainRepsone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void hgDomainRepsone::Clear() {
// @@protoc_insertion_point(message_clear_start:hgDomainRepsone)
}

bool hgDomainRepsone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hgDomainRepsone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:hgDomainRepsone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hgDomainRepsone)
  return false;
#undef DO_
}

void hgDomainRepsone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hgDomainRepsone)
  // @@protoc_insertion_point(serialize_end:hgDomainRepsone)
}

::google::protobuf::uint8* hgDomainRepsone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hgDomainRepsone)
  // @@protoc_insertion_point(serialize_to_array_end:hgDomainRepsone)
  return target;
}

size_t hgDomainRepsone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hgDomainRepsone)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hgDomainRepsone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hgDomainRepsone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const hgDomainRepsone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const hgDomainRepsone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hgDomainRepsone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hgDomainRepsone)
    UnsafeMergeFrom(*source);
  }
}

void hgDomainRepsone::MergeFrom(const hgDomainRepsone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hgDomainRepsone)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void hgDomainRepsone::UnsafeMergeFrom(const hgDomainRepsone& from) {
  GOOGLE_DCHECK(&from != this);
}

void hgDomainRepsone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hgDomainRepsone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hgDomainRepsone::CopyFrom(const hgDomainRepsone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hgDomainRepsone)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool hgDomainRepsone::IsInitialized() const {

  return true;
}

void hgDomainRepsone::Swap(hgDomainRepsone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hgDomainRepsone::InternalSwap(hgDomainRepsone* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata hgDomainRepsone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hgDomainRepsone_descriptor_;
  metadata.reflection = hgDomainRepsone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// hgDomainRepsone

inline const hgDomainRepsone* hgDomainRepsone::internal_default_instance() {
  return &hgDomainRepsone_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
